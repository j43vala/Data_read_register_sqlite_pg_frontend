{"version":3,"file":"static/js/769.ad857279.chunk.js","mappings":"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","sources":["components/dashboard/NodeParameter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n// import { Replay as ReplayIcon, Stop as StopIcon } from '@mui/icons-material';  \n\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst NodeParameterTable = () => {\n  const [data, setData] = useState(null);\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\n  const [updatedAttributes, setUpdatedAttributes] = useState([]); // Add this line\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\n  // eslint-disable-next-line\n  const [newAttributeName, setNewAttributeName] = useState('');\n  // eslint-disable-next-line\n  const [newAttributeValue, setNewAttributeValue] = useState('');\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\n  const [attributeRows, setAttributeRows] = useState([{ name: '', value: '' }]);\n  const [formDataList, setFormDataList] = useState([]);\n  const [selectedModbus, setSelectedModbus] = useState({\n    port: '',\n    method: '',\n    parity: '',\n    baudrate: '',\n    stopbits: '',\n    wordLength: '',\n  });\n\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isStopping, setIsStopping] = useState(false);\n  const [restartButtonClicked] = useState(false);\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\n  const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\n  const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [retentionParameters, setRetentionParameters] = useState({\n    checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\n    successRetention: { days: '', hours: '', minutes: '', seconds: '' },\n    failureRetention: { days: '', hours: '', minutes: '', seconds: '' },\n  });\n  const [timeDelayParameters, setTimeDelayParameters] = useState({\n    minutes: '',\n    seconds: '',\n  });\n  \n  \n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setModbusSuccessMessage('');\n      setSPBSuccessMessage('');\n      setNodeAttributeSuccessMessage('');\n      setMqttSuccessMessage('');\n      setServiceStartSuccessMessage('');\n      setServiceStopSuccessMessage('');\n      setRetentionParameterSuccessMessage('');\n      setTimeDelaySuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, RetentionParameterSuccessMessage, TimeDelaySuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`/node-parameter`);\n        const responseData = await response.json();\n        setData(responseData);\n  \n        // Initialize selectedModbus state with modbus values\n        if (responseData.node_parameters) {\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\n          \n          if (modbusValues) {\n            setSelectedModbus(modbusValues);\n          }\n  \n          // Initialize retention parameters\n          const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\n          if (retentionValues) {\n            setRetentionParameters(retentionValues);\n          }\n\n          const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\n          if (timeDelayValues) {\n            setTimeDelayParameters(timeDelayValues);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n  \n    fetchData();\n  }, []);\n  \n  \n\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\n  \n\n  const baudrateList = data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options;\n  const wordLengthList = data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options;\n  const parityList = data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options;\n  const stopbitsList = data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options;\n  const portList = data.node_parameters.find(param => param.name === 'modbus')?.value.port_options;\n  const methodList = data.node_parameters.find(param => param.name === 'modbus')?.value.method_options;\n\n  const uniqueBaudrateList = [...new Set(baudrateList)];\n  const uniqueWordLengthList = [...new Set(wordLengthList)];\n  const uniqueParityList = [...new Set(parityList)];\n  const uniqueStopbitsList = [...new Set(stopbitsList)];\n  const uniquePortList = [...new Set(portList)];\n  const uniqueMethodList = [...new Set(methodList)];\n\n  const handleUpdateSpbParameterFormOpen = () =>  {\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\n    setUpdatedGroupId(spbParameter?.group_id || '');\n    setUpdateSpbParameterFormOpen(true);\n  } \n\n  const handleAddNodeAttributeFormOpen = () => {\n    // Reset the input values when opening the form\n    setFormDataList([{ name: '', value: '' }]); // Set initial row\n    setAddNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateNodeAttributeFormOpen = () => {\n    // Initialize updatedAttributes with existing attributes\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\n    setUpdatedAttributes(initialUpdatedAttributes);\n    setUpdateNodeAttributeFormOpen(true);\n  };\n  \n\n  const handleUpdateMqttFormOpen = () =>  {\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\n    setUpdateMqttFormOpen(true);\n  } \n\n  const handleUpdateFormClose = () => {\n    setUpdateSpbParameterFormOpen(false);\n    setAddNodeAttributeFormOpen(false);\n    setUpdateNodeAttributeFormOpen(false);\n    setUpdateMqttFormOpen(false);\n  };\n\n  const handleUpdateSpbParameterSubmit = async () => {\n    const updatedData = {\n      spb_parameter: {\n        edge_node_id: updatedEdgeNodeId,\n        group_id: updatedGroupId,\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/3`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setSPBSuccessMessage('SPB Parameter updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'spb_parameter' ?\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  // Add this function to handle the change in form data\n  const handleFormDataChange = (index, key, value) => {\n    const updatedFormDataList = [...formDataList];\n    updatedFormDataList[index][key] = value;\n    setFormDataList(updatedFormDataList);\n  };\n\n  // eslint-disable-next-line\n  const handleAddRow = () => {\n    setAttributeRows([...attributeRows, { name: '', value: '' }]);\n  };\n\n  // Add this function to handle the \"Add\" button click\n  const handleAddFormData = () => {\n    setFormDataList([...formDataList, { name: '', value: '' }]);\n  };\n\n  // eslint-disable-next-line\n  const handleAttributeChange = (index, key, value) => {\n    const updatedRows = [...attributeRows];\n    updatedRows[index][key] = value;\n    setAttributeRows(updatedRows);\n  };\n\n  const handleRemoveFormData = (indexToRemove) => {\n    setFormDataList((prevFormDataList) => {\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\n    });\n  };\n\n  // eslint-disable-next-line\n  const getUpdatedValue = (attributeName) => {\n    // Assuming you have a state variable for updated attributes, e.g., updatedAttributes\n    const updatedAttribute = updatedAttributes.find(attr => attr.name === attributeName);\n    return updatedAttribute ? updatedAttribute.value : \"\";\n  };\n  \n  const handleUpdateInputChange = (index, updatedAttribute) => {\n    setUpdatedAttributes(prevAttributes => {\n      const updatedAttributesCopy = [...prevAttributes];\n      updatedAttributesCopy[index] = updatedAttribute;\n      return updatedAttributesCopy;\n    });\n  };\n\n  const handleRemoveAttribute = (index) => {\n    const updatedAttributesCopy = [...updatedAttributes];\n    updatedAttributesCopy.splice(index, 1);\n    setUpdatedAttributes(updatedAttributesCopy);\n  };\n  \n\n  const handleAddNodeAttributeSubmit = async () => {\n    try {\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\n      const response = await fetch(`/node-parameter/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'node_attributes',\n          value: newAttributes,\n        }),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'node_attributes' ?\n              { ...param, value: [...(param.value || []), ...newAttributes] }\n              : param\n          )),\n        }));\n        setFormDataList([]);\n      } else {\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n\n  const handleUpdateNodeAttributeSubmit = async () => {\n    // Update local state with the new values\n    setData((prevData) => {\n      const updatedNodeParameters = prevData.node_parameters.map((param) => {\n        if (param.name === 'node_attributes') {\n          return {\n            ...param,\n            value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n          };\n        }\n        return param;\n      });\n  \n      return {\n        ...prevData,\n        node_parameters: updatedNodeParameters,\n      };\n    });\n  \n    const updatedData = {\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n    };\n  \n    try {\n      const response = await fetch(`/node-parameter/4`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n  \n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Node Attribute:  ${error}`);\n    }\n  \n    handleUpdateFormClose();\n  };\n  \n  \n  const handleUpdateMqttSubmit = async () => {\n    const updatedData = {\n      mqtt: {\n        broker_host: updatedBrokerHost,\n        broker_port: updatedBrokerPort,\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/2`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setMqttSuccessMessage('Mqtt updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'mqtt' ?\n              { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Mqtt: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleModbusChange = async (paramName, value) => {\n    try {\n      const response = await fetch(`/node-parameter/1`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          modbus: { ...selectedModbus, [paramName]: value },\n        }),\n      });\n\n      if (response.ok) {\n        setModbusSuccessMessage('Modbus updated successfully.');\n        setSelectedModbus((prevState) => ({\n          ...prevState,\n          [paramName]: value,\n        }));\n      } else {\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Modbus: ${error}`);\n    }\n  };\n\n  \n  const handleRestart = () => {\n    // Add logic for restarting here\n    setIsRestarting(true);\n  \n    // Perform your restart actions, then set isRestarting to false\n    // For example, you can make a fetch request to a restart endpoint\n    fetch(`/service/restart-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStartSuccessMessage('Service is restarting.');\n          // Add any additional logic if needed\n        } else {\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error restarting service: ${error}`);\n      })\n      .finally(() => {\n        setIsRestarting(false);\n      });\n  };\n\n\n  const handleStop = () => {\n    // Add logic for stopping here\n    setIsStopping(true);\n  \n    fetch(`/service/stop-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStopSuccessMessage('Service is stopped.');\n          // Add any additional logic if needed\n        } else {\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error stopping service: ${error}`);\n      })\n      .finally(() => {\n        setIsStopping(false);\n      });\n  };\n\n  // Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n  \n  const handleRetentionParameterChange = (param, unit, value) => {\n    // Parse the input value as an integer\n    const integerValue = parseInt(value, 10);\n  \n    // Check if the parsed value is a valid integer\n    if (!isNaN(integerValue)) {\n      setRetentionParameters((prevParameters) => ({\n        ...prevParameters,\n        [param]: { ...prevParameters[param], [unit]: integerValue },\n      }));\n    }\n    // You may add an else statement here to handle invalid input if needed\n  };\n  \n  \n  const handleRetentionParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/5`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          retention_parameter: retentionParameters,\n        }),\n      });\n  \n      if (response.ok) {\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\n    }\n  };\n\n  const handleTimeDelayChange = (unit, value) => {\n    // Parse the input value as an integer\n    const integerValue = parseInt(value, 10);\n  \n    // Check if the parsed value is a valid integer\n    if (!isNaN(integerValue)) {\n      setTimeDelayParameters((prevParameters) => ({\n        ...prevParameters,\n        [unit]: integerValue,\n      }));\n    }\n    // You may add an else statement here to handle invalid input if needed\n  };\n  \n\n  const handleTimeDelayParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/6`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          time_delay: timeDelayParameters,\n        }),\n      });\n\n      if (response.ok) {\n        // Display success message or handle as needed\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\n      } else {\n        // Display error message or handle as needed\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\n      }\n    } catch (error) {\n      // Display error message or handle as needed\n      setErrorMessage(`Error updating Time Delay: ${error}`);\n    }\n  };\n\n  \n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n      {ServiceStartSuccessMessage && (\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\n      )}\n      {ServiceStopSuccessMessage && (\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\n      )}\n      {NodeAttributeSuccessMessage && (\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\n      )}\n      {SPBSuccessMessage && (\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \n      )}\n      {MqttSuccessMessage && (\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\n      )}\n      {ModbusSuccessMessage && (\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\n      )}\n      {RetentionParameterSuccessMessage && (\n        <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\n      )}\n      {TimeDelaySuccessMessage && (\n        <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\n      )}\n      {errorMessage && (\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n      )}\n      </Grid>\n      <Grid item xs={6}>\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" color=\"primary\">\n            Restart\n          </Button>\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\n            Stop\n          </Button>\n        </div>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\" >Node Attributes</Typography>\n            <div style={{ display: 'flex', gap: '0px' }}>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginRight: '0px' }}\n                onClick={handleUpdateNodeAttributeFormOpen}\n              >\n                <EditIcon style={{ fontSize : \"medium\" }}/>\n              </IconButton>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginLeft: '5px' }}\n                onClick={handleAddNodeAttributeFormOpen}\n              >\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          </div>\n          <div style={{ marginTop: '3px' }}>\n            {nodeAttributes && nodeAttributes.map(attr => (\n              <div key={attr.name}>\n                <Typography variant=\"body1\">\n                  <strong>{attr.name}:</strong> {attr.value}\n                </Typography>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">SPB Parameter</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateSpbParameterFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Edge Node Id:</strong> {spbParameter?.edge_node_id}\n          </div>\n          <div>\n            <strong>Group Id:</strong> {spbParameter?.group_id}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">MQTT</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateMqttFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\n          </div>\n          <div>\n            <strong>Broker Port:</strong> {mqtt?.broker_port}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\n                <FormControl fullWidth>\n                  <InputLabel>{label}</InputLabel>\n                  <Select\n                    value={selectedModbus[label.toLowerCase()]}\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\n                  >\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\n                      <MenuItem key={baudrate} value={baudrate}>\n                        {baudrate}\n                      </MenuItem>\n                    ))}\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\n                      <MenuItem key={wordLength} value={wordLength}>\n                        {wordLength}\n                      </MenuItem>\n                    ))}\n                    {label === 'Parity' && uniqueParityList.map(parity => (\n                      <MenuItem key={parity} value={parity}>\n                        {parity}\n                      </MenuItem>\n                    ))}\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\n                      <MenuItem key={stopbits} value={stopbits}>\n                        {stopbits}\n                      </MenuItem>\n                    ))}\n                    {label === 'Port' && uniquePortList.map(port => (\n                      <MenuItem key={port} value={port}>\n                        {port}\n                      </MenuItem>\n                    ))}\n                    {label === 'Method' && uniqueMethodList.map(method => (\n                      <MenuItem key={method} value={method}>\n                        {method}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Retention Parameters</Typography>\n          <form>\n            {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\n              <div key={index} style={{ marginBottom: '20px' }}>\n                <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                  {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\n                    <TextField\n                      key={unitIndex}\n                      label={unit.charAt(0).toUpperCase() + unit.slice(1)}\n                      type=\"number\"\n                      value={retentionParameters[param][unit]}\n                      onChange={(e) => handleRetentionParameterChange(param, unit, e.target.value)}\n                      fullWidth\n                      style={{ marginRight: '10px' }}\n                    />\n                  ))}\n                </div>\n              </div>\n            ))}\n            <Button onClick={handleRetentionParameterSubmit} color=\"primary\">\n              Submit\n            </Button>\n          </form>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Time Delay Parameters</Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n            <TextField\n              label=\"Minutes\"\n              type=\"number\"\n              value={timeDelayParameters.minutes}\n              onChange={(e) => setTimeDelayParameters(prev => ({ ...prev, minutes: parseInt(e.target.value) || 0 }))}\n              fullWidth\n              style={{ marginRight: '20px' }}\n            />\n            <TextField\n              label=\"Seconds\"\n              type=\"number\"\n              value={timeDelayParameters.seconds}\n              onChange={(e) => setTimeDelayParameters(prev => ({ ...prev, seconds: parseInt(e.target.value) || 0 }))}\n              fullWidth\n            />\n          </div>\n          <Button onClick={handleTimeDelayParameterSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </Paper>\n      </Grid>\n\n      {/* Update form for SPB Parameter */}\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update SPB Parameter</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Edge Node ID\"\n            value={updatedEdgeNodeId}\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\n          />\n          <TextField\n            label=\"Group ID\"\n            value={updatedGroupId}\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit form for Node Attribute */}\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Edit Node Attribute</DialogTitle>\n        <DialogContent>\n          {updatedAttributes.map((attr, index) => (\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n              <TextField\n                label=\"Attribute Name\"\n                value={attr.name}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\n                style={{ marginRight: '10px', marginTop: '5px' }}\n              />\n              <TextField\n                label=\"Attribute Value\"\n                value={attr.value}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\n                style={{ marginTop: '5px' }}\n              />\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      {/* Create form for Add Node Attribute */}\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Add Node Attribute</DialogTitle>\n        <DialogContent>\n          {formDataList.map((formData, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Name\"\n                  value={formData.name}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Value\"\n                  value={formData.value}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                {index > 0 && (\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={2}>\n                {index === formDataList.length - 1 && (\n                  <IconButton onClick={handleAddFormData}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      {/* Update form for Mqtt */}\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update Mqtt</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Broker Host\"\n            value={updatedBrokerHost}\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Broker Port\"\n            value={updatedBrokerPort}\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n\nexport default NodeParameterTable;"],"names":["NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","newAttributeName","setNewAttributeName","newAttributeValue","setNewAttributeValue","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","attributeRows","setAttributeRows","name","value","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","timeDelayParameters","setTimeDelayParameters","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","modbusValues","find","param","retentionValues","timeDelayValues","error","console","fetchData","_jsx","children","spbParameter","nodeAttributes","mqtt","baudrateList","baudrate_options","wordLengthList","wordlength_options","parityList","parity_options","stopbitsList","stopbits_options","portList","port_options","methodList","method_options","uniqueBaudrateList","Set","uniqueWordLengthList","uniqueParityList","uniqueStopbitsList","uniquePortList","uniqueMethodList","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","handleUpdateInputChange","updatedAttribute","prevAttributes","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","concat","statusText","catch","finally","disabled","variant","color","handleStop","marginLeft","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","EditIcon","fontSize","handleAddNodeAttributeFormOpen","AddIcon","marginTop","handleUpdateSpbParameterFormOpen","edge_node_id","group_id","handleUpdateMqttFormOpen","broker_host","broker_port","flexDirection","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","replace","unit","unitIndex","TextField","charAt","toUpperCase","slice","type","handleRetentionParameterChange","integerValue","parseInt","isNaN","prevParameters","retention_parameter","prev","time_delay","Dialog","open","DialogTitle","DialogContent","DialogActions","updatedData","spb_parameter","prevData","splice","handleRemoveAttribute","DeleteIcon","updatedNodeParameters","node_attributes","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes"],"sourceRoot":""}