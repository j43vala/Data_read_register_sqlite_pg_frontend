{"version":3,"file":"static/js/399.78adecf1.chunk.js","mappings":"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","sources":["components/dashboard/GetDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Grid\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  headerText: {\r\n    fontFamily: 'Arial, sans-serif',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  buttonGroup: {\r\n    marginLeft: 'auto',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  addButton: {\r\n    marginRight: theme.spacing(2),\r\n    backgroundColor: theme.palette.success.main,\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.success.dark,\r\n    },\r\n  },\r\n  deleteButton: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}));\r\n\r\nconst baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst DeviceParameterTable = () => {\r\n  const classes = useStyles();\r\n  const [devices, setDevices] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState('');\r\n  const [parameters, setParameters] = useState([]);\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [selectedParameter, setSelectedParameter] = useState(null);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);\r\n  const [updatedFunctionCode, setUpdatedFunctionCode] = useState('');\r\n  const [updatedAddress, setUpdatedAddress] = useState('');\r\n  const [updatedParameterName, setUpdatedParameterName] = useState('');\r\n  const [updatedDataType, setUpdatedDataType] = useState('');\r\n  const [updatedName, setUpdatedName] = useState('');\r\n  const [updatedValue, setUpdatedValue] = useState('');\r\n  const [deviceName, setDeviceName] = useState('');\r\n  const [slaveId, setSlaveId] = useState('');\r\n  const [deviceSuccessMessage, setDeviceSuccessMessage] = useState('');\r\n  const [parameterSuccessMessage, setParameterSuccessMessage] = useState('');\r\n  const [attributeSuccessMessage, setAttributeSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [isAddDeviceFormOpen, setIsAddDeviceFormOpen] = useState(false);\r\n  const [isAddParameterFormOpen, setIsAddParameterFormOpen] = useState(false);\r\n  const [isAddAttributeFormOpen, setIsAddAttributeFormOpen] = useState(false);\r\n  // eslint-disable-next-line\r\n  const [parameterToDelete, setParameterToDelete] = useState(null);\r\n  // eslint-disable-next-line\r\n  const [attributeToDelete, setAttributeToDelete] = useState(null);\r\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\r\n  const [isDeleteAttributeConfirmationOpen, setIsDeleteAttributeConfirmationOpen] = useState(false);\r\n  const [selectedDeviceName, setSelectedDeviceName] = useState('');\r\n  // eslint-disable-next-line\r\n  const [selectedSlaveId, setSelectedSlaveId] = useState('');\r\n  const [updateDeviceFormOpen, setUpdateDeviceFormOpen] = useState(false);\r\n  const [updatedDeviceName, setUpdatedDeviceName] = useState('');\r\n  const [updatedSlaveId, setUpdatedSlaveId] = useState('');\r\n  const [isDeleteDeviceConfirmationOpen, setIsDeleteDeviceConfirmationOpen] = useState(false);\r\n  const [parameterFields, setParameterFields] = useState([{ function_code: '', address: '', ParameterName: '', data_type: '' }]);\r\n  const [attributeFields, setAttributeFields] = useState([{ name: '', value: ''}]);\r\n  const [selectedAttribute, setSelectedAttribute] = useState(null);\r\n  const [openUpdateAttributeDialog, setOpenUpdateAttributeDialog] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [parameterTableData, setParameterTableData] = useState([]);\r\n\r\n  const clearMessagesAfterDelay = () => {\r\n    setTimeout(() => {\r\n      setDeviceSuccessMessage('');\r\n      setParameterSuccessMessage('');\r\n      setAttributeSuccessMessage('');\r\n      setErrorMessage('');\r\n      setSuccessMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n  }, [deviceSuccessMessage, parameterSuccessMessage, attributeSuccessMessage, errorMessage, successMessage]);\r\n\r\n  useEffect(() => {\r\n    const fetchDevices = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/devices/`);\r\n        const data = await response.json();\r\n\r\n        if (Array.isArray(data.devices)) {\r\n          setDevices(data.devices);\r\n          // setDeviceSuccessMessage('Devices fetch Successfully.!');\r\n        } else {\r\n          setErrorMessage(`No Devices Available.!`);\r\n        }\r\n      } catch (error) {\r\n        setErrorMessage(`Error fetching devices: ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchDevices();\r\n  }, []);\r\n\r\n  const handleDeviceChange = async (deviceId) => {\r\n    try {\r\n      console.log('Fetching device details for deviceId:', deviceId);\r\n  \r\n      const response = await fetch(`${baseUrl}/devices/${encodeURIComponent(deviceId)}`);\r\n      const data = await response.json();\r\n  \r\n      setOpen(true);\r\n  \r\n      if (data.device && Array.isArray(data.device.parameters)) {\r\n        if (data.device.parameters.length > 0) {\r\n          setParameters(data.device.parameters);\r\n          setSuccessMessage('');\r\n          setErrorMessage('');\r\n        } else {\r\n          setParameters([]);\r\n          setAttributes([]);\r\n          setErrorMessage('No Parameters And Attributes connected to the selected device');\r\n        }\r\n      } else {\r\n        setParameters([]);\r\n        setErrorMessage('Error fetching Parameters and Attributes or no Parameters and Attributes connected to the selected device');\r\n      }\r\n  \r\n      // Set selectedDeviceName and selectedSlaveId based on the selected device\r\n      setSelectedDevice(deviceId);\r\n      if (data.device) {\r\n        setSelectedDeviceName(data.device.name);\r\n        setSelectedSlaveId(data.device.slave_id);\r\n        setAttributes(data.device.attributes); // Set connected attributes\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching Device details:', error);\r\n      setErrorMessage('Error fetching Device details. Please try again.');\r\n    }\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    const deviceId = event.target.value;\r\n    handleDeviceChange(deviceId);\r\n  }; \r\n  \r\n\r\n  const handleUpdateClick = (parameter) => {\r\n    setSelectedParameter(parameter);\r\n    setUpdatedFunctionCode(parameter.function_code);\r\n    setUpdatedAddress(parameter.address);\r\n    setUpdatedParameterName(parameter.parameter_name);\r\n    setUpdatedDataType(parameter.data_type);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedFunctionCode('');\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n  };\r\n\r\n  const handleUpdateSubmit = async () => {\r\n    if (!selectedParameter || !selectedParameter.id) {\r\n      setErrorMessage('No Parameter selected for update');\r\n      return;\r\n    }\r\n  \r\n    // Validate that the updated address field contains only integer values\r\n    if (!Number.isInteger(parseInt(updatedAddress, 10))) {\r\n      setErrorMessage('Please Insert Only Integer Values in the Address field!');\r\n      handleUpdateDialogClose();\r\n      return;\r\n    }\r\n  \r\n    const updatedValues = {\r\n      function_code: updatedFunctionCode,\r\n      address: updatedAddress,\r\n      parameter_name: updatedParameterName,\r\n      data_type: updatedDataType,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`${baseUrl}/parameter/devices/${selectedDevice}/parameter/${selectedParameter.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Parameter: ${response.statusText}`);\r\n      }\r\n  \r\n      handleChange({ target: { value: selectedDevice } });\r\n      clearParameterForm();\r\n      handleUpdateDialogClose();\r\n      setParameterSuccessMessage('Parameter updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Parameter:', error);\r\n      clearParameterForm();\r\n      handleUpdateDialogClose();\r\n      setErrorMessage(`Error updating Parameter. ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleDeleteSubmit = async (parameter) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && parameter && parameter.id) {\r\n        const response = await fetch(`${baseUrl}/parameter/devices/${selectedDevice}/parameter/${parameter.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete parameter: ${response.statusText}`);\r\n        }\r\n\r\n        setParameterSuccessMessage('Parameter deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`${baseUrl}/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.parameters)) {\r\n          setParameters(deviceData.device.parameters);\r\n        } else {\r\n          setParameters([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch(`${baseUrl}/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Parameter:', error);\r\n      setErrorMessage(`Error deleting Parameter. ${error.message}`);\r\n    } finally {\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const handleDeleteClick = (parameter) => {  // Define handleDeleteClick explicitly\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  };\r\n\r\n  const createDevice = async () => {\r\n    if (deviceName && slaveId) {\r\n      const newDevice = { name: deviceName, slave_id: slaveId };\r\n\r\n      try {\r\n        const response = await fetch(`${baseUrl}/devices/`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(newDevice),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        setDeviceSuccessMessage('Device created successfully!');\r\n        clearDeviceForm();\r\n        setIsAddDeviceFormOpen(false);\r\n\r\n        // Fetch the updated list of devices\r\n        const devicesResponse = await fetch(`${baseUrl}/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          setErrorMessage(`Invalid response format for devices: ${devicesData}`);\r\n          clearDeviceForm();\r\n          setIsAddDeviceFormOpen(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating device:', error);\r\n        setErrorMessage('Error creating device. Please try again.');\r\n        clearDeviceForm();\r\n        setIsAddDeviceFormOpen(false);\r\n      }\r\n    } else {\r\n      setErrorMessage('Both device name and slave ID are required');\r\n      clearDeviceForm();\r\n      setIsAddDeviceFormOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateDevice = async () => {\r\n    try {\r\n      const updatedDevice = { name: updatedDeviceName, slave_id: updatedSlaveId };\r\n  \r\n      await fetch(`${baseUrl}/devices/${selectedDevice.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedDevice),\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch(`${baseUrl}/devices/`);\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        // Update selected device details first\r\n        setSelectedDeviceName(updatedDeviceName);\r\n        setSelectedSlaveId(updatedSlaveId);\r\n  \r\n        // Then update the state of devices\r\n        setDevices(devicesData.devices);\r\n        setDeviceSuccessMessage('Device updated successfully!');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating device:', error);\r\n      setErrorMessage('Error updating device. Please try again.');\r\n    } finally {\r\n      setUpdateDeviceFormOpen(false);\r\n    }\r\n  };\r\n  \r\n  const handleDeleteDevice = async (deviceId) => {\r\n    try {  \r\n      // Send DELETE request to the server\r\n      await fetch(`${baseUrl}/devices/${deviceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch(`${baseUrl}/devices/`);\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        setDevices(devicesData.devices);\r\n        setParameters([]);\r\n        setAttributes([]);\r\n  \r\n        // Reset selected device details\r\n        setSelectedDevice(null);\r\n        setSelectedDeviceName('');\r\n        setSelectedSlaveId('');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n  \r\n      setDeviceSuccessMessage('Device deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting device:', error);\r\n      setErrorMessage('Error deleting device. Please try again.');\r\n    } finally {\r\n      // Close the confirmation dialog and any other necessary actions\r\n      setIsDeleteDeviceConfirmationOpen(false);\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n      setSelectedAttribute(null);\r\n    }\r\n  };\r\n  \r\n  const handleOpenUpdateDeviceForm = (deviceId) => {\r\n    const selectedDevice = devices.find((device) => device.id === deviceId);\r\n\r\n    setUpdatedDeviceName(selectedDevice.name);\r\n    setUpdatedSlaveId(selectedDevice.slave_id);\r\n    setSelectedDevice(selectedDevice);\r\n    setUpdateDeviceFormOpen(true);\r\n  };\r\n\r\n  const handleCloseUpdateDeviceForm = () => {\r\n    setUpdateDeviceFormOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceClick = (deviceId, deviceName) => {\r\n    setSelectedDevice(deviceId);\r\n    setSelectedDeviceName(deviceName);\r\n    setIsDeleteDeviceConfirmationOpen(true);\r\n  };\r\n\r\n  const handleDeleteDeviceConfirmationClose = () => {\r\n    setIsDeleteDeviceConfirmationOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n  };\r\n\r\n  const clearDeviceForm = () => {\r\n    setDeviceName('');\r\n    setSlaveId('');\r\n  };\r\n  \r\n  const handleAddDeviceClick = () => {\r\n    setIsAddDeviceFormOpen(true);\r\n  };\r\n  \r\n  const handleAddParameterClick = () => {\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n  \r\n  const handleAddDeviceFormClose = () => {\r\n    setIsAddDeviceFormOpen(false);\r\n    clearDeviceForm();\r\n  };\r\n  \r\n  const handleAddParameterFormClose = () => {\r\n    setIsAddParameterFormOpen(false);\r\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '' }]); // Reset fields\r\n    clearParameterForm();\r\n  };\r\n\r\n  const handleDeleteParameterDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n    setParameterToDelete(null);\r\n  };\r\n\r\n  const handleDeleteParameterClick = (parameter) => {\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  }; \r\n\r\n  const clearParameterForm = () => {\r\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '' }]);\r\n  };\r\n  \r\n  const handleAddParameterButtonClick = () => {\r\n    console.log('Add Parameter button clicked');\r\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '' }]);\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n\r\n\r\n  const handleUpdateParameterDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedFunctionCode('');\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n  };\r\n  \r\n  \r\n  // const ParameterDevice = () => {\r\n  //   if (!selectedDevice) {\r\n  //     setErrorMessage('Please select a device!');\r\n  //     return;\r\n  //   }\r\n  \r\n  //   if (!address || !ParameterName || !data_type_type) {\r\n  //     setErrorMessage('Please fill in all the required fields for the new Parameter!');\r\n  //     return;\r\n  //   }\r\n  \r\n  //   const newParameter = {\r\n  //     address,\r\n  //     parameter_name: ParameterName,\r\n  //     data_type_type,\r\n  //     device_id: selectedDevice,\r\n  //   };\r\n  \r\n  //   fetch(`http://localhost:5000/Parameter/devices/${selectedDevice}/Parameter`, {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //     body: JSON.stringify(newParameter),\r\n  //   })\r\n  //     .then((response) => {\r\n  //       if (!response.ok) {\r\n  //         throw new Error('Network response was not ok');\r\n  //       }\r\n  //       return response.json();\r\n  //     })\r\n  //     .then(() => {\r\n  //       setParameterSuccessMessage('New Parameter created successfully!');\r\n  //       clearParameterForm();\r\n  //       setIsAddParameterFormOpen(false);\r\n  \r\n  //       handleDeviceChange({ target: { value: selectedDevice } });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error('Error creating a new Parameter:', error);\r\n  //       setErrorMessage('Error creating a new Parameter. Please try again.');\r\n  //     });\r\n  // };\r\n\r\n  const parameterDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      setIsAddParameterFormOpen(false);\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = parameterFields.some(\r\n      (field) => !field.function_code || !field.address || !field.ParameterName || !field.data_type\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each parameter!');\r\n      setIsAddParameterFormOpen(false);\r\n      clearParameterForm();\r\n      return;\r\n    }\r\n  \r\n    // Validate that the address field contains only integer values\r\n    const invalidAddressFields = parameterFields.some(\r\n      (field) => !Number.isInteger(parseInt(field.address, 10))\r\n    );\r\n  \r\n    if (invalidAddressFields) {\r\n      setErrorMessage('Please Enter Only Integer Values in the Address Field!');\r\n      clearParameterForm();\r\n      setIsAddParameterFormOpen(false);\r\n      return;\r\n    }\r\n  \r\n    const parameterPayload = {\r\n      parameters: parameterFields.map((field) => ({\r\n        active: true,\r\n        function_code: field.function_code,\r\n        address: field.address,\r\n        parameter_name: field.ParameterName,\r\n        data_type: field.data_type,\r\n      })),\r\n    };\r\n  \r\n    fetch(`${baseUrl}/parameter/devices/${selectedDevice}/parameter`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(parameterPayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more parameters failed to create.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((responseData) => {\r\n        console.log('API Response Data:', responseData);\r\n  \r\n        // Check if responseData has the expected structure\r\n        if (responseData.created_parameters) {\r\n          // Update the table data with the new parameters\r\n          setParameterTableData([...parameterTableData, ...responseData.created_parameters]);\r\n  \r\n          setParameterSuccessMessage('Parameters created successfully!');\r\n          clearParameterForm();\r\n          setIsAddParameterFormOpen(false);\r\n          handleChange({ target: { value: selectedDevice } });\r\n        } else {\r\n          console.error('Unexpected response format:', responseData);\r\n          setErrorMessage('Error creating Parameters. Please try again.');\r\n          clearParameterForm();\r\n          setIsAddParameterFormOpen(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Parameters:', error);\r\n        setErrorMessage('Error creating Parameters. Please try again.');\r\n        clearParameterForm();\r\n        setIsAddParameterFormOpen(false);\r\n      });\r\n  };\r\n  \r\n\r\n  const handleFieldChange = (index, field, value) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields[index][field] = value;\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const addEmptyRow = () => {\r\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '' }]);\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields.splice(index, 1);\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  const clearAttributeForm = () => {\r\n    setAttributeFields([{ name: '', value: '' }]);\r\n  };\r\n\r\n  const handleAddAttributeFormClose = () => {\r\n    setIsAddAttributeFormOpen(false);\r\n    setAttributeFields([{ name: '', value: '' }]); // Reset fields\r\n    clearAttributeForm();\r\n  };\r\n\r\n  const handleAddAttributeButtonClick = () => {\r\n    console.log('Add Attribute button clicked');\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const handleAddAttributeClick = () => {\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const attributeDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = attributeFields.some(\r\n      (field) => !field.name || !field.value\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each attribute!');\r\n      clearAttributeForm();\r\n      return;\r\n    }\r\n  \r\n    const attributePayload = {\r\n      attributes: attributeFields.map((field) => ({\r\n        name: field.name,\r\n        value: field.value,\r\n      })),\r\n    };\r\n  \r\n    fetch(`${baseUrl}/attribute/devices/${selectedDevice}/attribute`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(attributePayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more attributes failed to create.');\r\n        }\r\n      })\r\n      .then(() => {\r\n        setAttributeSuccessMessage('Attributes created successfully!');\r\n        clearAttributeForm();\r\n        setIsAddAttributeFormOpen(false);\r\n        handleChange({ target: { value: selectedDevice } });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Attributes:', error);\r\n        setErrorMessage('Error creating Attributes. Please try again.');\r\n        clearAttributeForm();\r\n        setIsAddAttributeFormOpen(false);\r\n      });\r\n  };\r\n  \r\n  const handleAttributeFieldChange = (index, field, value) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields[index][field] = value;\r\n    setAttributeFields(updatedFields);\r\n  };\r\n  \r\n  // eslint-disable-next-line\r\n  const addAttributeEmptyRow = () => {\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n  };\r\n  \r\n  const removeAttributeRow = (index) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields.splice(index, 1);\r\n    setAttributeFields(updatedFields);\r\n  };\r\n\r\n  const handleUpdateAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setUpdatedName(attribute.name);\r\n    setUpdatedValue(attribute.value);\r\n    setOpenUpdateAttributeDialog(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateAttributeDialogClose = () => {\r\n    setOpenUpdateAttributeDialog(false);\r\n    setUpdatedName('');\r\n    setUpdatedValue('');\r\n  };\r\n\r\n  const handleUpdateAttributeSubmit = async () => {\r\n    if (!selectedAttribute || !selectedAttribute.id || !selectedDevice) {\r\n      console.error('No Attribute or Device selected for update');\r\n      return;\r\n    }\r\n  \r\n    const updatedValues = {\r\n      name: updatedName,\r\n      value: updatedValue,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`${baseUrl}/attribute/devices/${selectedDevice}/attribute/${selectedAttribute.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Attribute: ${response.statusText}`);\r\n      }\r\n  \r\n      handleChange({ target: { value: selectedDevice } });\r\n      handleUpdateAttributeDialogClose();\r\n      clearAttributeForm();\r\n      setAttributeSuccessMessage('Attribute updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Attribute:', error);\r\n      setErrorMessage(`Error updating Attribute. ${error.message}`);\r\n      clearAttributeForm();\r\n      handleUpdateAttributeDialogClose();\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const handleDeleteAttributeSubmit = async (attribute) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && attribute && attribute.id) {\r\n        const response = await fetch(`${baseUrl}/attribute/devices/${selectedDevice}/attribute/${attribute.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete Attribute: ${response.statusText}`);\r\n        }\r\n\r\n        setAttributeSuccessMessage('Attribute deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`${baseUrl}/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.attributes)) {\r\n          setAttributes(deviceData.device.attributes);\r\n        } else {\r\n          setAttributes([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch(`${baseUrl}/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Attribute:', error);\r\n      setErrorMessage(`Error deleting Attribute. ${error.message}`);\r\n    } finally {\r\n      setIsDeleteAttributeConfirmationOpen(false);\r\n      setOpenUpdateAttributeDialog(false);\r\n      setSelectedAttribute(null);\r\n    }\r\n  };\r\n\r\n  \r\n  const handleDeleteAttributeDialogClose = () => {\r\n    setIsDeleteAttributeConfirmationOpen(false);\r\n    setAttributeToDelete(null);\r\n  };\r\n\r\n  const handleDeleteAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setIsDeleteAttributeConfirmationOpen(true);\r\n  }; \r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // // Define SuccessMessage and ErrorMessage components\r\n  // const SuccessMessage = ({ message, onClose }) => (\r\n  //   <Alert severity=\"success\" onClose={onClose}>\r\n  //     {message}\r\n  //   </Alert>\r\n  // );\r\n\r\n  // const ErrorMessage = ({ message, onClose }) => (\r\n  //   <Alert severity=\"error\" onClose={onClose}>\r\n  //     {message}\r\n  //   </Alert>\r\n  // );\r\n\r\n  // Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message }) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message }) => (\r\n    <Alert severity=\"error\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={10}>\r\n          {deviceSuccessMessage && (\r\n            <SuccessMessage message={deviceSuccessMessage} onClose={() => setDeviceSuccessMessage('')}/>\r\n          )}\r\n          {errorMessage && (\r\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={2} container justifyContent=\"flex-end\">\r\n          <Button\r\n            onClick={handleAddDeviceClick}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            Add Device\r\n          </Button>\r\n        </Grid>\r\n    \r\n        <Grid item xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              {/* Table Header */}\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Device Name</TableCell>\r\n                  <TableCell>Slave ID</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              {/* Table Body */}\r\n              <TableBody>\r\n                {devices.map((device) => (\r\n                  <TableRow key={device.id}>\r\n                    <TableCell>{device.name}</TableCell>\r\n                    <TableCell>{device.slave_id}</TableCell>\r\n                    <TableCell>\r\n                      {/* Show button */}\r\n                      <IconButton\r\n                        onClick={() => handleOpenUpdateDeviceForm(device.id)}\r\n                        variant=\"contained\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\r\n                      </IconButton>\r\n                      <IconButton \r\n                        onClick={() => handleDeleteDeviceClick(device.id, device.name)}\r\n                        variant=\"outlined\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <DeleteIcon style={{ color: 'gray', fontSize : \"medium\" }} />\r\n                      </IconButton>\r\n                      <Button\r\n                        onClick={() => handleDeviceChange(device.id)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        Configuration\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n      </div> \r\n\r\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {selectedDeviceName}\r\n        </DialogTitle>\r\n        <IconButton\r\n          onClick={handleClose}\r\n          color=\"inherit\"\r\n          style={{ position: 'absolute', right: 8, top: 8 }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <DialogContent>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <DialogTitle>\r\n              Parameter\r\n            </DialogTitle>\r\n            <Button\r\n              onClick={handleAddParameterClick}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              style={{ marginBottom: '10px' }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          {/* Display Parameter Success and Error Messages */}\r\n          {parameterSuccessMessage && (\r\n            <SuccessMessage message={parameterSuccessMessage} onClose={() => setParameterSuccessMessage('')} />\r\n          )}\r\n          {errorMessage && (\r\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\r\n          )}\r\n          <TableContainer component={Paper}>\r\n            {/* Parameter Table */}\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Function Code</TableCell>\r\n                  <TableCell>Address</TableCell>\r\n                  <TableCell>Parameter Name</TableCell>\r\n                  <TableCell>Data Type</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {parameters.map((parameter) => (\r\n                  <TableRow key={parameter.id}>\r\n                    <TableCell>{parameter.function_code}</TableCell>\r\n                    <TableCell>{parameter.address}</TableCell>\r\n                    <TableCell>{parameter.parameter_name}</TableCell>\r\n                    <TableCell>{parameter.data_type}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton\r\n                        onClick={() => handleUpdateClick(parameter)}\r\n                        variant=\"contained\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\r\n                      </IconButton>\r\n                      <IconButton\r\n                        onClick={() => handleDeleteParameterClick(parameter)}\r\n                        variant=\"contained\"\r\n                      >\r\n                        <DeleteIcon style={{ color: 'gray', fontSize : \"medium\" }} />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <DialogTitle style={{  marginTop: '30px' }} >\r\n              Attribute\r\n            </DialogTitle>\r\n            <Button\r\n              onClick={handleAddAttributeClick}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              style={{  marginTop: '30px' }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          {/* Display Attribute Success and Error Messages */}\r\n          {attributeSuccessMessage && (\r\n            <SuccessMessage message={attributeSuccessMessage} onClose={() => setAttributeSuccessMessage('')} />\r\n          )}\r\n          <TableContainer component={Paper} style={{ marginTop: '10px' }}>\r\n            {/* Attribute Table */}\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Attribute Name</TableCell>\r\n                  <TableCell>Attribute Value</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {attributes.map((attribute) => (\r\n                  <TableRow key={attribute.id}>\r\n                    <TableCell>{attribute.name}</TableCell>\r\n                    <TableCell>{attribute.value}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton\r\n                        onClick={() => handleUpdateAttributeClick(attribute)}\r\n                        variant=\"contained\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\r\n                      </IconButton>\r\n                      <IconButton\r\n                        onClick={() => handleDeleteAttributeClick(attribute)}\r\n                        variant=\"contained\"\r\n                      >\r\n                        <DeleteIcon style={{ color: 'gray', fontSize : \"medium\" }} />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </DialogContent>\r\n      </Dialog>\r\n      \r\n  \r\n      <Dialog open={openUpdateDialog} onClose={handleUpdateParameterDialogClose}>\r\n      <DialogTitle style={{ color: '#008080' }}>Update Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n              <InputLabel style={{ marginTop: '10px' }}>Function Code</InputLabel>\r\n                <Select\r\n                  value={updatedFunctionCode}\r\n                  style={{ marginTop: '10px' }}\r\n                  onChange={(e) => setUpdatedFunctionCode(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\r\n                  <MenuItem value=\"Input Status\">Input Status</MenuItem>\r\n                  <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\r\n                  <MenuItem value=\"Input Register\">Input Register</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Address\"\r\n                value={updatedAddress}\r\n                style={{ marginTop: '10px' }}\r\n                onChange={(e) => setUpdatedAddress(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Parameter Name\"\r\n                value={updatedParameterName}\r\n                onChange={(e) => setUpdatedParameterName(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Data Type</InputLabel>\r\n                <Select\r\n                  value={updatedDataType}\r\n                  onChange={(e) => setUpdatedDataType(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                  <MenuItem value=\"Float\">Float</MenuItem>\r\n                  <MenuItem value=\"Double\">Double</MenuItem>\r\n                  <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n      <Dialog open={isDeleteConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Parameter?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteSubmit(selectedParameter)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={openUpdateAttributeDialog} onClose={handleUpdateAttributeDialogClose}>\r\n      <DialogTitle style={{ color: '#008080' }}>Update Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Name\"\r\n                value={updatedName}\r\n                onChange={(e) => setUpdatedName(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Value\"\r\n                value={updatedValue}\r\n                onChange={(e) => setUpdatedValue(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateAttributeSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isDeleteAttributeConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Attribute?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteAttributeSubmit(selectedAttribute)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        \r\n      <Dialog open={updateDeviceFormOpen} onClose={handleCloseUpdateDeviceForm}>\r\n        <DialogTitle>Update Device</DialogTitle>\r\n        <DialogContent>\r\n          {selectedDevice && (\r\n            <>\r\n              <TextField\r\n                label=\"Device Name\"\r\n                value={updatedDeviceName}\r\n                style={{ marginTop: '5px', marginRight: '5px' }}\r\n                onChange={(e) => setUpdatedDeviceName(e.target.value)}\r\n              />\r\n              <TextField\r\n                label=\"Slave ID\"\r\n                value={updatedSlaveId}\r\n                style={{ marginTop: '5px' }}\r\n                onChange={(e) => setUpdatedSlaveId(e.target.value)}\r\n              />\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseUpdateDeviceForm} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleUpdateDevice} variant=\"contained\" color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      <Dialog open={isDeleteDeviceConfirmationOpen} onClose={handleDeleteDeviceConfirmationClose}>\r\n        <DialogTitle>Delete Device</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete \"{selectedDeviceName}\"?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteDeviceConfirmationClose} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleDeleteDevice(selectedDevice)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  \r\n      <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\r\n        <DialogTitle>Add Device</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Device Name\"\r\n            value={deviceName}\r\n            onChange={(e) => setDeviceName(e.target.value)}\r\n            style={{ marginRight: '5px', marginTop: '5px' }}\r\n          />\r\n          <TextField\r\n            label=\"Slave ID\"\r\n            value={slaveId}\r\n            style={{ marginTop: '5px' }}\r\n            onChange={(e) => setSlaveId(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createDevice} variant=\"contained\">\r\n            Create Device\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n  \r\n      <Dialog open={isAddParameterFormOpen} onClose={handleAddParameterFormClose}>\r\n        <DialogTitle>Add Parameter</DialogTitle>\r\n        <DialogContent>\r\n          {parameterFields.map((field, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\">\r\n              <Grid item xs={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel style={{ minWidth: '120px' , marginTop: '5px' }}>Function Code</InputLabel>\r\n                  <Select\r\n                    value={field.function_code || ''}\r\n                    style={{ marginTop: '10px', minWidth: '150px' }}\r\n                    onChange={(e) => handleFieldChange(index, 'function_code', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\r\n                    <MenuItem value=\"Input Status\">Input Status</MenuItem>\r\n                    <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\r\n                    <MenuItem value=\"Input Register\">Input Register</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Address\"\r\n                  value={field.address}\r\n                  style={{ marginLeft: '70px' , marginTop: '10px' }}\r\n                  onChange={(e) => handleFieldChange(index, 'address', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Parameter Name\"\r\n                  value={field.ParameterName}\r\n                  style={{ marginTop: '10px' }}\r\n                  onChange={(e) => handleFieldChange(index, 'ParameterName', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel style={{ minWidth: '80px', marginTop: '5px' }}>Data Type</InputLabel>\r\n                  <Select\r\n                    value={field.data_type}\r\n                    style={{ marginTop: '10px', minWidth: '100px' }}\r\n                    onChange={(e) => handleFieldChange(index, 'data_type', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                    <MenuItem value=\"Float\">Float</MenuItem>\r\n                    <MenuItem value=\"Double\">Double</MenuItem>\r\n                    <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                {index === parameterFields.length - 1 && (\r\n                  <IconButton onClick={handleAddParameterButtonClick}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddParameterFormClose} variant=\"outlined\" color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={parameterDevice} variant=\"contained\" color=\"primary\">\r\n            Create Parameter\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n      <Dialog open={isAddAttributeFormOpen} onClose={handleAddAttributeFormClose}>\r\n        <DialogTitle>\r\n          Add Attribute\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {attributeFields.map((field, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\">\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={field.name}\r\n                  style={{ marginTop: '7px' }}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'name', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Value\"\r\n                  value={field.value}\r\n                  style={{ marginTop: '7px' }}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'value', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeAttributeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index === attributeFields.length - 1 && (\r\n                  <IconButton onClick={handleAddAttributeButtonClick}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddAttributeFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={attributeDevice} variant=\"contained\">Create Attribute</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeviceParameterTable;"],"names":["useStyles","makeStyles","theme","root","padding","spacing","header","display","alignItems","marginBottom","headerText","fontFamily","fontSize","fontWeight","color","marginRight","buttonGroup","marginLeft","addButton","backgroundColor","palette","success","main","dark","deleteButton","error","baseUrl","process","DeviceParameterTable","classes","devices","setDevices","useState","selectedDevice","setSelectedDevice","parameters","setParameters","attributes","setAttributes","selectedParameter","setSelectedParameter","openUpdateDialog","setOpenUpdateDialog","updatedFunctionCode","setUpdatedFunctionCode","updatedAddress","setUpdatedAddress","updatedParameterName","setUpdatedParameterName","updatedDataType","setUpdatedDataType","updatedName","setUpdatedName","updatedValue","setUpdatedValue","deviceName","setDeviceName","slaveId","setSlaveId","deviceSuccessMessage","setDeviceSuccessMessage","parameterSuccessMessage","setParameterSuccessMessage","attributeSuccessMessage","setAttributeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isAddDeviceFormOpen","setIsAddDeviceFormOpen","isAddParameterFormOpen","setIsAddParameterFormOpen","isAddAttributeFormOpen","setIsAddAttributeFormOpen","parameterToDelete","setParameterToDelete","attributeToDelete","setAttributeToDelete","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","isDeleteAttributeConfirmationOpen","setIsDeleteAttributeConfirmationOpen","selectedDeviceName","setSelectedDeviceName","selectedSlaveId","setSelectedSlaveId","updateDeviceFormOpen","setUpdateDeviceFormOpen","updatedDeviceName","setUpdatedDeviceName","updatedSlaveId","setUpdatedSlaveId","isDeleteDeviceConfirmationOpen","setIsDeleteDeviceConfirmationOpen","parameterFields","setParameterFields","function_code","address","ParameterName","data_type","attributeFields","setAttributeFields","name","value","selectedAttribute","setSelectedAttribute","openUpdateAttributeDialog","setOpenUpdateAttributeDialog","open","setOpen","parameterTableData","setParameterTableData","useEffect","setTimeout","async","response","fetch","concat","data","json","Array","isArray","fetchDevices","handleDeviceChange","console","log","deviceId","encodeURIComponent","device","length","slave_id","handleChange","event","target","handleUpdateDialogClose","handleCloseUpdateDeviceForm","handleDeleteDeviceConfirmationClose","handleDeleteDeviceDialogClose","clearDeviceForm","handleAddDeviceFormClose","handleAddParameterFormClose","clearParameterForm","handleAddParameterButtonClick","handleUpdateParameterDialogClose","handleFieldChange","index","field","updatedFields","clearAttributeForm","handleAddAttributeFormClose","handleAddAttributeButtonClick","handleAttributeFieldChange","handleUpdateAttributeDialogClose","handleClose","SuccessMessage","_ref","message","_jsx","Alert","severity","children","ErrorMessage","_ref2","_jsxs","className","Grid","container","item","xs","onClose","justifyContent","Button","onClick","handleAddDeviceClick","variant","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","IconButton","find","id","handleOpenUpdateDeviceForm","style","EditIcon","handleDeleteDeviceClick","DeleteIcon","Dialog","maxWidth","fullWidth","DialogTitle","position","right","top","CloseIcon","DialogContent","handleAddParameterClick","parameter","parameter_name","handleUpdateClick","handleDeleteParameterClick","marginTop","handleAddAttributeClick","attribute","handleUpdateAttributeClick","handleDeleteAttributeClick","FormControl","InputLabel","Select","onChange","e","MenuItem","TextField","label","DialogActions","Number","isInteger","parseInt","updatedValues","method","headers","body","JSON","stringify","ok","Error","statusText","handleDeleteParameterDialogClose","deviceResponse","deviceData","devicesResponse","devicesData","handleDeleteSubmit","handleDeleteAttributeDialogClose","handleDeleteAttributeSubmit","_Fragment","updatedDevice","handleDeleteDevice","newDevice","minWidth","splice","removeRow","RemoveIcon","AddIcon","parameterDevice","some","parameterPayload","active","then","responseData","created_parameters","catch","removeAttributeRow","attributeDevice","attributePayload"],"sourceRoot":""}