{"version":3,"file":"static/js/37.4e1f4cd3.chunk.js","mappings":"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","sources":["components/dashboard/GetDevice.js","views/GetDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Typography,\r\n  Grid\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  headerText: {\r\n    fontFamily: 'Arial, sans-serif',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  buttonGroup: {\r\n    marginLeft: 'auto',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  addButton: {\r\n    marginRight: theme.spacing(2),\r\n    backgroundColor: theme.palette.success.main,\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.success.dark,\r\n    },\r\n  },\r\n  deleteButton: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}));\r\n\r\n\r\nconst DeviceParameterTable = () => {\r\n  const classes = useStyles();\r\n  const [devices, setDevices] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState('');\r\n  const [parameters, setParameters] = useState([]);\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [selectedParameter, setSelectedParameter] = useState(null);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);\r\n  const [updatedAddress, setUpdatedAddress] = useState('');\r\n  const [updatedParameterName, setUpdatedParameterName] = useState('');\r\n  const [updatedDataType, setUpdatedDataType] = useState('');\r\n  const [updatedName, setUpdatedName] = useState('');\r\n  const [updatedValue, setUpdatedValue] = useState('');\r\n  const [deviceName, setDeviceName] = useState('');\r\n  const [slaveId, setSlaveId] = useState('');\r\n  const [deviceSuccessMessage, setDeviceSuccessMessage] = useState('');\r\n  const [parameterSuccessMessage, setParameterSuccessMessage] = useState('');\r\n  const [attributeSuccessMessage, setAttributeSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [isAddDeviceFormOpen, setIsAddDeviceFormOpen] = useState(false);\r\n  const [isAddParameterFormOpen, setIsAddParameterFormOpen] = useState(false);\r\n  const [isAddAttributeFormOpen, setIsAddAttributeFormOpen] = useState(false);\r\n  // eslint-disable-next-line\r\n  const [parameterToDelete, setParameterToDelete] = useState(null);\r\n  // eslint-disable-next-line\r\n  const [attributeToDelete, setAttributeToDelete] = useState(null);\r\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\r\n  const [isDeleteAttributeConfirmationOpen, setIsDeleteAttributeConfirmationOpen] = useState(false);\r\n  const [selectedDeviceName, setSelectedDeviceName] = useState('');\r\n  const [selectedSlaveId, setSelectedSlaveId] = useState('');\r\n  const [updateDeviceFormOpen, setUpdateDeviceFormOpen] = useState(false);\r\n  const [updatedDeviceName, setUpdatedDeviceName] = useState('');\r\n  const [updatedSlaveId, setUpdatedSlaveId] = useState('');\r\n  const [isDeleteDeviceConfirmationOpen, setIsDeleteDeviceConfirmationOpen] = useState(false);\r\n  const [parameterFields, setParameterFields] = useState([{ address: '', ParameterName: '', data_type: '' }]);\r\n  const [attributeFields, setAttributeFields] = useState([{ name: '', value: ''}]);\r\n  const [selectedAttribute, setSelectedAttribute] = useState(null);\r\n  const [openUpdateAttributeDialog, setOpenUpdateAttributeDialog] = useState(false);\r\n\r\n  const clearMessagesAfterDelay = () => {\r\n    setTimeout(() => {\r\n      setDeviceSuccessMessage('');\r\n      setParameterSuccessMessage('');\r\n      setAttributeSuccessMessage('');\r\n      setErrorMessage('');\r\n      setSuccessMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n  }, [deviceSuccessMessage, parameterSuccessMessage, attributeSuccessMessage, errorMessage, successMessage]);\r\n\r\n  useEffect(() => {\r\n    const fetchDevices = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/devices/');\r\n        const data = await response.json();\r\n\r\n        if (Array.isArray(data.devices)) {\r\n          setDevices(data.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching devices:', error);\r\n      }\r\n    };\r\n\r\n    fetchDevices();\r\n  }, []);\r\n\r\n  const handleDeviceChange = async (event) => {\r\n    const deviceId = event.target.value;\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/devices/${deviceId}`);\r\n      const data = await response.json();\r\n\r\n      if (data.device && Array.isArray(data.device.parameters)) {\r\n        if (data.device.parameters.length > 0) {\r\n          setParameters(data.device.parameters);\r\n          setSuccessMessage('');\r\n          setErrorMessage('');\r\n        } else {\r\n          setParameters([]);\r\n          setAttributes([]);\r\n          setErrorMessage('No Parameters And Attributes connected to the selected device');\r\n        }\r\n      } else {\r\n        setParameters([]);\r\n        setErrorMessage('Error fetching Parameters and Attributes or no Parameters and Attributes connected to the selected device');\r\n      }\r\n\r\n      // Set selectedDeviceName and selectedSlaveId based on the selected device\r\n      setSelectedDevice(deviceId);\r\n      if (data.device) {\r\n        setSelectedDeviceName(data.device.name);\r\n        setSelectedSlaveId(data.device.slave_id);\r\n        setAttributes(data.device.attributes); // Set connected attributes\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching Device details:', error);\r\n      setErrorMessage('Error fetching Device details. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleUpdateClick = (parameter) => {\r\n    setSelectedParameter(parameter);\r\n    setUpdatedAddress(parameter.address);\r\n    setUpdatedParameterName(parameter.parameter_name);\r\n    setUpdatedDataType(parameter.data_type);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n  };\r\n\r\n  const handleUpdateSubmit = async () => {\r\n    if (!selectedParameter || !selectedParameter.id) {\r\n      console.error('No Parameter selected for update');\r\n      return;\r\n    }\r\n\r\n    const updatedValues = {\r\n      address: updatedAddress,\r\n      parameter_name: updatedParameterName,\r\n      data_type: updatedDataType,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter/${selectedParameter.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Parameter: ${response.statusText}`);\r\n      }\r\n\r\n      handleDeviceChange({ target: { value: selectedDevice } });\r\n      handleUpdateDialogClose();\r\n      setParameterSuccessMessage('Parameter updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Parameter:', error);\r\n      setErrorMessage(`Error updating Parameter. ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleDeleteSubmit = async (parameter) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && parameter && parameter.id) {\r\n        const response = await fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter/${parameter.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete parameter: ${response.statusText}`);\r\n        }\r\n\r\n        setParameterSuccessMessage('Parameter deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`http://localhost:5000/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.parameters)) {\r\n          setParameters(deviceData.device.parameters);\r\n        } else {\r\n          setParameters([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Parameter:', error);\r\n      setErrorMessage(`Error deleting Parameter. ${error.message}`);\r\n    } finally {\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const handleDeleteClick = (parameter) => {  // Define handleDeleteClick explicitly\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  };\r\n\r\n  const createDevice = async () => {\r\n    if (deviceName && slaveId) {\r\n      const newDevice = { name: deviceName, slave_id: slaveId };\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/devices/', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(newDevice),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        setDeviceSuccessMessage('Device created successfully!');\r\n        clearDeviceForm();\r\n        setIsAddDeviceFormOpen(false);\r\n\r\n        // Fetch the updated list of devices\r\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating device:', error);\r\n        setErrorMessage('Error creating device. Please try again.');\r\n      }\r\n    } else {\r\n      setErrorMessage('Both device name and slave ID are required');\r\n    }\r\n  };\r\n\r\n  const handleUpdateDevice = async () => {\r\n    try {\r\n      const updatedDevice = { name: updatedDeviceName, slave_id: updatedSlaveId };\r\n  \r\n      await fetch(`http://localhost:5000/devices/${selectedDevice}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedDevice),\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch('http://localhost:5000/devices/');\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        // Update selected device details first\r\n        setSelectedDeviceName(updatedDeviceName);\r\n        setSelectedSlaveId(updatedSlaveId);\r\n  \r\n        // Then update the state of devices\r\n        setDevices(devicesData.devices);\r\n        setDeviceSuccessMessage('Device updated successfully!');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating device:', error);\r\n      setErrorMessage('Error updating device. Please try again.');\r\n    } finally {\r\n      setUpdateDeviceFormOpen(false);\r\n    }\r\n  };\r\n  \r\n  const handleDeleteDevice = async (deviceId) => {\r\n    try {\r\n      await fetch(`http://localhost:5000/devices/${deviceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch('http://localhost:5000/devices/');\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        setDevices(devicesData.devices);\r\n        // Clear the Parameters when a device is deleted\r\n        setParameters([]);\r\n        \r\n        // Reset selected device details\r\n        setSelectedDevice(null);\r\n        setSelectedDeviceName('');\r\n        setSelectedSlaveId('');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n  \r\n      setDeviceSuccessMessage('Device deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting device:', error);\r\n      setErrorMessage('Error deleting device. Please try again.');\r\n    } finally {\r\n      setIsDeleteDeviceConfirmationOpen(false);\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n    }\r\n  };\r\n \r\n\r\n  const handleOpenUpdateDeviceForm = () => {\r\n    setUpdatedDeviceName(selectedDeviceName);\r\n    setUpdatedSlaveId(selectedSlaveId);\r\n    setUpdateDeviceFormOpen(true);\r\n  };\r\n\r\n  const handleCloseUpdateDeviceForm = () => {\r\n    setUpdateDeviceFormOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceClick = () => {\r\n    setIsDeleteDeviceConfirmationOpen(true);\r\n  };\r\n\r\n  const handleDeleteDeviceConfirmationClose = () => {\r\n    setIsDeleteDeviceConfirmationOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n  };\r\n\r\n  const clearDeviceForm = () => {\r\n    setDeviceName('');\r\n    setSlaveId('');\r\n  };\r\n  \r\n  const handleAddDeviceClick = () => {\r\n    setIsAddDeviceFormOpen(true);\r\n  };\r\n  \r\n  const handleAddParameterClick = () => {\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n  \r\n  const handleAddDeviceFormClose = () => {\r\n    setIsAddDeviceFormOpen(false);\r\n    clearDeviceForm();\r\n  };\r\n  \r\n  const handleAddParameterFormClose = () => {\r\n    setIsAddParameterFormOpen(false);\r\n    setParameterFields([{ address: '', ParameterName: '', data_type: '' }]); // Reset fields\r\n    clearParameterForm();\r\n  };\r\n\r\n  const handleDeleteParameterDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n    setParameterToDelete(null);\r\n  };\r\n\r\n  const handleDeleteParameterClick = (parameter) => {\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  }; \r\n\r\n  const clearParameterForm = () => {\r\n    // Assuming you have state setters for address, ParameterName, and data_type\r\n    setParameterFields([{ address: '', ParameterName: '', data_type: '' }]);\r\n    // Add any other state resetting logic if needed\r\n  };\r\n  \r\n  \r\n\r\n  const handleAddParameterButtonClick = () => {\r\n    console.log('Add Parameter button clicked');\r\n    setParameterFields([...parameterFields, { address: '', ParameterName: '', data_type: '' }]);\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n\r\n\r\n  const handleUpdateParameterDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n  };\r\n  \r\n  \r\n  // const ParameterDevice = () => {\r\n  //   if (!selectedDevice) {\r\n  //     setErrorMessage('Please select a device!');\r\n  //     return;\r\n  //   }\r\n  \r\n  //   if (!address || !ParameterName || !data_type_type) {\r\n  //     setErrorMessage('Please fill in all the required fields for the new Parameter!');\r\n  //     return;\r\n  //   }\r\n  \r\n  //   const newParameter = {\r\n  //     address,\r\n  //     parameter_name: ParameterName,\r\n  //     data_type_type,\r\n  //     device_id: selectedDevice,\r\n  //   };\r\n  \r\n  //   fetch(`http://localhost:5000/Parameter/devices/${selectedDevice}/Parameter`, {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //     body: JSON.stringify(newParameter),\r\n  //   })\r\n  //     .then((response) => {\r\n  //       if (!response.ok) {\r\n  //         throw new Error('Network response was not ok');\r\n  //       }\r\n  //       return response.json();\r\n  //     })\r\n  //     .then(() => {\r\n  //       setParameterSuccessMessage('New Parameter created successfully!');\r\n  //       clearParameterForm();\r\n  //       setIsAddParameterFormOpen(false);\r\n  \r\n  //       handleDeviceChange({ target: { value: selectedDevice } });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error('Error creating a new Parameter:', error);\r\n  //       setErrorMessage('Error creating a new Parameter. Please try again.');\r\n  //     });\r\n  // };\r\n\r\n  const parameterDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = parameterFields.some(\r\n      (field) => !field.address || !field.ParameterName || !field.data_type\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each parameter!');\r\n      return;\r\n    }\r\n  \r\n    const parameterPayload = {\r\n      parameters: parameterFields.map((field) => ({\r\n        active: true,\r\n        address: field.address,\r\n        parameter_name: field.ParameterName,\r\n        data_type: field.data_type,\r\n      })),\r\n    };\r\n  \r\n    // Log the request body to the console\r\n    // console.log('Request Body:', JSON.stringify(parameterPayload));\r\n  \r\n    fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(parameterPayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more parameters failed to create.');\r\n        }\r\n      })\r\n      .then(() => {\r\n        setParameterSuccessMessage('Parameters created successfully!');\r\n        clearParameterForm();\r\n        setIsAddParameterFormOpen(false);\r\n        handleDeviceChange({ target: { value: selectedDevice } });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Parameters:', error);\r\n        setErrorMessage('Error creating Parameters. Please try again.');\r\n      });\r\n  };\r\n  \r\n\r\n  const handleFieldChange = (index, field, value) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields[index][field] = value;\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const addEmptyRow = () => {\r\n    setParameterFields([...parameterFields, { address: '', ParameterName: '', data_type: '' }]);\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields.splice(index, 1);\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  const clearAttributeForm = () => {\r\n    // Assuming you have state setters for address, ParameterName, and data_type\r\n    setAttributeFields([{ name: '', value: '' }]);\r\n    // Add any other state resetting logic if needed\r\n  };\r\n\r\n  const handleAddAttributeFormClose = () => {\r\n    setIsAddAttributeFormOpen(false);\r\n    setAttributeFields([{ name: '', value: '' }]); // Reset fields\r\n    clearAttributeForm();\r\n  };\r\n\r\n  const handleAddAttributeButtonClick = () => {\r\n    console.log('Add Attribute button clicked');\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const handleAddAttributeClick = () => {\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const attributeDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = attributeFields.some(\r\n      (field) => !field.name || !field.value\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each attribute!');\r\n      return;\r\n    }\r\n  \r\n    const attributePayload = {\r\n      attributes: attributeFields.map((field) => ({\r\n        name: field.name,\r\n        value: field.value,\r\n      })),\r\n    };\r\n  \r\n    fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(attributePayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more attributes failed to create.');\r\n        }\r\n      })\r\n      .then(() => {\r\n        setAttributeSuccessMessage('Attributes created successfully!');\r\n        clearAttributeForm();\r\n        setIsAddAttributeFormOpen(false);\r\n        handleDeviceChange({ target: { value: selectedDevice } });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Attributes:', error);\r\n        setErrorMessage('Error creating Attributes. Please try again.');\r\n      });\r\n  };\r\n  \r\n  const handleAttributeFieldChange = (index, field, value) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields[index][field] = value;\r\n    setAttributeFields(updatedFields);\r\n  };\r\n  \r\n  // eslint-disable-next-line\r\n  const addAttributeEmptyRow = () => {\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n  };\r\n  \r\n  const removeAttributeRow = (index) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields.splice(index, 1);\r\n    setAttributeFields(updatedFields);\r\n  };\r\n\r\n  const handleUpdateAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setUpdatedName(attribute.name);\r\n    setUpdatedValue(attribute.value);\r\n    setOpenUpdateAttributeDialog(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateAttributeDialogClose = () => {\r\n    setOpenUpdateAttributeDialog(false);\r\n    setUpdatedName('');\r\n    setUpdatedValue('');\r\n  };\r\n\r\n  const handleUpdateAttributeSubmit = async () => {\r\n    if (!selectedAttribute || !selectedAttribute.id) {\r\n      console.error('No Attribute selected for update');\r\n      return;\r\n    }\r\n\r\n    const updatedValues = {\r\n      name: updatedName,\r\n      value: updatedValue,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute/${selectedAttribute.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Attribute: ${response.statusText}`);\r\n      }\r\n\r\n      handleDeviceChange({ target: { value: selectedDevice } });\r\n      handleUpdateAttributeDialogClose();\r\n      setAttributeSuccessMessage('Attribute updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Attribute:', error);\r\n      setErrorMessage(`Error updating Attribute. ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleDeleteAttributeSubmit = async (attribute) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && attribute && attribute.id) {\r\n        const response = await fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute/${attribute.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete Attribute: ${response.statusText}`);\r\n        }\r\n\r\n        setAttributeSuccessMessage('Attribute deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`http://localhost:5000/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.attributes)) {\r\n          setAttributes(deviceData.device.attributes);\r\n        } else {\r\n          setAttributes([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Attribute:', error);\r\n      setErrorMessage(`Error deleting Attribute. ${error.message}`);\r\n    } finally {\r\n      setIsDeleteAttributeConfirmationOpen(false);\r\n      setOpenUpdateAttributeDialog(false);\r\n      setSelectedAttribute(null);\r\n    }\r\n  };\r\n\r\n  \r\n  const handleDeleteAttributeDialogClose = () => {\r\n    setIsDeleteAttributeConfirmationOpen(false);\r\n    setAttributeToDelete(null);\r\n  };\r\n\r\n  const handleDeleteAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setIsDeleteAttributeConfirmationOpen(true);\r\n  }; \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <FormControl>\r\n          <InputLabel id=\"device-label\">Select Device</InputLabel>\r\n          {devices.length > 0 ? (\r\n            <Select\r\n              labelId=\"device-label\"\r\n              id=\"device-select\"\r\n              value={selectedDevice}\r\n              label=\"Select Device\"\r\n              onChange={handleDeviceChange}\r\n            >\r\n              {devices.map((device) => (\r\n                <MenuItem key={device.id} value={device.id}>\r\n                  {device.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          ) : (\r\n            <p>No devices available</p>\r\n          )}\r\n        </FormControl>\r\n  \r\n        <div style={{ marginLeft: '10px', display: 'flex', alignItems: 'center' }}>\r\n          <Typography variant=\"body1\" className={classes.body1}>\r\n            <span style={{ color: 'blue' }}>Device:</span>\r\n            <span style={{ color: 'red' }}>{selectedDeviceName}</span>\r\n            <span style={{ color: 'blue', marginLeft: '10px' }}>Slave ID:</span>\r\n            <span style={{ color: 'red', marginRight: '10px'  }}>{selectedSlaveId}</span>\r\n          </Typography>\r\n          <Button onClick={handleOpenUpdateDeviceForm} variant=\"contained\" color=\"primary\" style={{ marginRight: '10px' }}>Update</Button>\r\n          <Button onClick={handleDeleteDeviceClick} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </div>\r\n  \r\n        <div className={classes.buttonGroup}>\r\n        <Button onClick={handleAddDeviceClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\r\n          Add Device\r\n        </Button>\r\n        <Button onClick={handleAddParameterClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\r\n          Add Parameter\r\n        </Button>\r\n        <Button onClick={handleAddAttributeClick} variant=\"contained\" color=\"secondary\">\r\n          Add Attribute\r\n        </Button>\r\n      </div>\r\n      </div>\r\n  \r\n      {deviceSuccessMessage && (\r\n        <Alert severity=\"success\" onClose={() => setDeviceSuccessMessage('')}>\r\n          {deviceSuccessMessage}\r\n        </Alert>\r\n      )}\r\n  \r\n      {parameterSuccessMessage && (\r\n        <Alert severity=\"success\" onClose={() => setParameterSuccessMessage('')}>\r\n          {parameterSuccessMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      {attributeSuccessMessage && (\r\n        <Alert severity=\"success\" onClose={() => setParameterSuccessMessage('')}>\r\n          {attributeSuccessMessage}\r\n        </Alert>\r\n      )}\r\n  \r\n      {errorMessage && (\r\n        <Alert severity=\"error\" onClose={() => setErrorMessage('')}>\r\n          {errorMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell colSpan={4} align=\"center\">\r\n                <Typography variant=\"h6\">Parameter Table</Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Address</TableCell>\r\n              <TableCell>Parameter Name</TableCell>\r\n              <TableCell>Data Type</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {parameters.map((parameter) => (\r\n              <TableRow key={parameter.id}>\r\n                <TableCell>{parameter.address}</TableCell>\r\n                <TableCell>{parameter.parameter_name}</TableCell>\r\n                <TableCell>{parameter.data_type}</TableCell>\r\n                <TableCell>\r\n                  <Button onClick={() => handleUpdateClick(parameter)} variant=\"contained\" color=\"primary\" style={{ marginRight: '10px' }}>Update</Button>\r\n                  <Button onClick={() => handleDeleteParameterClick(parameter)} variant=\"contained\" color=\"error\">\r\n                    Delete\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <TableContainer component={Paper} style={{ marginTop: '20px' }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell colSpan={3} align=\"center\">\r\n                <Typography variant=\"h6\">Attribute Table</Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Attribute Name</TableCell>\r\n              <TableCell>Attribute Value</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {attributes.map((attribute) => (\r\n              <TableRow key={attribute.id}>\r\n                <TableCell>{attribute.name}</TableCell>\r\n                <TableCell>{attribute.value}</TableCell>\r\n                <TableCell>\r\n                  <Button onClick={() => handleUpdateAttributeClick(attribute)} variant=\"contained\" color=\"primary\" style={{ marginRight: '10px' }}>Update</Button>\r\n                  <Button onClick={() => handleDeleteAttributeClick(attribute)} variant=\"contained\" color=\"error\">\r\n                    Delete\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n  \r\n      <Dialog open={openUpdateDialog} onClose={handleUpdateParameterDialogClose}>\r\n      <DialogTitle style={{ color: '#008080' }}>Update Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Address\"\r\n                value={updatedAddress}\r\n                onChange={(e) => setUpdatedAddress(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Parameter Name\"\r\n                value={updatedParameterName}\r\n                onChange={(e) => setUpdatedParameterName(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Data Type</InputLabel>\r\n                <Select\r\n                  value={updatedDataType}\r\n                  onChange={(e) => setUpdatedDataType(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                  <MenuItem value=\"Float\">Float</MenuItem>\r\n                  <MenuItem value=\"Double\">Double</MenuItem>\r\n                  <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n      <Dialog open={isDeleteConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Parameter?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteSubmit(selectedParameter)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={openUpdateAttributeDialog} onClose={handleUpdateAttributeDialogClose}>\r\n      <DialogTitle style={{ color: '#008080' }}>Update Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Name\"\r\n                value={updatedName}\r\n                onChange={(e) => setUpdatedName(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Value\"\r\n                value={updatedValue}\r\n                onChange={(e) => setUpdatedValue(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateAttributeSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isDeleteAttributeConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Attribute?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteAttributeSubmit(selectedAttribute)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        \r\n      <Dialog open={updateDeviceFormOpen} onClose={handleCloseUpdateDeviceForm}>\r\n        <DialogTitle>Update Device</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Device Name\"\r\n            value={updatedDeviceName}\r\n            onChange={(e) => setUpdatedDeviceName(e.target.value)}\r\n          />\r\n          <TextField\r\n            label=\"Slave ID\"\r\n            value={updatedSlaveId}\r\n            onChange={(e) => setUpdatedSlaveId(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseUpdateDeviceForm} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateDevice} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  \r\n      <Dialog open={isDeleteDeviceConfirmationOpen} onClose={handleDeleteDeviceConfirmationClose}>\r\n        <DialogTitle>Delete Device</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete \"{selectedDeviceName}\"?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteDeviceConfirmationClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteDevice(selectedDevice)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  \r\n      <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\r\n        <DialogTitle>Add Device</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Device Name\"\r\n            value={deviceName}\r\n            onChange={(e) => setDeviceName(e.target.value)}\r\n          />\r\n          <TextField label=\"Slave ID\" value={slaveId} onChange={(e) => setSlaveId(e.target.value)} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={createDevice} variant=\"contained\">Create Device</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  \r\n      <Dialog open={isAddParameterFormOpen} onClose={handleAddParameterFormClose}>\r\n        <DialogTitle>\r\n          Add Parameter\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {parameterFields.map((field, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\">\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Address\"\r\n                  value={field.address}\r\n                  onChange={(e) => handleFieldChange(index, 'address', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Parameter Name\"\r\n                  value={field.ParameterName}\r\n                  onChange={(e) => handleFieldChange(index, 'ParameterName', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <FormControl>\r\n                  <InputLabel>Data Type</InputLabel>\r\n                  <Select\r\n                    value={field.data_type}\r\n                    onChange={(e) => handleFieldChange(index, 'data_type', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                    <MenuItem value=\"Float\">Float</MenuItem>\r\n                    <MenuItem value=\"Double\">Double</MenuItem>\r\n                    <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index === parameterFields.length - 1 && (\r\n                  <IconButton onClick={handleAddParameterButtonClick}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddParameterFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={parameterDevice} variant=\"contained\">Create Parameter</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isAddAttributeFormOpen} onClose={handleAddAttributeFormClose}>\r\n        <DialogTitle>\r\n          Add Attribute\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {attributeFields.map((field, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\">\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={field.name}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'name', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Value\"\r\n                  value={field.value}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'value', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeAttributeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index === attributeFields.length - 1 && (\r\n                  <IconButton onClick={handleAddAttributeButtonClick}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddAttributeFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={attributeDevice} variant=\"contained\">Create Attribute</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeviceParameterTable;\r\n","import React from 'react'\r\nimport DeviceRegisterTable from '../components/dashboard/GetDevice'\r\n\r\nconst GetDevice = () => {\r\n  return (\r\n    <div>\r\n      <h1>GetDevice</h1>\r\n      <DeviceRegisterTable />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GetDevice"],"names":["useStyles","makeStyles","theme","root","padding","spacing","header","display","alignItems","marginBottom","headerText","fontFamily","fontSize","fontWeight","color","marginRight","buttonGroup","marginLeft","addButton","backgroundColor","palette","success","main","dark","deleteButton","error","DeviceParameterTable","classes","devices","setDevices","useState","selectedDevice","setSelectedDevice","parameters","setParameters","attributes","setAttributes","selectedParameter","setSelectedParameter","openUpdateDialog","setOpenUpdateDialog","updatedAddress","setUpdatedAddress","updatedParameterName","setUpdatedParameterName","updatedDataType","setUpdatedDataType","updatedName","setUpdatedName","updatedValue","setUpdatedValue","deviceName","setDeviceName","slaveId","setSlaveId","deviceSuccessMessage","setDeviceSuccessMessage","parameterSuccessMessage","setParameterSuccessMessage","attributeSuccessMessage","setAttributeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isAddDeviceFormOpen","setIsAddDeviceFormOpen","isAddParameterFormOpen","setIsAddParameterFormOpen","isAddAttributeFormOpen","setIsAddAttributeFormOpen","parameterToDelete","setParameterToDelete","attributeToDelete","setAttributeToDelete","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","isDeleteAttributeConfirmationOpen","setIsDeleteAttributeConfirmationOpen","selectedDeviceName","setSelectedDeviceName","selectedSlaveId","setSelectedSlaveId","updateDeviceFormOpen","setUpdateDeviceFormOpen","updatedDeviceName","setUpdatedDeviceName","updatedSlaveId","setUpdatedSlaveId","isDeleteDeviceConfirmationOpen","setIsDeleteDeviceConfirmationOpen","parameterFields","setParameterFields","address","ParameterName","data_type","attributeFields","setAttributeFields","name","value","selectedAttribute","setSelectedAttribute","openUpdateAttributeDialog","setOpenUpdateAttributeDialog","useEffect","setTimeout","async","response","fetch","data","json","Array","isArray","console","fetchDevices","handleDeviceChange","deviceId","event","target","concat","device","length","slave_id","handleCloseUpdateDeviceForm","handleDeleteDeviceConfirmationClose","handleDeleteDeviceDialogClose","clearDeviceForm","handleAddDeviceFormClose","handleAddParameterFormClose","clearParameterForm","handleAddParameterButtonClick","log","handleUpdateParameterDialogClose","handleFieldChange","index","field","updatedFields","clearAttributeForm","handleAddAttributeFormClose","handleAddAttributeButtonClick","handleAttributeFieldChange","handleUpdateAttributeDialogClose","_jsxs","className","children","FormControl","_jsx","InputLabel","id","Select","labelId","label","onChange","map","MenuItem","style","Typography","variant","body1","Button","onClick","handleOpenUpdateDeviceForm","handleDeleteDeviceClick","handleAddDeviceClick","handleAddParameterClick","handleAddAttributeClick","Alert","severity","onClose","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","colSpan","align","TableBody","parameter","parameter_name","handleUpdateClick","handleDeleteParameterClick","marginTop","attribute","handleUpdateAttributeClick","handleDeleteAttributeClick","Dialog","open","DialogTitle","DialogContent","Grid","container","item","xs","TextField","e","fullWidth","DialogActions","updatedValues","method","headers","body","JSON","stringify","ok","Error","statusText","message","handleDeleteParameterDialogClose","deviceResponse","deviceData","devicesResponse","devicesData","handleDeleteSubmit","handleDeleteAttributeDialogClose","handleDeleteAttributeSubmit","updatedDevice","handleDeleteDevice","newDevice","IconButton","splice","removeRow","RemoveIcon","AddIcon","parameterDevice","some","parameterPayload","active","then","catch","removeAttributeRow","attributeDevice","attributePayload","GetDevice","DeviceRegisterTable"],"sourceRoot":""}