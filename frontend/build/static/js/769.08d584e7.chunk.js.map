{"version":3,"file":"static/js/769.08d584e7.chunk.js","mappings":"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","sources":["components/dashboard/NodeParameter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Grid,\r\n  Alert,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n// import { Replay as ReplayIcon, Stop as StopIcon } from '@mui/icons-material';  \r\n\r\n\r\nconst baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst NodeParameterTable = () => {\r\n  const [data, setData] = useState(null);\r\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\r\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\r\n  const [updatedAttributes, setUpdatedAttributes] = useState([]); // Add this line\r\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\r\n  // eslint-disable-next-line\r\n  const [newAttributeName, setNewAttributeName] = useState('');\r\n  // eslint-disable-next-line\r\n  const [newAttributeValue, setNewAttributeValue] = useState('');\r\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\r\n  const [attributeRows, setAttributeRows] = useState([{ name: '', value: '' }]);\r\n  const [formDataList, setFormDataList] = useState([]);\r\n  const [selectedModbus, setSelectedModbus] = useState({\r\n    port: '',\r\n    method: '',\r\n    parity: '',\r\n    baudrate: '',\r\n    stopbits: '',\r\n    wordLength: '',\r\n  });\r\n\r\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\r\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\r\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\r\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\r\n  const [isRestarting, setIsRestarting] = useState(false);\r\n  const [isStopping, setIsStopping] = useState(false);\r\n  const [restartButtonClicked] = useState(false);\r\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\r\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\r\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\r\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\r\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\r\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\r\n  const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\r\n  const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [retentionParameters, setRetentionParameters] = useState({\r\n    checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\r\n    successRetention: { days: '', hours: '', minutes: '', seconds: '' },\r\n    failureRetention: { days: '', hours: '', minutes: '', seconds: '' },\r\n  });\r\n  const [timeDelayParameters, setTimeDelayParameters] = useState({\r\n    minutes: '',\r\n    seconds: '',\r\n  });\r\n  \r\n  \r\n\r\n  const clearMessagesAfterDelay = () => {\r\n    setTimeout(() => {\r\n      setModbusSuccessMessage('');\r\n      setSPBSuccessMessage('');\r\n      setNodeAttributeSuccessMessage('');\r\n      setMqttSuccessMessage('');\r\n      setServiceStartSuccessMessage('');\r\n      setServiceStopSuccessMessage('');\r\n      setRetentionParameterSuccessMessage('');\r\n      setTimeDelaySuccessMessage('');\r\n      setErrorMessage('');\r\n      setSuccessMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, RetentionParameterSuccessMessage, TimeDelaySuccessMessage, errorMessage, successMessage]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/node-parameter`);\r\n        const responseData = await response.json();\r\n        setData(responseData);\r\n  \r\n        // Initialize selectedModbus state with modbus values\r\n        if (responseData.node_parameters) {\r\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\r\n          \r\n          if (modbusValues) {\r\n            setSelectedModbus(modbusValues);\r\n          }\r\n  \r\n          // Initialize retention parameters\r\n          const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\r\n          if (retentionValues) {\r\n            setRetentionParameters(retentionValues);\r\n          }\r\n\r\n          const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\r\n          if (timeDelayValues) {\r\n            setTimeDelayParameters(timeDelayValues);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n  \r\n  \r\n\r\n  if (!data) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\r\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\r\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\r\n  \r\n\r\n  const baudrateList = data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options;\r\n  const wordLengthList = data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options;\r\n  const parityList = data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options;\r\n  const stopbitsList = data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options;\r\n  const portList = data.node_parameters.find(param => param.name === 'modbus')?.value.port_options;\r\n  const methodList = data.node_parameters.find(param => param.name === 'modbus')?.value.method_options;\r\n\r\n  const uniqueBaudrateList = [...new Set(baudrateList)];\r\n  const uniqueWordLengthList = [...new Set(wordLengthList)];\r\n  const uniqueParityList = [...new Set(parityList)];\r\n  const uniqueStopbitsList = [...new Set(stopbitsList)];\r\n  const uniquePortList = [...new Set(portList)];\r\n  const uniqueMethodList = [...new Set(methodList)];\r\n\r\n  const handleUpdateSpbParameterFormOpen = () =>  {\r\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\r\n    setUpdatedGroupId(spbParameter?.group_id || '');\r\n    setUpdateSpbParameterFormOpen(true);\r\n  } \r\n\r\n  const handleAddNodeAttributeFormOpen = () => {\r\n    // Reset the input values when opening the form\r\n    setFormDataList([{ name: '', value: '' }]); // Set initial row\r\n    setAddNodeAttributeFormOpen(true);\r\n  };\r\n\r\n  const handleUpdateNodeAttributeFormOpen = () => {\r\n    // Initialize updatedAttributes with existing attributes\r\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\r\n    setUpdatedAttributes(initialUpdatedAttributes);\r\n    setUpdateNodeAttributeFormOpen(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateMqttFormOpen = () =>  {\r\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\r\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\r\n    setUpdateMqttFormOpen(true);\r\n  } \r\n\r\n  const handleUpdateFormClose = () => {\r\n    setUpdateSpbParameterFormOpen(false);\r\n    setAddNodeAttributeFormOpen(false);\r\n    setUpdateNodeAttributeFormOpen(false);\r\n    setUpdateMqttFormOpen(false);\r\n  };\r\n\r\n  const handleUpdateSpbParameterSubmit = async () => {\r\n    const updatedData = {\r\n      spb_parameter: {\r\n        edge_node_id: updatedEdgeNodeId,\r\n        group_id: updatedGroupId,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/3`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setSPBSuccessMessage('SPB Parameter updated successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'spb_parameter' ?\r\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId } }\r\n              : param\r\n          )),\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\r\n    }\r\n\r\n    handleUpdateFormClose();\r\n  };\r\n\r\n  // Add this function to handle the change in form data\r\n  const handleFormDataChange = (index, key, value) => {\r\n    const updatedFormDataList = [...formDataList];\r\n    updatedFormDataList[index][key] = value;\r\n    setFormDataList(updatedFormDataList);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const handleAddRow = () => {\r\n    setAttributeRows([...attributeRows, { name: '', value: '' }]);\r\n  };\r\n\r\n  // Add this function to handle the \"Add\" button click\r\n  const handleAddFormData = () => {\r\n    setFormDataList([...formDataList, { name: '', value: '' }]);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const handleAttributeChange = (index, key, value) => {\r\n    const updatedRows = [...attributeRows];\r\n    updatedRows[index][key] = value;\r\n    setAttributeRows(updatedRows);\r\n  };\r\n\r\n  const handleRemoveFormData = (indexToRemove) => {\r\n    setFormDataList((prevFormDataList) => {\r\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\r\n    });\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const getUpdatedValue = (attributeName) => {\r\n    // Assuming you have a state variable for updated attributes, e.g., updatedAttributes\r\n    const updatedAttribute = updatedAttributes.find(attr => attr.name === attributeName);\r\n    return updatedAttribute ? updatedAttribute.value : \"\";\r\n  };\r\n  \r\n  const handleUpdateInputChange = (index, updatedAttribute) => {\r\n    setUpdatedAttributes(prevAttributes => {\r\n      const updatedAttributesCopy = [...prevAttributes];\r\n      updatedAttributesCopy[index] = updatedAttribute;\r\n      return updatedAttributesCopy;\r\n    });\r\n  };\r\n\r\n  const handleRemoveAttribute = (index) => {\r\n    const updatedAttributesCopy = [...updatedAttributes];\r\n    updatedAttributesCopy.splice(index, 1);\r\n    setUpdatedAttributes(updatedAttributesCopy);\r\n  };\r\n  \r\n\r\n  const handleAddNodeAttributeSubmit = async () => {\r\n    try {\r\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\r\n      const response = await fetch(`${baseUrl}/node-parameter/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: 'node_attributes',\r\n          value: newAttributes,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'node_attributes' ?\r\n              { ...param, value: [...(param.value || []), ...newAttributes] }\r\n              : param\r\n          )),\r\n        }));\r\n        setFormDataList([]);\r\n      } else {\r\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\r\n    }\r\n\r\n    handleUpdateFormClose();\r\n  };\r\n\r\n\r\n  const handleUpdateNodeAttributeSubmit = async () => {\r\n    // Update local state with the new values\r\n    setData((prevData) => {\r\n      const updatedNodeParameters = prevData.node_parameters.map((param) => {\r\n        if (param.name === 'node_attributes') {\r\n          return {\r\n            ...param,\r\n            value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n          };\r\n        }\r\n        return param;\r\n      });\r\n  \r\n      return {\r\n        ...prevData,\r\n        node_parameters: updatedNodeParameters,\r\n      };\r\n    });\r\n  \r\n    const updatedData = {\r\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/4`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\r\n      } else {\r\n        setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Node Attribute:  ${error}`);\r\n    }\r\n  \r\n    handleUpdateFormClose();\r\n  };\r\n  \r\n  \r\n  const handleUpdateMqttSubmit = async () => {\r\n    const updatedData = {\r\n      mqtt: {\r\n        broker_host: updatedBrokerHost,\r\n        broker_port: updatedBrokerPort,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/2`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setMqttSuccessMessage('Mqtt updated successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'mqtt' ?\r\n              { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort } }\r\n              : param\r\n          )),\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Mqtt: ${error}`);\r\n    }\r\n\r\n    handleUpdateFormClose();\r\n  };\r\n\r\n  const handleModbusChange = async (paramName, value) => {\r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/1`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          modbus: { ...selectedModbus, [paramName]: value },\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setModbusSuccessMessage('Modbus updated successfully.');\r\n        setSelectedModbus((prevState) => ({\r\n          ...prevState,\r\n          [paramName]: value,\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Modbus: ${error}`);\r\n    }\r\n  };\r\n\r\n  \r\n  const handleRestart = () => {\r\n    // Add logic for restarting here\r\n    setIsRestarting(true);\r\n  \r\n    // Perform your restart actions, then set isRestarting to false\r\n    // For example, you can make a fetch request to a restart endpoint\r\n    fetch(`${baseUrl}/service/restart-services`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setServiceStartSuccessMessage('Service is restarting.');\r\n          // Add any additional logic if needed\r\n        } else {\r\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(`Error restarting service: ${error}`);\r\n      })\r\n      .finally(() => {\r\n        setIsRestarting(false);\r\n      });\r\n  };\r\n\r\n\r\n  const handleStop = () => {\r\n    // Add logic for stopping here\r\n    setIsStopping(true);\r\n  \r\n    fetch(`${baseUrl}/service/stop-services`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setServiceStopSuccessMessage('Service is stopped.');\r\n          // Add any additional logic if needed\r\n        } else {\r\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(`Error stopping service: ${error}`);\r\n      })\r\n      .finally(() => {\r\n        setIsStopping(false);\r\n      });\r\n  };\r\n\r\n  // Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message}) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message}) => (\r\n    <Alert severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  );\r\n  \r\n  const handleRetentionParameterChange = (param, unit, value) => {\r\n    // Parse the input value as an integer\r\n    const integerValue = parseInt(value, 10);\r\n  \r\n    // Check if the parsed value is a valid integer\r\n    if (!isNaN(integerValue)) {\r\n      setRetentionParameters((prevParameters) => ({\r\n        ...prevParameters,\r\n        [param]: { ...prevParameters[param], [unit]: integerValue },\r\n      }));\r\n    }\r\n    // You may add an else statement here to handle invalid input if needed\r\n  };\r\n  \r\n  \r\n  const handleRetentionParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/5`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          retention_parameter: retentionParameters,\r\n        }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\r\n      } else {\r\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handleTimeDelayChange = (unit, value) => {\r\n    // Parse the input value as an integer\r\n    const integerValue = parseInt(value, 10);\r\n  \r\n    // Check if the parsed value is a valid integer\r\n    if (!isNaN(integerValue)) {\r\n      setTimeDelayParameters((prevParameters) => ({\r\n        ...prevParameters,\r\n        [unit]: integerValue,\r\n      }));\r\n    }\r\n    // You may add an else statement here to handle invalid input if needed\r\n  };\r\n  \r\n\r\n  const handleTimeDelayParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`${baseUrl}/node-parameter/6`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          time_delay: timeDelayParameters,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Display success message or handle as needed\r\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\r\n      } else {\r\n        // Display error message or handle as needed\r\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      // Display error message or handle as needed\r\n      setErrorMessage(`Error updating Time Delay: ${error}`);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={6}>\r\n      {ServiceStartSuccessMessage && (\r\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\r\n      )}\r\n      {ServiceStopSuccessMessage && (\r\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\r\n      )}\r\n      {NodeAttributeSuccessMessage && (\r\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\r\n      )}\r\n      {SPBSuccessMessage && (\r\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \r\n      )}\r\n      {MqttSuccessMessage && (\r\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\r\n      )}\r\n      {ModbusSuccessMessage && (\r\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\r\n      )}\r\n      {RetentionParameterSuccessMessage && (\r\n        <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\r\n      )}\r\n      {TimeDelaySuccessMessage && (\r\n        <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\r\n      )}\r\n      {errorMessage && (\r\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n      )}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\r\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" color=\"primary\">\r\n            Restart\r\n          </Button>\r\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\r\n            Stop\r\n          </Button>\r\n        </div>\r\n      </Grid>\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\" >Node Attributes</Typography>\r\n            <div style={{ display: 'flex', gap: '0px' }}>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginRight: '0px' }}\r\n                onClick={handleUpdateNodeAttributeFormOpen}\r\n              >\r\n                <EditIcon style={{ fontSize : \"medium\" }}/>\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: '5px' }}\r\n                onClick={handleAddNodeAttributeFormOpen}\r\n              >\r\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n          <div style={{ marginTop: '3px' }}>\r\n            {nodeAttributes && nodeAttributes.map(attr => (\r\n              <div key={attr.name}>\r\n                <Typography variant=\"body1\">\r\n                  <strong>{attr.name}:</strong> {attr.value}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\">SPB Parameter</Typography>\r\n            <IconButton\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: '10px' }}\r\n              onClick={handleUpdateSpbParameterFormOpen}\r\n            >\r\n              <EditIcon style={{ fontSize : \"medium\" }}/>\r\n            </IconButton>\r\n          </div>\r\n          <div>\r\n            <strong>Edge Node Id:</strong> {spbParameter?.edge_node_id}\r\n          </div>\r\n          <div>\r\n            <strong>Group Id:</strong> {spbParameter?.group_id}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\">MQTT</Typography>\r\n            <IconButton\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: '10px' }}\r\n              onClick={handleUpdateMqttFormOpen}\r\n            >\r\n              <EditIcon style={{ fontSize : \"medium\" }}/>\r\n            </IconButton>\r\n          </div>\r\n          <div>\r\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\r\n          </div>\r\n          <div>\r\n            <strong>Broker Port:</strong> {mqtt?.broker_port}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\r\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\r\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>{label}</InputLabel>\r\n                  <Select\r\n                    value={selectedModbus[label.toLowerCase()]}\r\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\r\n                  >\r\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\r\n                      <MenuItem key={baudrate} value={baudrate}>\r\n                        {baudrate}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\r\n                      <MenuItem key={wordLength} value={wordLength}>\r\n                        {wordLength}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Parity' && uniqueParityList.map(parity => (\r\n                      <MenuItem key={parity} value={parity}>\r\n                        {parity}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\r\n                      <MenuItem key={stopbits} value={stopbits}>\r\n                        {stopbits}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Port' && uniquePortList.map(port => (\r\n                      <MenuItem key={port} value={port}>\r\n                        {port}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Method' && uniqueMethodList.map(method => (\r\n                      <MenuItem key={method} value={method}>\r\n                        {method}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <Typography variant=\"h6\">Retention Parameters</Typography>\r\n          <form>\r\n            {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n              <div key={index} style={{ marginBottom: '20px' }}>\r\n                <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                  {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                    <TextField\r\n                      key={unitIndex}\r\n                      label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                      type=\"number\"\r\n                      value={retentionParameters[param][unit]}\r\n                      onChange={(e) => handleRetentionParameterChange(param, unit, e.target.value)}\r\n                      fullWidth\r\n                      style={{ marginRight: '10px' }}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <Button onClick={handleRetentionParameterSubmit} color=\"primary\">\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <Typography variant=\"h6\">Time Delay Parameters</Typography>\r\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n            <TextField\r\n              label=\"Minutes\"\r\n              type=\"number\"\r\n              value={timeDelayParameters.minutes}\r\n              onChange={(e) => setTimeDelayParameters(prev => ({ ...prev, minutes: parseInt(e.target.value) || 0 }))}\r\n              fullWidth\r\n              style={{ marginRight: '20px' }}\r\n            />\r\n            <TextField\r\n              label=\"Seconds\"\r\n              type=\"number\"\r\n              value={timeDelayParameters.seconds}\r\n              onChange={(e) => setTimeDelayParameters(prev => ({ ...prev, seconds: parseInt(e.target.value) || 0 }))}\r\n              fullWidth\r\n            />\r\n          </div>\r\n          <Button onClick={handleTimeDelayParameterSubmit} color=\"primary\">\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      {/* Update form for SPB Parameter */}\r\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Update SPB Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Edge Node ID\"\r\n            value={updatedEdgeNodeId}\r\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\r\n            fullWidth\r\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\r\n          />\r\n          <TextField\r\n            label=\"Group ID\"\r\n            value={updatedGroupId}\r\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit form for Node Attribute */}\r\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Edit Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n          {updatedAttributes.map((attr, index) => (\r\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\r\n              <TextField\r\n                label=\"Attribute Name\"\r\n                value={attr.name}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\r\n                style={{ marginRight: '10px', marginTop: '5px' }}\r\n              />\r\n              <TextField\r\n                label=\"Attribute Value\"\r\n                value={attr.value}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\r\n                style={{ marginTop: '5px' }}\r\n              />\r\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\r\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\r\n              </IconButton>\r\n            </div>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n      {/* Create form for Add Node Attribute */}\r\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Add Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n          {formDataList.map((formData, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Attribute Name\"\r\n                  value={formData.name}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Attribute Value\"\r\n                  value={formData.value}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                {index > 0 && (\r\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                {index === formDataList.length - 1 && (\r\n                  <IconButton onClick={handleAddFormData}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      {/* Update form for Mqtt */}\r\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Update Mqtt</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Broker Host\"\r\n            value={updatedBrokerHost}\r\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\r\n            fullWidth\r\n            style={{ marginBottom: '16px', marginTop: '5px' }}\r\n          />\r\n          <TextField\r\n            label=\"Broker Port\"\r\n            value={updatedBrokerPort}\r\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default NodeParameterTable;"],"names":["baseUrl","process","NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","newAttributeName","setNewAttributeName","newAttributeValue","setNewAttributeValue","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","attributeRows","setAttributeRows","name","value","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","timeDelayParameters","setTimeDelayParameters","useEffect","setTimeout","async","response","fetch","concat","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","modbusValues","find","param","retentionValues","timeDelayValues","error","console","fetchData","_jsx","children","spbParameter","nodeAttributes","mqtt","baudrateList","baudrate_options","wordLengthList","wordlength_options","parityList","parity_options","stopbitsList","stopbits_options","portList","port_options","methodList","method_options","uniqueBaudrateList","Set","uniqueWordLengthList","uniqueParityList","uniqueStopbitsList","uniquePortList","uniqueMethodList","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","handleUpdateInputChange","updatedAttribute","prevAttributes","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","statusText","catch","finally","disabled","variant","color","handleStop","marginLeft","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","EditIcon","fontSize","handleAddNodeAttributeFormOpen","AddIcon","marginTop","handleUpdateSpbParameterFormOpen","edge_node_id","group_id","handleUpdateMqttFormOpen","broker_host","broker_port","flexDirection","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","replace","unit","unitIndex","TextField","charAt","toUpperCase","slice","type","handleRetentionParameterChange","integerValue","parseInt","isNaN","prevParameters","retention_parameter","prev","time_delay","Dialog","open","DialogTitle","DialogContent","DialogActions","updatedData","spb_parameter","prevData","splice","handleRemoveAttribute","DeleteIcon","updatedNodeParameters","node_attributes","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes"],"sourceRoot":""}