{"version":3,"file":"static/js/399.7b0f41bc.chunk.js","mappings":"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","sources":["components/dashboard/GetDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n  TextField,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Typography,\n  Grid\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n  headerText: {\n    fontFamily: 'Arial, sans-serif',\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#333',\n    marginRight: theme.spacing(2),\n  },\n  buttonGroup: {\n    marginLeft: 'auto',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  addButton: {\n    marginRight: theme.spacing(2),\n    backgroundColor: theme.palette.success.main,\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n    },\n  },\n  deleteButton: {\n    color: theme.palette.error.main,\n  },\n}));\n\n\nconst DeviceParameterTable = () => {\n  const classes = useStyles();\n  const [devices, setDevices] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState('');\n  const [parameters, setParameters] = useState([]);\n  const [attributes, setAttributes] = useState([]);\n  const [selectedParameter, setSelectedParameter] = useState(null);\n  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);\n  const [updatedFunctionCode, setUpdatedFunctionCode] = useState('');\n  const [updatedAddress, setUpdatedAddress] = useState('');\n  const [updatedParameterName, setUpdatedParameterName] = useState('');\n  const [updatedDataType, setUpdatedDataType] = useState('');\n  const [updatedName, setUpdatedName] = useState('');\n  const [updatedValue, setUpdatedValue] = useState('');\n  const [deviceName, setDeviceName] = useState('');\n  const [slaveId, setSlaveId] = useState('');\n  const [deviceSuccessMessage, setDeviceSuccessMessage] = useState('');\n  const [parameterSuccessMessage, setParameterSuccessMessage] = useState('');\n  const [attributeSuccessMessage, setAttributeSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [isAddDeviceFormOpen, setIsAddDeviceFormOpen] = useState(false);\n  const [isAddParameterFormOpen, setIsAddParameterFormOpen] = useState(false);\n  const [isAddAttributeFormOpen, setIsAddAttributeFormOpen] = useState(false);\n  // eslint-disable-next-line\n  const [parameterToDelete, setParameterToDelete] = useState(null);\n  // eslint-disable-next-line\n  const [attributeToDelete, setAttributeToDelete] = useState(null);\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n  const [isDeleteAttributeConfirmationOpen, setIsDeleteAttributeConfirmationOpen] = useState(false);\n  const [selectedDeviceName, setSelectedDeviceName] = useState('');\n  // eslint-disable-next-line\n  const [selectedSlaveId, setSelectedSlaveId] = useState('');\n  const [updateDeviceFormOpen, setUpdateDeviceFormOpen] = useState(false);\n  const [updatedDeviceName, setUpdatedDeviceName] = useState('');\n  const [updatedSlaveId, setUpdatedSlaveId] = useState('');\n  const [isDeleteDeviceConfirmationOpen, setIsDeleteDeviceConfirmationOpen] = useState(false);\n  const [parameterFields, setParameterFields] = useState([{ function_code: '', address: '', ParameterName: '', data_type: '' }]);\n  const [attributeFields, setAttributeFields] = useState([{ name: '', value: ''}]);\n  const [selectedAttribute, setSelectedAttribute] = useState(null);\n  const [openUpdateAttributeDialog, setOpenUpdateAttributeDialog] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [parameterTableData, setParameterTableData] = useState([]);\n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setDeviceSuccessMessage('');\n      setParameterSuccessMessage('');\n      setAttributeSuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [deviceSuccessMessage, parameterSuccessMessage, attributeSuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/devices/');\n        const data = await response.json();\n\n        if (Array.isArray(data.devices)) {\n          setDevices(data.devices);\n        } else {\n          console.error('Invalid response format for devices:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching devices:', error);\n      }\n    };\n\n    fetchDevices();\n  }, []);\n\n  const handleDeviceChange = async (deviceId) => {\n    try {\n      console.log('Fetching device details for deviceId:', deviceId);\n  \n      const response = await fetch(`http://localhost:5000/devices/${encodeURIComponent(deviceId)}`);\n      const data = await response.json();\n  \n      setOpen(true);\n  \n      if (data.device && Array.isArray(data.device.parameters)) {\n        if (data.device.parameters.length > 0) {\n          setParameters(data.device.parameters);\n          setSuccessMessage('');\n          setErrorMessage('');\n        } else {\n          setParameters([]);\n          setAttributes([]);\n          setErrorMessage('No Parameters And Attributes connected to the selected device');\n        }\n      } else {\n        setParameters([]);\n        setErrorMessage('Error fetching Parameters and Attributes or no Parameters and Attributes connected to the selected device');\n      }\n  \n      // Set selectedDeviceName and selectedSlaveId based on the selected device\n      setSelectedDevice(deviceId);\n      if (data.device) {\n        setSelectedDeviceName(data.device.name);\n        setSelectedSlaveId(data.device.slave_id);\n        setAttributes(data.device.attributes); // Set connected attributes\n      }\n    } catch (error) {\n      console.error('Error fetching Device details:', error);\n      setErrorMessage('Error fetching Device details. Please try again.');\n    }\n  };\n  \n  const handleChange = (event) => {\n    const deviceId = event.target.value;\n    handleDeviceChange(deviceId);\n  }; \n  \n\n  const handleUpdateClick = (parameter) => {\n    setSelectedParameter(parameter);\n    setUpdatedFunctionCode(parameter.function_code);\n    setUpdatedAddress(parameter.address);\n    setUpdatedParameterName(parameter.parameter_name);\n    setUpdatedDataType(parameter.data_type);\n    setOpenUpdateDialog(true);\n  };\n  \n\n  const handleUpdateDialogClose = () => {\n    setOpenUpdateDialog(false);\n    setUpdatedFunctionCode('');\n    setUpdatedAddress('');\n    setUpdatedParameterName('');\n    setUpdatedDataType('');\n  };\n\n  const handleUpdateSubmit = async () => {\n    if (!selectedParameter || !selectedParameter.id) {\n      console.error('No Parameter selected for update');\n      return;\n    }\n\n    const updatedValues = {\n      address: updatedAddress,\n      parameter_name: updatedParameterName,\n      data_type: updatedDataType,\n    };\n\n    try {\n      const response = await fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter/${selectedParameter.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedValues),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update Parameter: ${response.statusText}`);\n      }\n\n      handleChange({ target: { value: selectedDevice } });\n      handleUpdateDialogClose();\n      setParameterSuccessMessage('Parameter updated successfully!');\n    } catch (error) {\n      console.error('Error updating Parameter:', error);\n      setErrorMessage(`Error updating Parameter. ${error.message}`);\n    }\n  };\n  \n\n  const handleDeleteSubmit = async (parameter) => {\n    setIsDeleteConfirmationOpen(false);\n\n    try {\n      if (selectedDevice && parameter && parameter.id) {\n        const response = await fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter/${parameter.id}`, {\n          method: 'DELETE',\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete parameter: ${response.statusText}`);\n        }\n\n        setParameterSuccessMessage('Parameter deleted successfully!');\n        setErrorMessage('');\n\n        // Update the device list\n        const deviceResponse = await fetch(`http://localhost:5000/devices/${selectedDevice}`);\n        const deviceData = await deviceResponse.json();\n\n        if (deviceData.device && Array.isArray(deviceData.device.parameters)) {\n          setParameters(deviceData.device.parameters);\n        } else {\n          setParameters([]);\n        }\n\n        // Fetch devices to update the list\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\n        const devicesData = await devicesResponse.json();\n\n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          console.error('Invalid response format for devices:', devicesData);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting Parameter:', error);\n      setErrorMessage(`Error deleting Parameter. ${error.message}`);\n    } finally {\n      setOpenUpdateDialog(false);\n      setSelectedParameter(null);\n    }\n  };\n\n  // eslint-disable-next-line\n  const handleDeleteClick = (parameter) => {  // Define handleDeleteClick explicitly\n    setSelectedParameter(parameter);\n    setIsDeleteConfirmationOpen(true);\n  };\n\n  const createDevice = async () => {\n    if (deviceName && slaveId) {\n      const newDevice = { name: deviceName, slave_id: slaveId };\n\n      try {\n        const response = await fetch('http://localhost:5000/devices/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newDevice),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        setDeviceSuccessMessage('Device created successfully!');\n        clearDeviceForm();\n        setIsAddDeviceFormOpen(false);\n\n        // Fetch the updated list of devices\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\n        const devicesData = await devicesResponse.json();\n\n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          console.error('Invalid response format for devices:', devicesData);\n        }\n      } catch (error) {\n        console.error('Error creating device:', error);\n        setErrorMessage('Error creating device. Please try again.');\n      }\n    } else {\n      setErrorMessage('Both device name and slave ID are required');\n    }\n  };\n\n  const handleUpdateDevice = async () => {\n    try {\n      const updatedDevice = { name: updatedDeviceName, slave_id: updatedSlaveId };\n  \n      await fetch(`http://localhost:5000/devices/${selectedDevice.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedDevice),\n      });\n  \n      // Fetch the updated list of devices\n      const devicesResponse = await fetch('http://localhost:5000/devices/');\n      const devicesData = await devicesResponse.json();\n  \n      if (Array.isArray(devicesData.devices)) {\n        // Update selected device details first\n        setSelectedDeviceName(updatedDeviceName);\n        setSelectedSlaveId(updatedSlaveId);\n  \n        // Then update the state of devices\n        setDevices(devicesData.devices);\n        setDeviceSuccessMessage('Device updated successfully!');\n      } else {\n        console.error('Invalid response format for devices:', devicesData);\n      }\n    } catch (error) {\n      console.error('Error updating device:', error);\n      setErrorMessage('Error updating device. Please try again.');\n    } finally {\n      setUpdateDeviceFormOpen(false);\n    }\n  };\n  \n  const handleDeleteDevice = async (deviceId) => {\n    try {  \n      // Send DELETE request to the server\n      await fetch(`http://localhost:5000/devices/${deviceId}`, {\n        method: 'DELETE',\n      });\n  \n      // Fetch the updated list of devices\n      const devicesResponse = await fetch('http://localhost:5000/devices/');\n      const devicesData = await devicesResponse.json();\n  \n      if (Array.isArray(devicesData.devices)) {\n        // Update state with the updated list of devices\n        setDevices(devicesData.devices);\n        // Clear the Parameters when a device is deleted\n        setParameters([]);\n        // Clear the Attributes when a device is deleted\n        setAttributes([]);\n  \n        // Reset selected device details\n        setSelectedDevice(null);\n        setSelectedDeviceName('');\n        setSelectedSlaveId('');\n      } else {\n        console.error('Invalid response format for devices:', devicesData);\n      }\n  \n      setDeviceSuccessMessage('Device deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting device:', error);\n      setErrorMessage('Error deleting device. Please try again.');\n    } finally {\n      // Close the confirmation dialog and any other necessary actions\n      setIsDeleteDeviceConfirmationOpen(false);\n      setOpenUpdateDialog(false);\n      setSelectedParameter(null);\n      setSelectedAttribute(null);\n    }\n  };\n  \n \n\n  const handleOpenUpdateDeviceForm = (deviceId) => {\n    const selectedDevice = devices.find((device) => device.id === deviceId);\n\n    setUpdatedDeviceName(selectedDevice.name);\n    setUpdatedSlaveId(selectedDevice.slave_id);\n    setSelectedDevice(selectedDevice);\n    setUpdateDeviceFormOpen(true);\n  };\n\n  const handleCloseUpdateDeviceForm = () => {\n    setUpdateDeviceFormOpen(false);\n  };\n\n  const handleDeleteDeviceClick = (deviceId, deviceName) => {\n    setSelectedDevice(deviceId);\n    setSelectedDeviceName(deviceName);\n    setIsDeleteDeviceConfirmationOpen(true);\n  };\n\n  const handleDeleteDeviceConfirmationClose = () => {\n    setIsDeleteDeviceConfirmationOpen(false);\n  };\n\n  const handleDeleteDeviceDialogClose = () => {\n    setIsDeleteConfirmationOpen(false);\n  };\n\n  const clearDeviceForm = () => {\n    setDeviceName('');\n    setSlaveId('');\n  };\n  \n  const handleAddDeviceClick = () => {\n    setIsAddDeviceFormOpen(true);\n  };\n  \n  const handleAddParameterClick = () => {\n    setIsAddParameterFormOpen(true);\n  };\n  \n  const handleAddDeviceFormClose = () => {\n    setIsAddDeviceFormOpen(false);\n    clearDeviceForm();\n  };\n  \n  const handleAddParameterFormClose = () => {\n    setIsAddParameterFormOpen(false);\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '' }]); // Reset fields\n    clearParameterForm();\n  };\n\n  const handleDeleteParameterDialogClose = () => {\n    setIsDeleteConfirmationOpen(false);\n    setParameterToDelete(null);\n  };\n\n  const handleDeleteParameterClick = (parameter) => {\n    setSelectedParameter(parameter);\n    setIsDeleteConfirmationOpen(true);\n  }; \n\n  const clearParameterForm = () => {\n    // Assuming you have state setters for address, ParameterName, and data_type\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '' }]);\n    // Add any other state resetting logic if needed\n  };\n  \n  \n\n  const handleAddParameterButtonClick = () => {\n    console.log('Add Parameter button clicked');\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '' }]);\n    setIsAddParameterFormOpen(true);\n  };\n\n\n  const handleUpdateParameterDialogClose = () => {\n    setOpenUpdateDialog(false);\n    setUpdatedFunctionCode('');\n    setUpdatedAddress('');\n    setUpdatedParameterName('');\n    setUpdatedDataType('');\n  };\n  \n  \n  // const ParameterDevice = () => {\n  //   if (!selectedDevice) {\n  //     setErrorMessage('Please select a device!');\n  //     return;\n  //   }\n  \n  //   if (!address || !ParameterName || !data_type_type) {\n  //     setErrorMessage('Please fill in all the required fields for the new Parameter!');\n  //     return;\n  //   }\n  \n  //   const newParameter = {\n  //     address,\n  //     parameter_name: ParameterName,\n  //     data_type_type,\n  //     device_id: selectedDevice,\n  //   };\n  \n  //   fetch(`http://localhost:5000/Parameter/devices/${selectedDevice}/Parameter`, {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify(newParameter),\n  //   })\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n  //       return response.json();\n  //     })\n  //     .then(() => {\n  //       setParameterSuccessMessage('New Parameter created successfully!');\n  //       clearParameterForm();\n  //       setIsAddParameterFormOpen(false);\n  \n  //       handleDeviceChange({ target: { value: selectedDevice } });\n  //     })\n  //     .catch((error) => {\n  //       console.error('Error creating a new Parameter:', error);\n  //       setErrorMessage('Error creating a new Parameter. Please try again.');\n  //     });\n  // };\n\n  const parameterDevice = () => {\n    if (!selectedDevice) {\n      setErrorMessage('Please select a device!');\n      return;\n    }\n\n    // Validate the fields for each row\n    const invalidFields = parameterFields.some(\n      (field) => !field.function_code || !field.address || !field.ParameterName || !field.data_type\n    );\n\n    if (invalidFields) {\n      setErrorMessage('Please fill in all the required fields for each parameter!');\n      return;\n    }\n\n    const parameterPayload = {\n      parameters: parameterFields.map((field) => ({\n        active: true,\n        function_code: field.function_code,\n        address: field.address,\n        parameter_name: field.ParameterName,\n        data_type: field.data_type,\n      })),\n    };\n\n    fetch(`http://localhost:5000/parameter/devices/${selectedDevice}/parameter`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(parameterPayload),\n    })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('One or more parameters failed to create.');\n      }\n      return response.json();\n    })\n    .then((responseData) => {\n      console.log('API Response Data:', responseData);\n\n      // Check if responseData has the expected structure\n      if (responseData.created_parameters) {\n        // Update the table data with the new parameters\n        setParameterTableData([...parameterTableData, ...responseData.created_parameters]);\n\n        setParameterSuccessMessage('Parameters created successfully!');\n        clearParameterForm();\n        setIsAddParameterFormOpen(false);\n        handleChange({ target: { value: selectedDevice } });\n      } else {\n        console.error('Unexpected response format:', responseData);\n        setErrorMessage('Error creating Parameters. Please try again.');\n      }\n    })\n    .catch((error) => {\n      console.error('Error creating Parameters:', error);\n      setErrorMessage('Error creating Parameters. Please try again.');\n    });\n};\n\n  const handleFieldChange = (index, field, value) => {\n    const updatedFields = [...parameterFields];\n    updatedFields[index][field] = value;\n    setParameterFields(updatedFields);\n  };\n\n  // eslint-disable-next-line\n  const addEmptyRow = () => {\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '' }]);\n  };\n\n  const removeRow = (index) => {\n    const updatedFields = [...parameterFields];\n    updatedFields.splice(index, 1);\n    setParameterFields(updatedFields);\n  };\n\n  const clearAttributeForm = () => {\n    // Assuming you have state setters for address, ParameterName, and data_type\n    setAttributeFields([{ name: '', value: '' }]);\n    // Add any other state resetting logic if needed\n  };\n\n  const handleAddAttributeFormClose = () => {\n    setIsAddAttributeFormOpen(false);\n    setAttributeFields([{ name: '', value: '' }]); // Reset fields\n    clearAttributeForm();\n  };\n\n  const handleAddAttributeButtonClick = () => {\n    console.log('Add Attribute button clicked');\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\n    setIsAddAttributeFormOpen(true);\n  };\n\n  const handleAddAttributeClick = () => {\n    setIsAddAttributeFormOpen(true);\n  };\n\n  const attributeDevice = () => {\n    if (!selectedDevice) {\n      setErrorMessage('Please select a device!');\n      return;\n    }\n  \n    // Validate the fields for each row\n    const invalidFields = attributeFields.some(\n      (field) => !field.name || !field.value\n    );\n  \n    if (invalidFields) {\n      setErrorMessage('Please fill in all the required fields for each attribute!');\n      return;\n    }\n  \n    const attributePayload = {\n      attributes: attributeFields.map((field) => ({\n        name: field.name,\n        value: field.value,\n      })),\n    };\n  \n    fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(attributePayload),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('One or more attributes failed to create.');\n        }\n      })\n      .then(() => {\n        setAttributeSuccessMessage('Attributes created successfully!');\n        clearAttributeForm();\n        setIsAddAttributeFormOpen(false);\n        handleChange({ target: { value: selectedDevice } });\n      })\n      .catch((error) => {\n        console.error('Error creating Attributes:', error);\n        setErrorMessage('Error creating Attributes. Please try again.');\n      });\n  };\n  \n  const handleAttributeFieldChange = (index, field, value) => {\n    const updatedFields = [...attributeFields];\n    updatedFields[index][field] = value;\n    setAttributeFields(updatedFields);\n  };\n  \n  // eslint-disable-next-line\n  const addAttributeEmptyRow = () => {\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\n  };\n  \n  const removeAttributeRow = (index) => {\n    const updatedFields = [...attributeFields];\n    updatedFields.splice(index, 1);\n    setAttributeFields(updatedFields);\n  };\n\n  const handleUpdateAttributeClick = (attribute) => {\n    setSelectedAttribute(attribute);\n    setUpdatedName(attribute.name);\n    setUpdatedValue(attribute.value);\n    setOpenUpdateAttributeDialog(true);\n  };\n  \n\n  const handleUpdateAttributeDialogClose = () => {\n    setOpenUpdateAttributeDialog(false);\n    setUpdatedName('');\n    setUpdatedValue('');\n  };\n\n  const handleUpdateAttributeSubmit = async () => {\n    if (!selectedAttribute || !selectedAttribute.id || !selectedDevice) {\n      console.error('No Attribute or Device selected for update');\n      return;\n    }\n  \n    const updatedValues = {\n      name: updatedName,\n      value: updatedValue,\n    };\n  \n    try {\n      const response = await fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute/${selectedAttribute.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedValues),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Failed to update Attribute: ${response.statusText}`);\n      }\n  \n      handleChange({ target: { value: selectedDevice } });\n      handleUpdateAttributeDialogClose();\n      setAttributeSuccessMessage('Attribute updated successfully!');\n    } catch (error) {\n      console.error('Error updating Attribute:', error);\n      setErrorMessage(`Error updating Attribute. ${error.message}`);\n    }\n  };\n  \n  \n\n  const handleDeleteAttributeSubmit = async (attribute) => {\n    setIsDeleteConfirmationOpen(false);\n\n    try {\n      if (selectedDevice && attribute && attribute.id) {\n        const response = await fetch(`http://localhost:5000/attribute/devices/${selectedDevice}/attribute/${attribute.id}`, {\n          method: 'DELETE',\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete Attribute: ${response.statusText}`);\n        }\n\n        setAttributeSuccessMessage('Attribute deleted successfully!');\n        setErrorMessage('');\n\n        // Update the device list\n        const deviceResponse = await fetch(`http://localhost:5000/devices/${selectedDevice}`);\n        const deviceData = await deviceResponse.json();\n\n        if (deviceData.device && Array.isArray(deviceData.device.attributes)) {\n          setAttributes(deviceData.device.attributes);\n        } else {\n          setAttributes([]);\n        }\n\n        // Fetch devices to update the list\n        const devicesResponse = await fetch('http://localhost:5000/devices/');\n        const devicesData = await devicesResponse.json();\n\n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          console.error('Invalid response format for devices:', devicesData);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting Attribute:', error);\n      setErrorMessage(`Error deleting Attribute. ${error.message}`);\n    } finally {\n      setIsDeleteAttributeConfirmationOpen(false);\n      setOpenUpdateAttributeDialog(false);\n      setSelectedAttribute(null);\n    }\n  };\n\n  \n  const handleDeleteAttributeDialogClose = () => {\n    setIsDeleteAttributeConfirmationOpen(false);\n    setAttributeToDelete(null);\n  };\n\n  const handleDeleteAttributeClick = (attribute) => {\n    setSelectedAttribute(attribute);\n    setIsDeleteAttributeConfirmationOpen(true);\n  }; \n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        {/* <div className={classes.buttonGroup}>\n          <Button onClick={handleAddDeviceClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\n            Add Device\n          </Button>\n        </div>  */}\n\n        {/* Table section */}\n        <Grid container spacing={2} justifyContent=\"flex-end\">\n        <Grid item>\n          <Button onClick={handleAddDeviceClick}\n            variant=\"contained\"\n            color=\"secondary\"\n          >\n            Add Device\n          </Button>\n        </Grid>\n\n        <Grid item xs={12}>\n          <TableContainer component={Paper}>\n            <Table>\n              {/* Table Header */}\n              <TableHead>\n                <TableRow>\n                  <TableCell>Device Name</TableCell>\n                  <TableCell>Slave ID</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n\n              {/* Table Body */}\n              <TableBody>\n                {devices.map((device) => (\n                  <TableRow key={device.id}>\n                    <TableCell>{device.name}</TableCell>\n                    <TableCell>{device.slave_id}</TableCell>\n                    <TableCell>\n                      {/* Show button */}\n                      <Button\n                        onClick={() => handleOpenUpdateDeviceForm(device.id)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        Update\n                      </Button>\n                      <Button\n                        onClick={() => handleDeleteDeviceClick(device.id, device.name)}\n                        variant=\"contained\"\n                        color=\"error\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        Delete\n                      </Button>\n                      <Button\n                        onClick={() => handleDeviceChange(device.id)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        Show\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n  \n        {/* <div className={classes.buttonGroup}>\n        <Button onClick={handleAddDeviceClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\n          Add Device\n        </Button>\n        <Button onClick={handleAddParameterClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\n          Add Parameter\n        </Button>\n        <Button onClick={handleAddAttributeClick} variant=\"contained\" color=\"secondary\">\n          Add Attribute\n        </Button>\n      </div> */}\n      </div>\n  \n      {deviceSuccessMessage && (\n        <Alert severity=\"success\" onClose={() => setDeviceSuccessMessage('')}>\n          {deviceSuccessMessage}\n        </Alert>\n      )}\n  \n      {parameterSuccessMessage && (\n        <Alert severity=\"success\" onClose={() => setParameterSuccessMessage('')}>\n          {parameterSuccessMessage}\n        </Alert>\n      )}\n\n      {attributeSuccessMessage && (\n        <Alert severity=\"success\" onClose={() => setParameterSuccessMessage('')}>\n          {attributeSuccessMessage}\n        </Alert>\n      )}\n  \n      {errorMessage && (\n        <Alert severity=\"error\" onClose={() => setErrorMessage('')}>\n          {errorMessage}\n        </Alert>\n      )}\n\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Pop-up Form</DialogTitle>\n        <DialogContent>\n        <Button onClick={handleAddParameterClick} variant=\"contained\" color=\"secondary\" style={{ marginRight: '10px' }}>\n          Add Parameter\n        </Button>\n        <Button onClick={handleAddAttributeClick} variant=\"contained\" color=\"secondary\">\n          Add Attribute\n        </Button>\n          <TableContainer component={Paper}>\n            {/* Parameter Table */}\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell colSpan={5} align=\"center\">\n                    <Typography variant=\"h6\">Parameter Table</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Function Code</TableCell>\n                  <TableCell>Address</TableCell>\n                  <TableCell>Parameter Name</TableCell>\n                  <TableCell>Data Type</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {parameters.map((parameter) => (\n                  <TableRow key={parameter.id}>\n                    <TableCell>{parameter.function_code}</TableCell>\n                    <TableCell>{parameter.address}</TableCell>\n                    <TableCell>{parameter.parameter_name}</TableCell>\n                    <TableCell>{parameter.data_type}</TableCell>\n                    <TableCell>\n                      <Button\n                        onClick={() => handleUpdateClick(parameter)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        Update\n                      </Button>\n                      <Button\n                        onClick={() => handleDeleteParameterClick(parameter)}\n                        variant=\"contained\"\n                        color=\"error\"\n                      >\n                        Delete\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          \n          <TableContainer component={Paper} style={{ marginTop: '20px' }}>\n            {/* Attribute Table */}\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell colSpan={3} align=\"center\">\n                    <Typography variant=\"h6\">Attribute Table</Typography>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Attribute Name</TableCell>\n                  <TableCell>Attribute Value</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {attributes.map((attribute) => (\n                  <TableRow key={attribute.id}>\n                    <TableCell>{attribute.name}</TableCell>\n                    <TableCell>{attribute.value}</TableCell>\n                    <TableCell>\n                      <Button\n                        onClick={() => handleUpdateAttributeClick(attribute)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        Update\n                      </Button>\n                      <Button\n                        onClick={() => handleDeleteAttributeClick(attribute)}\n                        variant=\"contained\"\n                        color=\"error\"\n                      >\n                        Delete\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </DialogContent>\n      </Dialog>\n      \n  \n      <Dialog open={openUpdateDialog} onClose={handleUpdateParameterDialogClose}>\n      <DialogTitle style={{ color: '#008080' }}>Update Parameter</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n              <InputLabel>Function Code</InputLabel>\n                <Select\n                  value={updatedFunctionCode}\n                  onChange={(e) => setUpdatedFunctionCode(e.target.value)}\n                >\n                  <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\n                  <MenuItem value=\"Input Status\">Input Status</MenuItem>\n                  <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\n                  <MenuItem value=\"Input Register\">Input Register</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Address\"\n                value={updatedAddress}\n                onChange={(e) => setUpdatedAddress(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Parameter Name\"\n                value={updatedParameterName}\n                onChange={(e) => setUpdatedParameterName(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n                <InputLabel>Data Type</InputLabel>\n                <Select\n                  value={updatedDataType}\n                  onChange={(e) => setUpdatedDataType(e.target.value)}\n                >\n                  <MenuItem value=\"Integer\">Integer</MenuItem>\n                  <MenuItem value=\"Float\">Float</MenuItem>\n                  <MenuItem value=\"Double\">Double</MenuItem>\n                  <MenuItem value=\"Boolean\">Boolean</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={handleUpdateSubmit} variant=\"contained\" color=\"primary\">Update</Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      <Dialog open={isDeleteConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\n        <DialogTitle>Delete Parameter</DialogTitle>\n        <DialogContent>\n          <p>Are you sure you want to delete this Parameter?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={() => handleDeleteSubmit(selectedParameter)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={openUpdateAttributeDialog} onClose={handleUpdateAttributeDialogClose}>\n      <DialogTitle style={{ color: '#008080' }}>Update Attribute</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Name\"\n                value={updatedName}\n                onChange={(e) => setUpdatedName(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Value\"\n                value={updatedValue}\n                onChange={(e) => setUpdatedValue(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={handleUpdateAttributeSubmit} variant=\"contained\" color=\"primary\">Update</Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={isDeleteAttributeConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\n        <DialogTitle>Delete Attribute</DialogTitle>\n        <DialogContent>\n          <p>Are you sure you want to delete this Attribute?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={() => handleDeleteAttributeSubmit(selectedAttribute)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n        \n      <Dialog open={updateDeviceFormOpen} onClose={handleCloseUpdateDeviceForm}>\n        <DialogTitle>Update Device</DialogTitle>\n        <DialogContent>\n          {selectedDevice && (\n            <>\n              <TextField\n                label=\"Device Name\"\n                value={updatedDeviceName}\n                onChange={(e) => setUpdatedDeviceName(e.target.value)}\n              />\n              <TextField\n                label=\"Slave ID\"\n                value={updatedSlaveId}\n                onChange={(e) => setUpdatedSlaveId(e.target.value)}\n              />\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseUpdateDeviceForm} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          <Button onClick={handleUpdateDevice} variant=\"contained\" color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      <Dialog open={isDeleteDeviceConfirmationOpen} onClose={handleDeleteDeviceConfirmationClose}>\n        <DialogTitle>Delete Device</DialogTitle>\n        <DialogContent>\n          {/* Ensure selectedDeviceName is populated correctly */}\n          <p>Are you sure you want to delete \"{selectedDeviceName}\"?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteDeviceConfirmationClose} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          {/* Pass selectedDevice.id to handleDeleteDevice */}\n          <Button onClick={() => handleDeleteDevice(selectedDevice)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n  \n      <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\n        <DialogTitle>Add Device</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Device Name\"\n            value={deviceName}\n            onChange={(e) => setDeviceName(e.target.value)}\n          />\n          <TextField label=\"Slave ID\" value={slaveId} onChange={(e) => setSlaveId(e.target.value)} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={createDevice} variant=\"contained\">Create Device</Button>\n        </DialogActions>\n      </Dialog>\n  \n      <Dialog open={isAddParameterFormOpen} onClose={handleAddParameterFormClose}>\n        <DialogTitle>\n          Add Parameter\n        </DialogTitle>\n        <DialogContent>\n          {parameterFields.map((field, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\">\n              <Grid item xs={2}>\n                <FormControl fullWidth>\n                  <InputLabel>Function Code</InputLabel>\n                  <Select\n                    value={field.function_code || ''} // Ensure a default value, e.g., an empty string\n                    onChange={(e) => handleFieldChange(index, 'function_code', e.target.value)}\n                  >\n                    <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\n                    <MenuItem value=\"Input Status\">Input Status</MenuItem>\n                    <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\n                    <MenuItem value=\"Input Register\">Input Register</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Address\"\n                  value={field.address}\n                  onChange={(e) => handleFieldChange(index, 'address', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Parameter Name\"\n                  value={field.ParameterName}\n                  onChange={(e) => handleFieldChange(index, 'ParameterName', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <FormControl>\n                  <InputLabel>Data Type</InputLabel>\n                  <Select\n                    value={field.data_type}\n                    onChange={(e) => handleFieldChange(index, 'data_type', e.target.value)}\n                  >\n                    <MenuItem value=\"Integer\">Integer</MenuItem>\n                    <MenuItem value=\"Float\">Float</MenuItem>\n                    <MenuItem value=\"Double\">Double</MenuItem>\n                    <MenuItem value=\"Boolean\">Boolean</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={1}>\n                {index !== 0 && (\n                  <IconButton onClick={() => removeRow(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={2}>\n                {index === parameterFields.length - 1 && (\n                  <IconButton onClick={handleAddParameterButtonClick}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddParameterFormClose} variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={parameterDevice} variant=\"contained\" color=\"primary\">\n            Create Parameter\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={isAddAttributeFormOpen} onClose={handleAddAttributeFormClose}>\n        <DialogTitle>\n          Add Attribute\n        </DialogTitle>\n        <DialogContent>\n          {attributeFields.map((field, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\">\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Name\"\n                  value={field.name}\n                  onChange={(e) => handleAttributeFieldChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Value\"\n                  value={field.value}\n                  onChange={(e) => handleAttributeFieldChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                {index !== 0 && (\n                  <IconButton onClick={() => removeAttributeRow(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={1}>\n                {index === attributeFields.length - 1 && (\n                  <IconButton onClick={handleAddAttributeButtonClick}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddAttributeFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={attributeDevice} variant=\"contained\">Create Attribute</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DeviceParameterTable;\n"],"names":["useStyles","makeStyles","theme","root","padding","spacing","header","display","alignItems","marginBottom","headerText","fontFamily","fontSize","fontWeight","color","marginRight","buttonGroup","marginLeft","addButton","backgroundColor","palette","success","main","dark","deleteButton","error","DeviceParameterTable","classes","devices","setDevices","useState","selectedDevice","setSelectedDevice","parameters","setParameters","attributes","setAttributes","selectedParameter","setSelectedParameter","openUpdateDialog","setOpenUpdateDialog","updatedFunctionCode","setUpdatedFunctionCode","updatedAddress","setUpdatedAddress","updatedParameterName","setUpdatedParameterName","updatedDataType","setUpdatedDataType","updatedName","setUpdatedName","updatedValue","setUpdatedValue","deviceName","setDeviceName","slaveId","setSlaveId","deviceSuccessMessage","setDeviceSuccessMessage","parameterSuccessMessage","setParameterSuccessMessage","attributeSuccessMessage","setAttributeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isAddDeviceFormOpen","setIsAddDeviceFormOpen","isAddParameterFormOpen","setIsAddParameterFormOpen","isAddAttributeFormOpen","setIsAddAttributeFormOpen","parameterToDelete","setParameterToDelete","attributeToDelete","setAttributeToDelete","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","isDeleteAttributeConfirmationOpen","setIsDeleteAttributeConfirmationOpen","selectedDeviceName","setSelectedDeviceName","selectedSlaveId","setSelectedSlaveId","updateDeviceFormOpen","setUpdateDeviceFormOpen","updatedDeviceName","setUpdatedDeviceName","updatedSlaveId","setUpdatedSlaveId","isDeleteDeviceConfirmationOpen","setIsDeleteDeviceConfirmationOpen","parameterFields","setParameterFields","function_code","address","ParameterName","data_type","attributeFields","setAttributeFields","name","value","selectedAttribute","setSelectedAttribute","openUpdateAttributeDialog","setOpenUpdateAttributeDialog","open","setOpen","parameterTableData","setParameterTableData","useEffect","setTimeout","async","response","fetch","data","json","Array","isArray","console","fetchDevices","handleDeviceChange","log","deviceId","concat","encodeURIComponent","device","length","slave_id","handleChange","event","target","handleCloseUpdateDeviceForm","handleDeleteDeviceConfirmationClose","handleDeleteDeviceDialogClose","clearDeviceForm","handleAddDeviceFormClose","handleAddParameterFormClose","clearParameterForm","handleAddParameterButtonClick","handleUpdateParameterDialogClose","handleFieldChange","index","field","updatedFields","clearAttributeForm","handleAddAttributeFormClose","handleAddAttributeButtonClick","handleAttributeFieldChange","handleUpdateAttributeDialogClose","_jsxs","className","children","_jsx","Grid","container","justifyContent","item","Button","onClick","handleAddDeviceClick","variant","xs","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","find","id","handleOpenUpdateDeviceForm","style","handleDeleteDeviceClick","Alert","severity","onClose","Dialog","handleClose","maxWidth","fullWidth","DialogTitle","DialogContent","handleAddParameterClick","handleAddAttributeClick","colSpan","align","Typography","parameter","parameter_name","handleUpdateClick","handleDeleteParameterClick","marginTop","attribute","handleUpdateAttributeClick","handleDeleteAttributeClick","FormControl","InputLabel","Select","onChange","e","MenuItem","TextField","label","DialogActions","updatedValues","method","headers","body","JSON","stringify","ok","Error","statusText","message","handleDeleteParameterDialogClose","deviceResponse","deviceData","devicesResponse","devicesData","handleDeleteSubmit","handleDeleteAttributeDialogClose","handleDeleteAttributeSubmit","_Fragment","updatedDevice","handleDeleteDevice","newDevice","IconButton","splice","removeRow","RemoveIcon","AddIcon","parameterDevice","some","parameterPayload","active","then","responseData","created_parameters","catch","removeAttributeRow","attributeDevice","attributePayload"],"sourceRoot":""}