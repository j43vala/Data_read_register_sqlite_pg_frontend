{"version":3,"file":"static/js/769.4af28e4d.chunk.js","mappings":"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","sources":["components/dashboard/NodeParameter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Grid,\r\n  Alert,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Add as AddIcon, Remove as RemoveIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\n\r\n// const baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst NodeParameterTable = () => {\r\n  const [data, setData] = useState(null);\r\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\r\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\r\n  const [updatedAttributes, setUpdatedAttributes] = useState([]);\r\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\r\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\r\n  const [formDataList, setFormDataList] = useState([]);\r\n  const [selectedModbus, setSelectedModbus] = useState({\r\n    port: '',\r\n    method: '',\r\n    parity: '',\r\n    baudrate: '',\r\n    stopbits: '',\r\n    wordLength: '',\r\n  });\r\n\r\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\r\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\r\n  const [updatedHostName, setUpdatedHostName] = useState('');\r\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\r\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\r\n  const [updatedClientId, setUpdatedClientId] = useState('');\r\n  const [updatedClientPassword, setUpdatedClientPassword] = useState('');\r\n  const [updatedQos, setUpdatedQos] = useState('');\r\n  const [qosOptions, setQosOptions] = useState([]);\r\n  const [isRestarting, setIsRestarting] = useState(false);\r\n  const [isStopping, setIsStopping] = useState(false);\r\n  const [restartButtonClicked] = useState(false);\r\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\r\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\r\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\r\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\r\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\r\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  const clearMessagesAfterDelay = () => {\r\n    setTimeout(() => {\r\n      setModbusSuccessMessage('');\r\n      setSPBSuccessMessage('');\r\n      setNodeAttributeSuccessMessage('');\r\n      setMqttSuccessMessage('');\r\n      setServiceStartSuccessMessage('');\r\n      setServiceStopSuccessMessage('');\r\n      setErrorMessage('');\r\n      setSuccessMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, errorMessage, successMessage]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`/node-parameter/`);\r\n        const responseData = await response.json();\r\n        setData(responseData);\r\n\r\n        if (responseData.node_parameters) {\r\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\r\n          if (modbusValues) {\r\n            setSelectedModbus(modbusValues);\r\n          }\r\n          const mqttValues = responseData.node_parameters.find(param => param.name === 'mqtt')?.value;\r\n          if (mqttValues) {\r\n            setQosOptions(mqttValues.qos_options || []);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!data) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\r\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\r\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\r\n\r\n  const uniqueBaudrateList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options)];\r\n  const uniqueWordLengthList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options)];\r\n  const uniqueParityList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options)];\r\n  const uniqueStopbitsList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options)];\r\n  const uniquePortList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.port_options)];\r\n  const uniqueMethodList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.method_options)];\r\n\r\n  // const uniqueBaudrateList = [110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000, 256000];\r\n  // const uniqueWordLengthList = [7, 8];\r\n  // const uniqueParityList = ['ODD', 'EVEN', 'NONE'];\r\n  // const uniqueStopbitsList = [1, 2];\r\n  // const uniquePortList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.port_options)];\r\n  // const uniqueMethodList = [\"rtu\", \"ascii\"];\r\n\r\n  // const handleUpdateSpbParameterFormOpen = () => {\r\n  //   setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\r\n  //   setUpdatedGroupId(spbParameter?.group_id || '');\r\n  //   setUpdatedHostName(spbParameter?.hostname || '');\r\n  //   setUpdateSpbParameterFormOpen(true);\r\n  // };\r\n\r\n  // const handleAddNodeAttributeFormOpen = () => {\r\n  //   setFormDataList([{ name: '', value: '' }]);\r\n  //   setAddNodeAttributeFormOpen(true);\r\n  // };\r\n\r\n  const handleUpdateNodeAttributeFormOpen = () => {\r\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\r\n    setUpdatedAttributes(initialUpdatedAttributes);\r\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\r\n    setUpdatedGroupId(spbParameter?.group_id || '');\r\n    setUpdateNodeAttributeFormOpen(true);\r\n  };\r\n\r\n  const handleUpdateMqttFormOpen = () => {\r\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\r\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\r\n    setUpdatedQos(mqtt?.qos || '');\r\n    setUpdatedClientId(mqtt?.user || '');\r\n    setUpdatedClientPassword(mqtt?.password || '');\r\n    setUpdateMqttFormOpen(true);\r\n    setQosOptions(mqtt?.qos_options || []); // Set the QoS options here\r\n  };\r\n  \r\n\r\n  const handleUpdateFormClose = () => {\r\n    setUpdateSpbParameterFormOpen(false);\r\n    setAddNodeAttributeFormOpen(false);\r\n    setUpdateNodeAttributeFormOpen(false);\r\n    setUpdateMqttFormOpen(false);\r\n  };\r\n\r\n  const handleUpdateSpbParameterSubmit = async () => {\r\n    const updatedData = {\r\n      spb_parameter: {\r\n        edge_node_id: updatedEdgeNodeId,\r\n        group_id: updatedGroupId,\r\n        hostname: updatedHostName\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`/node-parameter/3`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // setSPBSuccessMessage('SPB Parameter updated successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'spb_parameter' ?\r\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId, hostname:updatedHostName } }\r\n              : param\r\n          )),\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\r\n    }\r\n\r\n    handleUpdateFormClose();\r\n  };\r\n\r\n  const handleFormDataChange = (index, key, value) => {\r\n    const updatedFormDataList = [...formDataList];\r\n    updatedFormDataList[index][key] = value;\r\n    setFormDataList(updatedFormDataList);\r\n  };\r\n\r\n  const handleAddFormData = () => {\r\n    // Add a new empty attribute to both formDataList and updatedAttributes\r\n    setFormDataList((prevList) => [...prevList, { name: '', value: '' }]);\r\n    setUpdatedAttributes((prevAttributes) => [\r\n      ...prevAttributes,\r\n      { name: '', value: '' },\r\n    ]);\r\n  };\r\n  \r\n\r\n  const handleRemoveFormData = (indexToRemove) => {\r\n    setFormDataList((prevFormDataList) => {\r\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\r\n    });\r\n  };\r\n\r\n\r\n  const handleUpdateInputChange = (index, updatedAttribute) => {\r\n    setUpdatedAttributes(prevAttributes => {\r\n      const updatedAttributesCopy = [...prevAttributes];\r\n      updatedAttributesCopy[index] = updatedAttribute;\r\n      return updatedAttributesCopy;\r\n    });\r\n  };\r\n\r\n  const handleRemoveAttribute = (index) => {\r\n    const updatedAttributesCopy = [...updatedAttributes];\r\n    updatedAttributesCopy.splice(index, 1);\r\n    setUpdatedAttributes(updatedAttributesCopy);\r\n  };\r\n\r\n  const handleAddNodeAttributeSubmit = async () => {\r\n    try {\r\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\r\n      const response = await fetch(`/node-parameter/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: 'node_attributes',\r\n          value: newAttributes,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'node_attributes' ?\r\n              { ...param, value: [...(param.value || []), ...newAttributes] }\r\n              : param\r\n          )),\r\n        }));\r\n        setFormDataList([]);\r\n      } else {\r\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\r\n    }\r\n\r\n    handleUpdateFormClose();\r\n  };\r\n\r\n  // const handleUpdateNodeAttributeSubmit = async () => {\r\n  //   setData((prevData) => {\r\n  //     const updatedNodeParameters = prevData.node_parameters.map((param) => {\r\n  //       if (param.name === 'node_attributes') {\r\n  //         return {\r\n  //           ...param,\r\n  //           value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n  //         };\r\n  //       }\r\n  //       return param;\r\n  //     });\r\n\r\n  //     return {\r\n  //       ...prevData,\r\n  //       node_parameters: updatedNodeParameters,\r\n  //     };\r\n  //   });\r\n\r\n  //   const updatedData = {\r\n  //     node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n  //   };\r\n\r\n  //   try {\r\n  //     const response = await fetch(`/node-parameter/4`, {\r\n  //       method: 'PUT',\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //       },\r\n  //       body: JSON.stringify(updatedData),\r\n  //     });\r\n\r\n  //     if (response.ok) {\r\n  //       setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\r\n  //     } else {\r\n  //       setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     setErrorMessage(`Error updating Node Attribute:  ${error}`);\r\n  //   }\r\n\r\n  //   handleUpdateFormClose();\r\n  // };\r\n\r\n  const handleUpdateSubmit = async () => {\r\n    // Update SPB Parameter\r\n    const spbUpdatedData = {\r\n      spb_parameter: {\r\n        edge_node_id: updatedEdgeNodeId,\r\n        group_id: updatedGroupId,\r\n        hostname: updatedHostName\r\n      },\r\n    };\r\n  \r\n    // Update Node Attributes\r\n    const nodeAttributeUpdatedData = {\r\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n    };\r\n  \r\n    try {\r\n      // Update SPB Parameter\r\n      const spbResponse = await fetch(`/node-parameter/3`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(spbUpdatedData),\r\n      });\r\n  \r\n      if (spbResponse.ok) {\r\n        // setSPBSuccessMessage('SPB Parameter updated successfully.');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'spb_parameter' ?\r\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId, hostname: updatedHostName } }\r\n              : param\r\n          )),\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update SPB Parameter: ${spbResponse.statusText}`);\r\n      }\r\n  \r\n      // Update Node Attributes\r\n      const nodeAttributeResponse = await fetch(`/node-parameter/4`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(nodeAttributeUpdatedData),\r\n      });\r\n  \r\n      if (nodeAttributeResponse.ok) {\r\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\r\n        setData((prevData) => {\r\n          const updatedNodeParameters = prevData.node_parameters.map((param) => {\r\n            if (param.name === 'node_attributes') {\r\n              return {\r\n                ...param,\r\n                value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\r\n              };\r\n            }\r\n            return param;\r\n          });\r\n      \r\n          return {\r\n            ...prevData,\r\n            node_parameters: updatedNodeParameters,\r\n          };\r\n        });\r\n      } else {\r\n        setErrorMessage(`Failed to update Node Attribute: ${nodeAttributeResponse.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating parameters: ${error}`);\r\n    }\r\n  \r\n    handleUpdateFormClose();\r\n  };\r\n  \r\n\r\n\r\n  const handleUpdateMqttSubmit = async () => {\r\n    // Check if broker_host and broker_port are provided\r\n    if (!updatedBrokerHost) {\r\n      setErrorMessage('Broker Host is Required');\r\n      setUpdateMqttFormOpen(true);\r\n      return;\r\n    }\r\n\r\n    if (!updatedBrokerPort || isNaN(parseInt(updatedBrokerPort))) {\r\n      setErrorMessage('Broker Port is Required and must be an integer');\r\n      setUpdateMqttFormOpen(true);\r\n      return;\r\n    }\r\n  \r\n    // Parse the updatedBrokerPort to ensure it's an integer\r\n    const parsedBrokerPort = parseInt(updatedBrokerPort, 10);\r\n  \r\n    const updatedData = {\r\n      mqtt: {\r\n        broker_host: updatedBrokerHost,\r\n        broker_port: parsedBrokerPort,\r\n        user: updatedClientId,\r\n        password: updatedClientPassword,\r\n        qos: updatedQos,\r\n        qos_options: qosOptions, // Preserve the existing qos_options\r\n      },\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`/node-parameter/2`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n  \r\n        setMqttSuccessMessage('Mqtt updated successfully');\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          node_parameters: prevData.node_parameters.map((param) => (\r\n            param.name === 'mqtt'\r\n              ? { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort, user: updatedClientId, password: updatedClientPassword, qos: updatedQos, qos_options: responseData.qos_options || [] } }\r\n              : param\r\n          )),\r\n        }));\r\n  \r\n        // Update qosOptions with the new options received from the server\r\n        setQosOptions(responseData.qos_options || []); // <-- Update qosOptions here\r\n      } else {\r\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Mqtt: ${error}`);\r\n    }\r\n  \r\n    handleUpdateFormClose();\r\n  };\r\n  \r\n  \r\n  const handleModbusChange = async (paramName, value) => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/1`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          modbus: { ...selectedModbus, [paramName]: value },\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setModbusSuccessMessage('Modbus updated successfully.');\r\n        setSelectedModbus((prevState) => ({\r\n          ...prevState,\r\n          [paramName]: value,\r\n        }));\r\n      } else {\r\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Modbus: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setIsRestarting(true);\r\n\r\n    fetch(`/service/restart-services`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setServiceStartSuccessMessage('Service is restarting.');\r\n        } else {\r\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(`Error restarting service: ${error}`);\r\n      })\r\n      .finally(() => {\r\n        setIsRestarting(false);\r\n      });\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsStopping(true);\r\n\r\n    fetch(`/service/stop-services`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setServiceStopSuccessMessage('Service is stopped.');\r\n        } else {\r\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(`Error stopping service: ${error}`);\r\n      })\r\n      .finally(() => {\r\n        setIsStopping(false);\r\n      });\r\n  };\r\n\r\n  // Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message}) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message}) => (\r\n    <Alert severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={6}>\r\n      {ServiceStartSuccessMessage && (\r\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\r\n      )}\r\n      {ServiceStopSuccessMessage && (\r\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\r\n      )}\r\n      {NodeAttributeSuccessMessage && (\r\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\r\n      )}\r\n      {SPBSuccessMessage && (\r\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \r\n      )}\r\n      {MqttSuccessMessage && (\r\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\r\n      )}\r\n      {ModbusSuccessMessage && (\r\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\r\n      )}\r\n      {errorMessage && (\r\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n      )}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\r\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" style={{ backgroundColor: 'rgb(34, 153, 84)' }} >\r\n            Restart\r\n          </Button>\r\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\r\n            Stop\r\n          </Button>\r\n        </div>\r\n      </Grid>\r\n        \r\n      {/* <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\" >Node Attributes</Typography>\r\n            <div style={{ display: 'flex', gap: '0px' }}>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginRight: '0px' }}\r\n                onClick={handleUpdateNodeAttributeFormOpen}\r\n              >\r\n                <EditIcon style={{ fontSize : \"medium\" }}/>\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: '5px' }}\r\n                onClick={handleAddNodeAttributeFormOpen}\r\n              >\r\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n          <div style={{ marginTop: '3px' }}>\r\n            {nodeAttributes && nodeAttributes.map(attr => (\r\n              <div key={attr.name}>\r\n                <Typography variant=\"body1\">\r\n                  <strong>{attr.name}:</strong> {attr.value}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Paper>\r\n      </Grid> */}\r\n\r\n      {/* <Grid item xs={8}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\" >Node Attributes</Typography>\r\n            <div style={{ display: 'flex', gap: '0px' }}>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginRight: '0px' }}\r\n                onClick={handleUpdateNodeAttributeFormOpen}\r\n              >\r\n                <EditIcon style={{ fontSize: \"medium\" }} />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n          <div style={{ marginTop: '3px' }}>\r\n            <div>\r\n              <strong>Node Id:</strong> {spbParameter?.edge_node_id}\r\n            </div>\r\n            <div>\r\n              <strong>Group Id:</strong> {spbParameter?.group_id}\r\n            </div>\r\n            {nodeAttributes && nodeAttributes.map(attr => (\r\n              <div key={attr.name}>\r\n                <Typography variant=\"body1\">\r\n                  <strong>{attr.name}:</strong> {attr.value}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Paper>\r\n      </Grid> */}\r\n    \r\n      <Grid item xs={8}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\">Node Attributes</Typography>\r\n            <div style={{ display: 'flex', gap: '0px' }}>\r\n              <IconButton\r\n                variant=\"outlined\"\r\n                style={{ marginRight: '0px' }}\r\n                onClick={handleUpdateNodeAttributeFormOpen}\r\n              >\r\n                <EditIcon style={{ fontSize: 'medium' }} />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n          <div style={{ marginTop: '3px', display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n            <div style={{ marginRight: '20px' }}>\r\n              <div>\r\n                <strong>Group Id:</strong> {spbParameter?.group_id}\r\n              </div>\r\n              <div>\r\n                <strong>Node Id:</strong> {spbParameter?.edge_node_id}\r\n              </div>\r\n              {nodeAttributes &&\r\n                nodeAttributes.slice(0, 2).map((attr, index) => (\r\n                  <div key={attr.name}>\r\n                    <Typography variant=\"body1\">\r\n                      <strong>{attr.name}:</strong> {attr.value}\r\n                    </Typography>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n            {/* Add space between the first and second column */}\r\n            <div style={{ marginLeft: '30px', display: 'flex', flexDirection: 'column' }}>\r\n              {nodeAttributes &&\r\n                nodeAttributes.slice(2).map((attr, index) => (\r\n                  <div key={attr.name}>\r\n                    <Typography variant=\"body1\">\r\n                      <strong>{attr.name}:</strong> {attr.value}\r\n                    </Typography>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n\r\n      {/* <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\">SPB Parameter</Typography>\r\n            <IconButton\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: '10px' }}\r\n              onClick={handleUpdateSpbParameterFormOpen}\r\n            >\r\n              <EditIcon style={{ fontSize : \"medium\" }}/>\r\n            </IconButton>\r\n          </div>\r\n          <div>\r\n            <strong>Node Id:</strong> {spbParameter?.edge_node_id}\r\n          </div>\r\n          <div>\r\n            <strong>Group Id:</strong> {spbParameter?.group_id}\r\n          </div>\r\n          <div>\r\n            <strong>Host Name:</strong> {spbParameter?.hostname}\r\n          </div>\r\n        </Paper>\r\n      </Grid> */}\r\n\r\n      <Grid item xs={4}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n        {/* <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}> */}\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <Typography variant=\"h6\">MQTT</Typography>\r\n            <IconButton\r\n              variant=\"outlined\"\r\n              style={{ marginLeft: '10px' }}\r\n              onClick={handleUpdateMqttFormOpen}\r\n            >\r\n              <EditIcon style={{ fontSize : \"medium\" }}/>\r\n            </IconButton>\r\n          </div>\r\n          <div>\r\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <div style={{ marginRight: '60px' }}>\r\n              <strong>Broker Port:</strong> {mqtt?.broker_port}\r\n            </div>\r\n            {/* <div>\r\n              <strong>QoS:</strong> {mqtt?.qos}\r\n            </div> */}\r\n          </div>\r\n          <div>\r\n            <strong>Client ID:</strong> {mqtt?.user}\r\n          </div>\r\n          <div>\r\n            <strong>Client Password:</strong> {mqtt?.password}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n\r\n      <Grid item xs={12}>\r\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n        {/* <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}> */}\r\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\r\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\r\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>{label}</InputLabel>\r\n                  <Select\r\n                    value={selectedModbus[label.toLowerCase()]}\r\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\r\n                  >\r\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\r\n                      <MenuItem key={baudrate} value={baudrate}>\r\n                        {baudrate}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\r\n                      <MenuItem key={wordLength} value={wordLength}>\r\n                        {wordLength}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Parity' && uniqueParityList.map(parity => (\r\n                      <MenuItem key={parity} value={parity}>\r\n                        {parity}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\r\n                      <MenuItem key={stopbits} value={stopbits}>\r\n                        {stopbits}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Port' && uniquePortList.map(port => (\r\n                      <MenuItem key={port} value={port}>\r\n                        {port}\r\n                      </MenuItem>\r\n                    ))}\r\n                    {label === 'Method' && uniqueMethodList.map(method => (\r\n                      <MenuItem key={method} value={method}>\r\n                        {method}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      {/* Update form for SPB Parameter */}\r\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Update SPB Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Edge Node ID\"\r\n            value={updatedEdgeNodeId}\r\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\r\n            fullWidth\r\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\r\n          />\r\n          <TextField\r\n            label=\"Group ID\"\r\n            value={updatedGroupId}\r\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\r\n            fullWidth\r\n            style={{ marginBottom: '16px', marginTop: '5px' }}\r\n          />\r\n          <TextField\r\n            label=\"Host Name\"\r\n            value={updatedHostName}\r\n            onChange={(e) => setUpdatedHostName(e.target.value)}\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit form for Node Attribute */}\r\n      {/* <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Edit Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n          {updatedAttributes.map((attr, index) => (\r\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\r\n              <TextField\r\n                label=\"Attribute Name\"\r\n                value={attr.name}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\r\n                style={{ marginRight: '10px', marginTop: '5px' }}\r\n              />\r\n              <TextField\r\n                label=\"Attribute Value\"\r\n                value={attr.value}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\r\n                style={{ marginTop: '5px' }}\r\n              />\r\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\r\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\r\n              </IconButton>\r\n            </div>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog> */}\r\n\r\n      {/* <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Edit Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '16px' }}>\r\n            <TextField\r\n              label=\"Edge Node ID\"\r\n              value={updatedEdgeNodeId}\r\n              onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\r\n              style={{ marginRight: '10px',  marginTop: '10px' }}\r\n            />\r\n            <TextField\r\n              label=\"Group ID\"\r\n              value={updatedGroupId}\r\n              onChange={(e) => setUpdatedGroupId(e.target.value)}\r\n              style={{ marginTop: '10px' }}\r\n            />\r\n          </div>\r\n          {updatedAttributes.map((attr, index) => (\r\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\r\n              <TextField\r\n                label=\"Attribute Name\"\r\n                value={attr.name}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\r\n                style={{ marginRight: '10px' }}\r\n              />\r\n              <TextField\r\n                label=\"Attribute Value\"\r\n                value={attr.value}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\r\n              />\r\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\r\n                <DeleteIcon style={{ color: 'black', fontSize: 'medium' }} />\r\n              </IconButton>\r\n            </div>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid item xs={2}>\r\n            <IconButton onClick={handleAddFormData}>\r\n              <AddIcon style={{ color: 'green' }} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog> */}\r\n\r\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Edit Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n        <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '3px' }}>\r\n            <TextField\r\n              label=\"Attribute Name\"\r\n              value=\"Group ID\"\r\n              // disabled\r\n              style={{ marginRight: '10px', marginTop: '10px' }}\r\n            />\r\n            <TextField\r\n              label=\"Attribute Value\"\r\n              value={updatedGroupId}\r\n              onChange={(e) => setUpdatedGroupId(e.target.value)}\r\n              style={{ marginTop: '10px' }}\r\n            />\r\n          </div>\r\n          <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\r\n            <TextField\r\n              label=\"Attribute Name\"\r\n              value=\"Node ID\"\r\n              // disabled\r\n              style={{ marginRight: '10px', marginTop: '10px'}}\r\n            />\r\n            <TextField\r\n              label=\"Attribute Value\"\r\n              value={updatedEdgeNodeId}\r\n              onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\r\n              style={{ marginTop: '10px' }}\r\n            />\r\n          </div>\r\n          {updatedAttributes.map((attr, index) => (\r\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\r\n              <TextField\r\n                label=\"Attribute Name\"\r\n                value={attr.name}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\r\n                style={{ marginRight: '10px' }}\r\n              />\r\n              <TextField\r\n                label=\"Attribute Value\"\r\n                value={attr.value}\r\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\r\n              />\r\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\r\n                <DeleteIcon style={{ color: 'black', fontSize: 'medium' }} />\r\n              </IconButton>\r\n            </div>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid item xs={2}>\r\n            <IconButton onClick={handleAddFormData}>\r\n              <AddIcon style={{ color: 'green' }} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      \r\n      {/* Create form for Add Node Attribute */}\r\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Add Node Attribute</DialogTitle>\r\n        <DialogContent>\r\n          {formDataList.map((formData, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Attribute Name\"\r\n                  value={formData.name}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  label=\"Attribute Value\"\r\n                  value={formData.value}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                {index > 0 && (\r\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                {index === formDataList.length - 1 && (\r\n                  <IconButton onClick={handleAddFormData}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      {/* Update form for Mqtt */}\r\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\r\n        <DialogTitle>Update Mqtt</DialogTitle>\r\n        {errorMessage && (\r\n          <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n        )}\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Broker Host\"\r\n            value={updatedBrokerHost}\r\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\r\n            style={{ marginBottom: '16px', marginTop: '5px', marginRight: '10px' }}\r\n          />\r\n          <TextField\r\n            label=\"Broker Port\"\r\n            value={updatedBrokerPort}\r\n            style={{ marginBottom: '16px', marginTop: '5px' }}\r\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\r\n          />\r\n          {/* <TextField\r\n            label=\"Qos\"\r\n            select\r\n            value={updatedQos}\r\n            style={{ marginBottom: '16px' }}\r\n            onChange={(e) => setUpdatedQos(e.target.value)}\r\n            fullWidth\r\n          >\r\n            {qosOptions.map((option) => (\r\n              <MenuItem key={option} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField> */}\r\n          <TextField\r\n            label=\"Client ID\"\r\n            value={updatedClientId}\r\n            onChange={(e) => setUpdatedClientId(e.target.value)}\r\n            style={{ marginBottom: '16px', marginRight: '10px' }}\r\n          />\r\n          <TextField\r\n            label=\"Client Password\"\r\n            value={updatedClientPassword}\r\n            onChange={(e) => setUpdatedClientPassword(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\r\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default NodeParameterTable;"],"names":["NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedHostName","setUpdatedHostName","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","updatedClientId","setUpdatedClientId","updatedClientPassword","setUpdatedClientPassword","updatedQos","setUpdatedQos","qosOptions","setQosOptions","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","modbusValues","find","param","name","value","mqttValues","qos_options","error","console","fetchData","_jsx","children","spbParameter","nodeAttributes","mqtt","uniqueBaudrateList","Set","baudrate_options","uniqueWordLengthList","wordlength_options","uniqueParityList","parity_options","uniqueStopbitsList","stopbits_options","uniquePortList","port_options","uniqueMethodList","method_options","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","prevList","prevAttributes","handleUpdateInputChange","updatedAttribute","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","concat","statusText","catch","finally","disabled","variant","backgroundColor","handleStop","marginLeft","color","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","edge_node_id","group_id","EditIcon","fontSize","marginTop","flexDirection","flexWrap","slice","handleUpdateMqttFormOpen","broker_host","broker_port","qos","user","password","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","Dialog","open","DialogTitle","DialogContent","TextField","DialogActions","updatedData","spb_parameter","hostname","prevData","splice","handleRemoveAttribute","DeleteIcon","AddIcon","spbUpdatedData","nodeAttributeUpdatedData","node_attributes","spbResponse","nodeAttributeResponse","updatedNodeParameters","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes","isNaN","parseInt","parsedBrokerPort"],"sourceRoot":""}