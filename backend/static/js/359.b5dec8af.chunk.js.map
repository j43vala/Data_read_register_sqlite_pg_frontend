{"version":3,"file":"static/js/359.b5dec8af.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Remove.js","components/dashboard/NodeParameter.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport { Add as AddIcon, Remove as RemoveIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst NodeParameterTable = () => {\n  const [data, setData] = useState(null);\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\n  const [updatedAttributes, setUpdatedAttributes] = useState([]);\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\n  const [formDataList, setFormDataList] = useState([]);\n  const [selectedModbus, setSelectedModbus] = useState({\n    port: '',\n    method: '',\n    parity: '',\n    baudrate: '',\n    stopbits: '',\n    wordLength: '',\n  });\n\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isStopping, setIsStopping] = useState(false);\n  const [restartButtonClicked] = useState(false);\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setModbusSuccessMessage('');\n      setSPBSuccessMessage('');\n      setNodeAttributeSuccessMessage('');\n      setMqttSuccessMessage('');\n      setServiceStartSuccessMessage('');\n      setServiceStopSuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`/node-parameter/`);\n        const responseData = await response.json();\n        setData(responseData);\n\n        if (responseData.node_parameters) {\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\n          if (modbusValues) {\n            setSelectedModbus(modbusValues);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\n\n  const uniqueBaudrateList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options)];\n  const uniqueWordLengthList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options)];\n  const uniqueParityList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options)];\n  const uniqueStopbitsList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options)];\n  const uniquePortList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.port_options)];\n  const uniqueMethodList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.method_options)];\n\n  const handleUpdateSpbParameterFormOpen = () => {\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\n    setUpdatedGroupId(spbParameter?.group_id || '');\n    setUpdateSpbParameterFormOpen(true);\n  };\n\n  const handleAddNodeAttributeFormOpen = () => {\n    setFormDataList([{ name: '', value: '' }]);\n    setAddNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateNodeAttributeFormOpen = () => {\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\n    setUpdatedAttributes(initialUpdatedAttributes);\n    setUpdateNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateMqttFormOpen = () => {\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\n    setUpdateMqttFormOpen(true);\n  };\n\n  const handleUpdateFormClose = () => {\n    setUpdateSpbParameterFormOpen(false);\n    setAddNodeAttributeFormOpen(false);\n    setUpdateNodeAttributeFormOpen(false);\n    setUpdateMqttFormOpen(false);\n  };\n\n  const handleUpdateSpbParameterSubmit = async () => {\n    const updatedData = {\n      spb_parameter: {\n        edge_node_id: updatedEdgeNodeId,\n        group_id: updatedGroupId,\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/3`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setSPBSuccessMessage('SPB Parameter updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'spb_parameter' ?\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleFormDataChange = (index, key, value) => {\n    const updatedFormDataList = [...formDataList];\n    updatedFormDataList[index][key] = value;\n    setFormDataList(updatedFormDataList);\n  };\n\n  const handleAddFormData = () => {\n    setFormDataList([...formDataList, { name: '', value: '' }]);\n  };\n\n  const handleRemoveFormData = (indexToRemove) => {\n    setFormDataList((prevFormDataList) => {\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\n    });\n  };\n\n\n  const handleUpdateInputChange = (index, updatedAttribute) => {\n    setUpdatedAttributes(prevAttributes => {\n      const updatedAttributesCopy = [...prevAttributes];\n      updatedAttributesCopy[index] = updatedAttribute;\n      return updatedAttributesCopy;\n    });\n  };\n\n  const handleRemoveAttribute = (index) => {\n    const updatedAttributesCopy = [...updatedAttributes];\n    updatedAttributesCopy.splice(index, 1);\n    setUpdatedAttributes(updatedAttributesCopy);\n  };\n\n  const handleAddNodeAttributeSubmit = async () => {\n    try {\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\n      const response = await fetch(`/node-parameter/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'node_attributes',\n          value: newAttributes,\n        }),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'node_attributes' ?\n              { ...param, value: [...(param.value || []), ...newAttributes] }\n              : param\n          )),\n        }));\n        setFormDataList([]);\n      } else {\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateNodeAttributeSubmit = async () => {\n    setData((prevData) => {\n      const updatedNodeParameters = prevData.node_parameters.map((param) => {\n        if (param.name === 'node_attributes') {\n          return {\n            ...param,\n            value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n          };\n        }\n        return param;\n      });\n\n      return {\n        ...prevData,\n        node_parameters: updatedNodeParameters,\n      };\n    });\n\n    const updatedData = {\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/4`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Node Attribute:  ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateMqttSubmit = async () => {\n    const updatedData = {\n      mqtt: {\n        broker_host: updatedBrokerHost,\n        broker_port: updatedBrokerPort,\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/2`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setMqttSuccessMessage('Mqtt updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'mqtt' ?\n              { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Mqtt: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleModbusChange = async (paramName, value) => {\n    try {\n      const response = await fetch(`/node-parameter/1`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          modbus: { ...selectedModbus, [paramName]: value },\n        }),\n      });\n\n      if (response.ok) {\n        setModbusSuccessMessage('Modbus updated successfully.');\n        setSelectedModbus((prevState) => ({\n          ...prevState,\n          [paramName]: value,\n        }));\n      } else {\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Modbus: ${error}`);\n    }\n  };\n\n  const handleRestart = () => {\n    setIsRestarting(true);\n\n    fetch(`/service/restart-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStartSuccessMessage('Service is restarting.');\n        } else {\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error restarting service: ${error}`);\n      })\n      .finally(() => {\n        setIsRestarting(false);\n      });\n  };\n\n  const handleStop = () => {\n    setIsStopping(true);\n\n    fetch(`/service/stop-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStopSuccessMessage('Service is stopped.');\n        } else {\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error stopping service: ${error}`);\n      })\n      .finally(() => {\n        setIsStopping(false);\n      });\n  };\n\n  // Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n      {ServiceStartSuccessMessage && (\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\n      )}\n      {ServiceStopSuccessMessage && (\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\n      )}\n      {NodeAttributeSuccessMessage && (\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\n      )}\n      {SPBSuccessMessage && (\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \n      )}\n      {MqttSuccessMessage && (\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\n      )}\n      {ModbusSuccessMessage && (\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\n      )}\n      {errorMessage && (\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n      )}\n      </Grid>\n      <Grid item xs={6}>\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" color=\"primary\">\n            Restart\n          </Button>\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\n            Stop\n          </Button>\n        </div>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\" >Node Attributes</Typography>\n            <div style={{ display: 'flex', gap: '0px' }}>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginRight: '0px' }}\n                onClick={handleUpdateNodeAttributeFormOpen}\n              >\n                <EditIcon style={{ fontSize : \"medium\" }}/>\n              </IconButton>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginLeft: '5px' }}\n                onClick={handleAddNodeAttributeFormOpen}\n              >\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          </div>\n          <div style={{ marginTop: '3px' }}>\n            {nodeAttributes && nodeAttributes.map(attr => (\n              <div key={attr.name}>\n                <Typography variant=\"body1\">\n                  <strong>{attr.name}:</strong> {attr.value}\n                </Typography>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">SPB Parameter</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateSpbParameterFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Edge Node Id:</strong> {spbParameter?.edge_node_id}\n          </div>\n          <div>\n            <strong>Group Id:</strong> {spbParameter?.group_id}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">MQTT</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateMqttFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\n          </div>\n          <div>\n            <strong>Broker Port:</strong> {mqtt?.broker_port}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\n                <FormControl fullWidth>\n                  <InputLabel>{label}</InputLabel>\n                  <Select\n                    value={selectedModbus[label.toLowerCase()]}\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\n                  >\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\n                      <MenuItem key={baudrate} value={baudrate}>\n                        {baudrate}\n                      </MenuItem>\n                    ))}\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\n                      <MenuItem key={wordLength} value={wordLength}>\n                        {wordLength}\n                      </MenuItem>\n                    ))}\n                    {label === 'Parity' && uniqueParityList.map(parity => (\n                      <MenuItem key={parity} value={parity}>\n                        {parity}\n                      </MenuItem>\n                    ))}\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\n                      <MenuItem key={stopbits} value={stopbits}>\n                        {stopbits}\n                      </MenuItem>\n                    ))}\n                    {label === 'Port' && uniquePortList.map(port => (\n                      <MenuItem key={port} value={port}>\n                        {port}\n                      </MenuItem>\n                    ))}\n                    {label === 'Method' && uniqueMethodList.map(method => (\n                      <MenuItem key={method} value={method}>\n                        {method}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      {/* Update form for SPB Parameter */}\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update SPB Parameter</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Edge Node ID\"\n            value={updatedEdgeNodeId}\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\n          />\n          <TextField\n            label=\"Group ID\"\n            value={updatedGroupId}\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit form for Node Attribute */}\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Edit Node Attribute</DialogTitle>\n        <DialogContent>\n          {updatedAttributes.map((attr, index) => (\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n              <TextField\n                label=\"Attribute Name\"\n                value={attr.name}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\n                style={{ marginRight: '10px', marginTop: '5px' }}\n              />\n              <TextField\n                label=\"Attribute Value\"\n                value={attr.value}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\n                style={{ marginTop: '5px' }}\n              />\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      {/* Create form for Add Node Attribute */}\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Add Node Attribute</DialogTitle>\n        <DialogContent>\n          {formDataList.map((formData, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Name\"\n                  value={formData.name}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Value\"\n                  value={formData.value}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                {index > 0 && (\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={2}>\n                {index === formDataList.length - 1 && (\n                  <IconButton onClick={handleAddFormData}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      {/* Update form for Mqtt */}\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update Mqtt</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Broker Host\"\n            value={updatedBrokerHost}\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Broker Port\"\n            value={updatedBrokerPort}\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n\nexport default NodeParameterTable;"],"names":["createSvgIcon","_jsx","d","NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","modbusValues","find","param","name","value","error","console","fetchData","children","spbParameter","nodeAttributes","mqtt","uniqueBaudrateList","Set","baudrate_options","uniqueWordLengthList","wordlength_options","uniqueParityList","parity_options","uniqueStopbitsList","stopbits_options","uniquePortList","port_options","uniqueMethodList","method_options","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","handleUpdateInputChange","updatedAttribute","prevAttributes","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","concat","statusText","catch","finally","disabled","variant","color","handleStop","marginLeft","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","EditIcon","fontSize","handleAddNodeAttributeFormOpen","AddIcon","marginTop","handleUpdateSpbParameterFormOpen","edge_node_id","group_id","handleUpdateMqttFormOpen","broker_host","broker_port","flexDirection","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","Dialog","open","DialogTitle","DialogContent","TextField","DialogActions","updatedData","spb_parameter","prevData","splice","handleRemoveAttribute","DeleteIcon","updatedNodeParameters","node_attributes","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes"],"sourceRoot":""}