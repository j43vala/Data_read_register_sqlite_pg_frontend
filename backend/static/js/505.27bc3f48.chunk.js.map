{"version":3,"file":"static/js/505.27bc3f48.chunk.js","mappings":"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","sources":["components/dashboard/DatabaseJson.js","components/dashboard/GetWifi.js","components/dashboard/Retention.js","views/Home.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\n// import IconButton from '@mui/material/IconButton';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport { Button } from '@mui/material';\r\nimport GetAppIcon from '@mui/icons-material/GetApp';\r\nimport PublishIcon from '@mui/icons-material/Publish';\r\n// import CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\n// import CloudDownloadIcon from '@mui/icons-material/CloudDownload';\r\n\r\nconst DataJson = () => {\r\n    // eslint-disable-next-line\r\n    const [fileData, setFileData] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n\r\n    const handleExport = async () => {\r\n        try {\r\n            // Fetch data from the service\r\n            const response = await fetch('/service/get-json');\r\n            const data = await response.json();\r\n    \r\n            // Extract config_data from the response\r\n            const { config_data } = data;\r\n    \r\n            // Prompt user for a new file name\r\n            const newFileName = prompt('Enter a new file name:', 'DatabaseConfig');\r\n            if (!newFileName) {\r\n                // User canceled or entered an empty name\r\n                return;\r\n            }\r\n    \r\n            // Construct the new file name\r\n            const fileName = newFileName.endsWith('.json') ? newFileName : `${newFileName}.json`;\r\n    \r\n            // Stringify the data with proper formatting\r\n            const fileContent = JSON.stringify(config_data, null, 2);\r\n    \r\n            // Create a Blob with the JSON content\r\n            const blob = new Blob([fileContent], { type: 'application/json' });\r\n    \r\n            // Create a download URL for the Blob\r\n            const url = URL.createObjectURL(blob);\r\n    \r\n            // Trigger download using an anchor tag\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = fileName;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        } catch (error) {\r\n            console.error('Error fetching or processing file:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const handleImport = async (event) => {\r\n        try {\r\n            const file = event.target.files[0];\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n\r\n            const response = await fetch('/service/upload-json', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            console.log('File uploaded successfully:', response);\r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        }\r\n    };\r\n\r\n  return (\r\n      <Container>\r\n        <Box position=\"absolute\" top={0} right={0} padding=\"10px\" marginRight=\"270px\" display=\"flex\">\r\n\r\n            {/* Import Button */}\r\n            <input\r\n              type=\"file\"\r\n              accept=\".json\"\r\n              style={{ display: 'none' }}\r\n              onChange={handleImport}\r\n              ref={fileInputRef}\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                startIcon={<GetAppIcon />}\r\n                style={{ marginRight: '10px', backgroundColor: 'rgb(204, 85, 0)' }}\r\n                onClick={() => fileInputRef.current.click()}\r\n            >\r\n                {/* <CloudDownloadIcon /> */}\r\n                Import\r\n            </Button>\r\n\r\n            {/* Export Button */}\r\n            <Button\r\n                variant=\"contained\"\r\n                startIcon={<PublishIcon />}\r\n                style={{ backgroundColor: 'rgb(204, 85, 0)' }}\r\n                onClick={handleExport}\r\n            >\r\n                {/* <CloudUploadIcon /> */}\r\n                Export\r\n            </Button>\r\n        </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DataJson;\r\n","// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   Container,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogActions,\r\n//   Button,\r\n//   IconButton,\r\n//   TextField,\r\n//   MenuItem,\r\n//   FormControl,\r\n//   InputLabel,\r\n//   Select,\r\n// } from '@mui/material';\r\n// import WifiIcon from '@mui/icons-material/Wifi';\r\n\r\n// const WifiList = () => {\r\n//   const [wifiList, setWifiList] = useState([]);\r\n//   const [selectedNetwork, setSelectedNetwork] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [isDialogOpen, setDialogOpen] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetch('/service/get-wifi-lists')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         if (Array.isArray(data.ssids)) {\r\n//           setWifiList(data.ssids);\r\n//         } else {\r\n//           console.error('Invalid data format:', data);\r\n//         }\r\n//       })\r\n//       .catch(error => console.error('Error fetching data:', error));\r\n//   }, []);\r\n\r\n//   const handleDialogOpen = () => {\r\n//     setDialogOpen(true);\r\n//   };\r\n\r\n//   const handleDialogClose = () => {\r\n//     setDialogOpen(false);\r\n//   };\r\n\r\n//   const handleNetworkChange = (event) => {\r\n//     setSelectedNetwork(event.target.value);\r\n//   };\r\n\r\n//   const handlePasswordChange = (event) => {\r\n//     setPassword(event.target.value);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     // Implement the logic to handle form submission (e.g., connect to the selected Wi-Fi network)\r\n//     console.log('Selected Network:', selectedNetwork);\r\n//     console.log('Password:', password);\r\n//     // Add your logic here to connect to the selected Wi-Fi network\r\n//     // You can use the values of selectedNetwork and password for further processing\r\n//     // For simplicity, this example just logs the values to the console\r\n//     handleDialogClose(); // Close the dialog after submission\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       <div style={{ position: 'absolute', top: 0, right: 0, padding: '10px', marginRight: '225px'}}>\r\n//         <IconButton onClick={handleDialogOpen} color=\"primary\">\r\n//           <WifiIcon />\r\n//         </IconButton>\r\n//       </div>\r\n\r\n//       <Dialog open={isDialogOpen} onClose={handleDialogClose}>\r\n//         <DialogTitle>Wi-Fi</DialogTitle>\r\n//         <DialogContent>\r\n//           <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//             <FormControl>\r\n//               <InputLabel id=\"network-select-label\" style={{ marginTop: '10px' }}>Available-Network</InputLabel>\r\n//               <Select\r\n//                 labelId=\"network-select-label\"\r\n//                 id=\"network-select\"\r\n//                 value={selectedNetwork}\r\n//                 onChange={handleNetworkChange}\r\n//                 label=\"Available-Network\"\r\n//                 style={{ marginTop: '10px', width: '200px' }}\r\n//               >\r\n//                 {wifiList.map((ssid, index) => (\r\n//                   <MenuItem key={index} value={ssid}>\r\n//                     {ssid}\r\n//                   </MenuItem>\r\n//                 ))}\r\n//               </Select>\r\n//             </FormControl>\r\n//             <TextField\r\n//               margin=\"normal\"\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               value={password}\r\n//               onChange={handlePasswordChange}\r\n//               style={{ marginTop: '10px', width: '200px' }}\r\n//             />\r\n//           </div>\r\n//         </DialogContent>\r\n//         <DialogActions>\r\n//           <Button onClick={handleDialogClose} color=\"primary\">\r\n//             Cancel\r\n//           </Button>\r\n//           <Button onClick={handleSubmit} color=\"primary\">\r\n//             Connect\r\n//           </Button>\r\n//         </DialogActions>\r\n//       </Dialog>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default WifiList;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  IconButton,\r\n  TextField,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n} from '@mui/material';\r\nimport WifiIcon from '@mui/icons-material/Wifi';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\r\n\r\n\r\nconst WifiList = () => {\r\n  const [wifiList, setWifiList] = useState([]);\r\n  const [selectedNetwork, setSelectedNetwork] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false); // New state for password visibility\r\n  const [isDialogOpen, setDialogOpen] = useState(false);\r\n  const [connectedNetwork, setConnectedNetwork] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('/service/get-wifi-lists')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (Array.isArray(data.ssids)) {\r\n          setWifiList(data.ssids);\r\n        } else {\r\n          console.error('Invalid data format:', data);\r\n        }\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n\r\n    // Fetch connected network info\r\n    fetch('/service/get-connected-network')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.connectedNetwork) {\r\n          setConnectedNetwork(data.connectedNetwork);\r\n        }\r\n        // console.log('data: ', data.connectedNetwork);\r\n      })\r\n      .catch(error => console.error('Error fetching connected network data:', error));\r\n    }, []);\r\n\r\n  const handleDialogOpen = () => {\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setSelectedNetwork('');\r\n    setPassword('');\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const handleNetworkChange = (event) => {\r\n    setSelectedNetwork(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const handleTogglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Check if both ssid and password are provided before making the request\r\n    if (!selectedNetwork || !password) {\r\n      console.error('SSID and password are required.');\r\n      return;\r\n    }\r\n  \r\n    // Create JSON object\r\n    const jsonData = {\r\n      ssid: selectedNetwork,\r\n      password: password,\r\n    };\r\n  \r\n    // Make a POST request to your Flask API endpoint\r\n    fetch('/service/connect-network', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(jsonData),\r\n    })\r\n      .then(response => response.text())\r\n      .then(data => {\r\n        // console.log('Server response:', data);\r\n        // Add any additional logic based on the server response\r\n      })\r\n      .catch(error => {\r\n        console.error('Error connecting to the network:', error);\r\n      });\r\n  \r\n    handleDialogClose(); // Close the dialog after submission\r\n  };\r\n  \r\n\r\n  return (\r\n    <Container>\r\n      <div style={{ position: 'absolute', top: 0, right: 0, padding: '10px', marginRight: '225px'}}>\r\n        <IconButton onClick={handleDialogOpen}>\r\n          <WifiIcon style={{ color: 'rgb(33, 47, 61)' }} />\r\n        </IconButton>\r\n      </div>\r\n\r\n      <Dialog open={isDialogOpen} onClose={handleDialogClose}>\r\n        <DialogTitle>Wi-Fi</DialogTitle>\r\n        <DialogContent>\r\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            <FormControl>\r\n              <InputLabel id=\"network-select-label\" style={{ marginTop: '10px' }}>Available-Network</InputLabel>\r\n              <Select\r\n                labelId=\"network-select-label\"\r\n                id=\"network-select\"\r\n                value={selectedNetwork}\r\n                onChange={handleNetworkChange}\r\n                label=\"Available-Network\"\r\n                style={{ marginTop: '10px', width: '200px' }}\r\n              >\r\n                {wifiList.map((ssid, index) => (\r\n                  <MenuItem key={index} value={ssid}>\r\n                    {ssid} {connectedNetwork === ssid && '✔️'}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <TextField\r\n              margin=\"normal\"\r\n              label=\"Password\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              value={password}\r\n              onChange={handlePasswordChange}\r\n              style={{ marginTop: '10px', width: '200px' }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={handleTogglePasswordVisibility}>\r\n                      {showPassword ? <VisibilityOffIcon fontSize=\"small\"/> : <VisibilityIcon fontSize=\"small\"/>}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSubmit} color=\"primary\">\r\n            Connect\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WifiList;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Alert,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\n\r\n// const baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst RetentionParameterForm= () => {\r\n    const [data, setData] = useState(null);\r\n    const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\r\n    const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\r\n    const [PublishTimeSuccessMessage, setPublishTimeSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [retentionParameters, setRetentionParameters] = useState({\r\n        checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\r\n        successRetention: { days: '', hours: '', minutes: '', seconds: '' },\r\n        failureRetention: { days: '', hours: '', minutes: '', seconds: '' }\r\n    });\r\n    const [valuesChanged, setValuesChanged] = useState(false);\r\n    const [timeDelayParameters, setTimeDelayParameters] = useState({\r\n        minutes: '',\r\n        seconds: ''\r\n    });\r\n    const [publishTimeParameters, setPublishTimeParameters] = useState({\r\n      days: '',\r\n      hours: '',\r\n      minutes: '',\r\n      seconds: ''\r\n    });\r\n    // const [isFormValid, setIsFormValid] = useState(false);\r\n    // Separate state for form validity and submit button for Time Delay\r\n    const [isTimeDelayFormValid, setIsTimeDelayFormValid] = useState(false);\r\n\r\n    // Separate state for form validity and submit button for Publish Time\r\n    const [isPublishTimeFormValid, setIsPublishTimeFormValid] = useState(false);\r\n    const [isExpandedRetention, setIsExpandedRetention] = useState(true);\r\n    const [isExpandedDelay, setIsExpandedDelay] = useState(true);\r\n    const [isExpandedPublish, setIsExpandedPublish] = useState(true);\r\n\r\n    const clearMessagesAfterDelay = () => {\r\n        setTimeout(() => {\r\n        setRetentionParameterSuccessMessage('');\r\n        setTimeDelaySuccessMessage('');\r\n        setPublishTimeSuccessMessage('');\r\n        setErrorMessage('');\r\n        setSuccessMessage('');\r\n    }, 5000);\r\n    };\r\n\r\n    useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n    }, [RetentionParameterSuccessMessage, TimeDelaySuccessMessage, PublishTimeSuccessMessage, errorMessage, successMessage]);\r\n\r\n    useEffect(() => {\r\n    const fetchData = async () => {\r\n        try {\r\n        const response = await fetch(`/node-parameter/`);\r\n        const responseData = await response.json();\r\n        setData(responseData);\r\n        // console.log('responseData: ', responseData);\r\n    \r\n        // Initialize selectedModbus state with modbus values\r\n        if (responseData.node_parameters) {\r\n    \r\n            // Initialize retention parameters\r\n            const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\r\n            if (retentionValues) {\r\n            setRetentionParameters(retentionValues);\r\n            }\r\n\r\n            const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\r\n            if (timeDelayValues) {\r\n            setTimeDelayParameters(timeDelayValues);\r\n            }\r\n\r\n            const publishTImeValues = responseData.node_parameters.find(param => param.name === 'publish_time')?.value;\r\n            if (publishTImeValues) {\r\n            setPublishTimeParameters(publishTImeValues);\r\n            }\r\n        }\r\n        } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n    }, []);\r\n    \r\n    \r\n\r\n    if (!data) {\r\n    return <p>Loading...</p>;\r\n    }\r\n\r\n\r\n\r\n// Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message}) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message}) => (\r\n    <Alert severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  );\r\n  \r\n  const handleRetentionParameterChange = (param, unit, value) => {\r\n    // Parse the input value as an integer\r\n    const integerValue = parseInt(value, 10);\r\n  \r\n    // Check if the parsed value is a valid integer\r\n    if (!isNaN(integerValue)) {\r\n      setRetentionParameters((prevParameters) => ({\r\n        ...prevParameters,\r\n        [param]: { ...prevParameters[param], [unit]: integerValue },\r\n      }));\r\n    }\r\n    // Set valuesChanged to true when any value changes\r\n    setValuesChanged(true);\r\n  };\r\n  \r\n  \r\n  const handleRetentionParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/5`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          retention_parameter: retentionParameters,\r\n        }),\r\n      });\r\n      // After successful submission, reset valuesChanged to false\r\n      setValuesChanged(false);\r\n\r\n      if (response.ok) {\r\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\r\n      } else {\r\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    // Replace the initialValues with your actual initial values\r\n    const initialValues = {\r\n      check_frequency: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n      success_retention: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n      failure_retention: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n    };\r\n  \r\n    setRetentionParameters(initialValues);\r\n    setValuesChanged(false);\r\n  };\r\n  \r\n\r\n  const handleTimeDelayParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/6`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          time_delay: timeDelayParameters,\r\n        }),\r\n      });\r\n      // Assuming the submission is successful, disable the submit button\r\n      setIsTimeDelayFormValid(false);\r\n\r\n      if (response.ok) {\r\n        // Display success message or handle as needed\r\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\r\n      } else {\r\n        // Display error message or handle as needed\r\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      // Display error message or handle as needed\r\n      setErrorMessage(`Error updating Time Delay: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handlePublishTimeParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/7`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          publish_time: publishTimeParameters,\r\n        }),\r\n      });\r\n      // Assuming the submission is successful, disable the submit button\r\n      setIsPublishTimeFormValid(false);\r\n\r\n      if (response.ok) {\r\n        // Display success message or handle as needed\r\n        setPublishTimeSuccessMessage('Publish Time updated successfully.');\r\n      } else {\r\n        // Display error message or handle as needed\r\n        setErrorMessage(`Failed to update Publish Time: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      // Display error message or handle as needed\r\n      setErrorMessage(`Error updating Publish Time: ${error}`);\r\n    }\r\n  };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12}>\r\n          {RetentionParameterSuccessMessage && (\r\n            <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\r\n          )}\r\n          {TimeDelaySuccessMessage && (\r\n            <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\r\n          )}\r\n          {PublishTimeSuccessMessage && (\r\n            <SuccessMessage message={PublishTimeSuccessMessage} onClose={() => setPublishTimeSuccessMessage('')}/>\r\n          )}\r\n          {errorMessage && (\r\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n          )}\r\n          </Grid>\r\n    \r\n          {/* <Grid item xs={4}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">Retention Parameters</Typography>\r\n              <form>\r\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n                  <div key={index} style={{ marginBottom: '20px' }}>\r\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                      <TextField\r\n                        key={unitIndex}\r\n                        label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                        type=\"number\"\r\n                        value={retentionParameters[param][unit]}\r\n                        onChange={(e) => {\r\n                          let enteredValue = parseInt(e.target.value, 10);\r\n                          const maxValue = unit === 'days' ? 31 : unit === 'hours' ? 24 : 60;\r\n\r\n                          // If the entered value is greater than the maximum, set it to the maximum\r\n                          if (enteredValue > maxValue) {\r\n                            enteredValue = maxValue;\r\n                          }\r\n\r\n                          handleRetentionParameterChange(param, unit, enteredValue);\r\n                        }}\r\n                        fullWidth\r\n                        style={{ marginRight: '10px' }}\r\n                        inputProps={{\r\n                          min: 0,\r\n                          max: unit === 'days' ? 31 : unit === 'hours' ? 24 : 60,\r\n                        }}\r\n                      />\r\n                    ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    onClick={handleReset}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginRight: '10px' }}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleRetentionParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    disabled={!valuesChanged} // Disable if values have not changed\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </Paper>\r\n          </Grid> */}\r\n\r\n          {/* <Grid item xs={4}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">Retention Parameters</Typography>\r\n              <form>\r\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n                  <div key={index} style={{ marginBottom: '20px' }}>\r\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                      {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                        <TextField\r\n                          key={unitIndex}\r\n                          label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                          type=\"number\"\r\n                          value={retentionParameters[param][unit]}\r\n                          onChange={(e) => {\r\n                            let enteredValue = parseInt(e.target.value, 10);\r\n                            const maxValue = unit === 'hours' ? 24 : unit === 'minutes' || unit === 'seconds' ? 60 : undefined;\r\n\r\n                            // If the entered value is greater than the maximum, set it to the maximum\r\n                            if (maxValue !== undefined && enteredValue > maxValue) {\r\n                              enteredValue = maxValue;\r\n                            }\r\n\r\n                            handleRetentionParameterChange(param, unit, enteredValue);\r\n                          }}\r\n                          fullWidth\r\n                          style={{ marginRight: '10px' }}\r\n                          inputProps={{\r\n                            min: 0,\r\n                            max: unit === 'minutes' || unit === 'seconds' ? 60 : undefined,\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    onClick={handleReset}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginRight: '10px' }}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleRetentionParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    disabled={!valuesChanged} // Disable if values have not changed\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </Paper>\r\n          </Grid> */}\r\n\r\n          <Grid item xs={4}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">\r\n                Retention Parameters\r\n                <IconButton onClick={() => setIsExpandedRetention(!isExpandedRetention)} style={{ marginLeft: '125px' }}>\r\n                  {isExpandedRetention ? <KeyboardArrowDownIcon /> : <KeyboardArrowUpIcon />}\r\n                </IconButton>\r\n              </Typography>\r\n              {isExpandedRetention && (\r\n                <form>\r\n                  {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n                    <div key={index} style={{ marginBottom: '20px' }}>\r\n                      <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                          <TextField\r\n                            key={unitIndex}\r\n                            label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                            type=\"number\"\r\n                            value={retentionParameters[param][unit]}\r\n                            onChange={(e) => {\r\n                              let enteredValue = parseInt(e.target.value, 10);\r\n                              const maxValue = unit === 'hours' ? 24 : unit === 'minutes' || unit === 'seconds' ? 60 : undefined;\r\n\r\n                              if (maxValue !== undefined && enteredValue > maxValue) {\r\n                                enteredValue = maxValue;\r\n                              }\r\n\r\n                              handleRetentionParameterChange(param, unit, enteredValue);\r\n                            }}\r\n                            fullWidth\r\n                            style={{ marginRight: '10px' }}\r\n                            inputProps={{\r\n                              min: 0,\r\n                              max: unit === 'minutes' || unit === 'seconds' ? 60 : undefined,\r\n                            }}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                    <Button\r\n                      onClick={handleReset}\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      style={{ marginRight: '10px' }}\r\n                    >\r\n                      Reset\r\n                    </Button>\r\n                    <Button\r\n                      onClick={handleRetentionParameterSubmit}\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      disabled={!valuesChanged}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* <Grid item xs={3}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}>\r\n              <Typography variant=\"h6\">Time Delay</Typography>\r\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                <TextField\r\n                  label=\"Minutes\"\r\n                  type=\"number\"\r\n                  value={timeDelayParameters.minutes}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setTimeDelayParameters((prev) => ({\r\n                      ...prev,\r\n                      minutes: newValue,\r\n                    }));\r\n                    setIsTimeDelayFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Seconds\"\r\n                  type=\"number\"\r\n                  value={timeDelayParameters.seconds}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setTimeDelayParameters((prev) => ({\r\n                      ...prev,\r\n                      seconds: newValue,\r\n                    }));\r\n                    setIsTimeDelayFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                </div>\r\n                <Button\r\n                  onClick={handleTimeDelayParameterSubmit}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ marginBottom: '15px' }}\r\n                  disabled={!isTimeDelayFormValid} // Disable the button when the form is not valid\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Paper>\r\n          </Grid> */}\r\n\r\n          <Grid item xs={3}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">\r\n                Time Delay\r\n                <IconButton onClick={() => setIsExpandedDelay(!isExpandedDelay)} style={{ marginLeft: '125px' }}>\r\n                  {isExpandedDelay ? <KeyboardArrowDownIcon /> : <KeyboardArrowUpIcon />}\r\n                </IconButton>\r\n              </Typography>\r\n\r\n              {isExpandedDelay && (\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                    <TextField\r\n                      label=\"Minutes\"\r\n                      type=\"number\"\r\n                      value={timeDelayParameters.minutes}\r\n                      style={{ marginRight: '5px' }}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 60\r\n                        newValue = Math.min(newValue, 60);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setTimeDelayParameters((prev) => ({\r\n                          ...prev,\r\n                          minutes: newValue,\r\n                        }));\r\n                        setIsTimeDelayFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 60,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Seconds\"\r\n                      type=\"number\"\r\n                      value={timeDelayParameters.seconds}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 60\r\n                        newValue = Math.min(newValue, 60);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setTimeDelayParameters((prev) => ({\r\n                          ...prev,\r\n                          seconds: newValue,\r\n                        }));\r\n                        setIsTimeDelayFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 60,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Button\r\n                    onClick={handleTimeDelayParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginBottom: '15px' }}\r\n                    disabled={!isTimeDelayFormValid} // Disable the button when the form is not valid\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* <Grid item xs={5}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}>\r\n              <Typography variant=\"h6\"> Publish Time</Typography>\r\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                <TextField\r\n                  label=\"Days\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.days}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 31);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      days: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 31,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Hours\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.hours}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 24);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      hours: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 24,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Minutes\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.minutes}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      minutes: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Seconds\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.seconds}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      seconds: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                </div>\r\n                <Button\r\n                  onClick={handlePublishTimeParameterSubmit}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ marginBottom: '15px' }}\r\n                  disabled={!isPublishTimeFormValid} // Disable the button when the form is not valid\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Paper>\r\n          </Grid> */}\r\n\r\n          <Grid item xs={5}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">\r\n                Publish Time\r\n                <IconButton onClick={() => setIsExpandedPublish(!isExpandedPublish)} style={{ marginLeft: '300px' }}>\r\n                  {isExpandedPublish ? <KeyboardArrowDownIcon /> : <KeyboardArrowUpIcon />}\r\n                </IconButton>\r\n              </Typography>\r\n\r\n              {isExpandedPublish && (\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                  <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                    <TextField\r\n                      label=\"Days\"\r\n                      type=\"number\"\r\n                      value={publishTimeParameters.days}\r\n                      style={{ marginRight: '5px' }}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 31\r\n                        newValue = Math.min(newValue, 31);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setPublishTimeParameters((prev) => ({\r\n                          ...prev,\r\n                          days: newValue,\r\n                        }));\r\n                        setIsPublishTimeFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 31,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Hours\"\r\n                      type=\"number\"\r\n                      value={publishTimeParameters.hours}\r\n                      style={{ marginRight: '5px' }}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 24\r\n                        newValue = Math.min(newValue, 24);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setPublishTimeParameters((prev) => ({\r\n                          ...prev,\r\n                          hours: newValue,\r\n                        }));\r\n                        setIsPublishTimeFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 24,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Minutes\"\r\n                      type=\"number\"\r\n                      value={publishTimeParameters.minutes}\r\n                      style={{ marginRight: '5px' }}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 60\r\n                        newValue = Math.min(newValue, 60);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setPublishTimeParameters((prev) => ({\r\n                          ...prev,\r\n                          minutes: newValue,\r\n                        }));\r\n                        setIsPublishTimeFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 60,\r\n                      }}\r\n                    />\r\n                    <TextField\r\n                      label=\"Seconds\"\r\n                      type=\"number\"\r\n                      value={publishTimeParameters.seconds}\r\n                      onChange={(e) => {\r\n                        let newValue = parseInt(e.target.value) || 0;\r\n                        // Set upper limit to 60\r\n                        newValue = Math.min(newValue, 60);\r\n                        newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n\r\n                        setPublishTimeParameters((prev) => ({\r\n                          ...prev,\r\n                          seconds: newValue,\r\n                        }));\r\n                        setIsPublishTimeFormValid(true);\r\n                      }}\r\n                      inputProps={{\r\n                        step: 1,\r\n                        min: 0,\r\n                        max: 60,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Button\r\n                    onClick={handlePublishTimeParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginBottom: '15px' }}\r\n                    disabled={!isPublishTimeFormValid} // Disable the button when the form is not valid\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>  \r\n    );\r\n}\r\n    \r\nexport default RetentionParameterForm;","import { Col, Row } from \"reactstrap\";\r\n// import SalesChart from \"../components/dashboard/SalesChart\";\r\n// import Feeds from \"../components/dashboard/Feeds\";\r\n// import TopCards from \"../components/dashboard/TopCards\";\r\n// import Blog from \"../components/dashboard/Blog\";\r\nimport DeviceRegisterTable from \"../components/dashboard/GetDevice\";\r\nimport NodeParameterTable from \"../components/dashboard/NodeParameter\"\r\nimport bg1 from \"../assets/images/bg/bg1.jpg\";\r\nimport bg2 from \"../assets/images/bg/bg2.jpg\";\r\nimport bg3 from \"../assets/images/bg/bg3.jpg\";\r\nimport bg4 from \"../assets/images/bg/bg4.jpg\";\r\nimport RetentionParameterForm from \"../components/dashboard/Retention\";\r\nimport WifiList from \"../components/dashboard/GetWifi\"\r\nimport DataJson from \"../components/dashboard/DatabaseJson\";\r\n\r\n// eslint-disable-next-line\r\nconst BlogData = [\r\n  {\r\n    image: bg1,\r\n    title: \"This is simple blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg2,\r\n    title: \"Lets be simple blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg3,\r\n    title: \"Don't Lamp blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg4,\r\n    title: \"Simple is beautiful\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n];\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      {/* <p>{config}</p> */}\r\n      {/***Top Cards***/}\r\n      {/* <Row>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-success text-success\"\r\n            title=\"Profit\"\r\n            subtitle=\"Yearly Earning\"\r\n            earning=\"$21k\"\r\n            icon=\"bi bi-wallet\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-danger text-danger\"\r\n            title=\"Refunds\"\r\n            subtitle=\"Refund given\"\r\n            earning=\"$1k\"\r\n            icon=\"bi bi-coin\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-warning text-warning\"\r\n            title=\"New Project\"\r\n            subtitle=\"Yearly Project\"\r\n            earning=\"456\"\r\n            icon=\"bi bi-basket3\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-info text-into\"\r\n            title=\"Sales\"\r\n            subtitle=\"Weekly Sales\"\r\n            earning=\"210\"\r\n            icon=\"bi bi-bag\"\r\n          />\r\n        </Col>\r\n      </Row> */}\r\n      {/***Sales & Feed***/}\r\n      <Row>\r\n        <Col xxl=\"12\">\r\n          <DataJson />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <NodeParameterTable />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <DeviceRegisterTable />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <RetentionParameterForm />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <WifiList />\r\n        </Col>\r\n      </Row>\r\n      {/***Table ***/}\r\n      {/* <Row>\r\n        <Col lg=\"7\" xxl=\"8\" md=\"12\">\r\n          <DeviceRegisterTable />\r\n        </Col>\r\n        <Col md=\"12\" lg=\"5\" xxl=\"4\">\r\n          <Feeds />\r\n        </Col>\r\n      </Row> */}\r\n      \r\n      {/***Blog Cards***/}\r\n      {/* <Row>\r\n        {BlogData.map((blg, index) => (\r\n          <Col sm=\"6\" lg=\"6\" xl=\"3\" key={index}>\r\n            <Blog\r\n              image={blg.image}\r\n              title={blg.title}\r\n              subtitle={blg.subtitle}\r\n              text={blg.description}\r\n              color={blg.btnbg}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["DataJson","fileData","setFileData","useState","fileInputRef","useRef","_jsx","Container","children","_jsxs","Box","position","top","right","padding","marginRight","display","type","accept","style","onChange","async","file","event","target","files","formData","FormData","append","response","fetch","method","body","console","log","error","ref","Button","variant","startIcon","GetAppIcon","backgroundColor","onClick","current","click","PublishIcon","data","json","config_data","newFileName","prompt","fileName","endsWith","concat","fileContent","JSON","stringify","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","removeChild","WifiList","wifiList","setWifiList","selectedNetwork","setSelectedNetwork","password","setPassword","showPassword","setShowPassword","isDialogOpen","setDialogOpen","connectedNetwork","setConnectedNetwork","useEffect","then","Array","isArray","ssids","catch","handleDialogClose","IconButton","handleDialogOpen","WifiIcon","color","Dialog","open","onClose","DialogTitle","DialogContent","flexDirection","alignItems","FormControl","InputLabel","id","marginTop","Select","labelId","value","label","width","map","ssid","index","MenuItem","TextField","margin","InputProps","endAdornment","InputAdornment","handleTogglePasswordVisibility","VisibilityOffIcon","fontSize","VisibilityIcon","DialogActions","handleSubmit","jsonData","headers","text","RetentionParameterForm","setData","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","PublishTimeSuccessMessage","setPublishTimeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","valuesChanged","setValuesChanged","timeDelayParameters","setTimeDelayParameters","publishTimeParameters","setPublishTimeParameters","isTimeDelayFormValid","setIsTimeDelayFormValid","isPublishTimeFormValid","setIsPublishTimeFormValid","isExpandedRetention","setIsExpandedRetention","isExpandedDelay","setIsExpandedDelay","isExpandedPublish","setIsExpandedPublish","setTimeout","responseData","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","retentionValues","find","param","name","timeDelayValues","publishTImeValues","fetchData","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","Grid","container","spacing","item","xs","Paper","marginBottom","Typography","marginLeft","KeyboardArrowDownIcon","KeyboardArrowUpIcon","replace","unit","unitIndex","charAt","toUpperCase","slice","e","enteredValue","parseInt","maxValue","undefined","handleRetentionParameterChange","integerValue","isNaN","prevParameters","fullWidth","inputProps","min","max","justifyContent","handleReset","check_frequency","success_retention","failure_retention","retention_parameter","ok","statusText","disabled","newValue","Math","prev","step","time_delay","publish_time","Home","Row","Col","xxl","NodeParameterTable","DeviceRegisterTable"],"sourceRoot":""}