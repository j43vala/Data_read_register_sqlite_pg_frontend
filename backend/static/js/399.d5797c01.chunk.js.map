{"version":3,"file":"static/js/399.d5797c01.chunk.js","mappings":"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","sources":["components/dashboard/GetDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Grid,\r\n  Collapse,\r\n} from '@mui/material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\n// import CloseIcon from '@mui/icons-material/Close';\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  headerText: {\r\n    fontFamily: 'Arial, sans-serif',\r\n    fontSize: '18px',\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  buttonGroup: {\r\n    marginLeft: 'auto',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  addButton: {\r\n    marginRight: theme.spacing(2),\r\n    backgroundColor: theme.palette.success.main,\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.success.dark,\r\n    },\r\n  },\r\n  deleteButton: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}));\r\n\r\n// const baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst DeviceParameterTable = () => {\r\n  const classes = useStyles();\r\n  const [devices, setDevices] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState('');\r\n  const [parameters, setParameters] = useState([]);\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [selectedParameter, setSelectedParameter] = useState(null);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);\r\n  const [updatedFunctionCode, setUpdatedFunctionCode] = useState('');\r\n  const [updatedAddress, setUpdatedAddress] = useState('');\r\n  const [updatedParameterName, setUpdatedParameterName] = useState('');\r\n  const [updatedDataType, setUpdatedDataType] = useState('');\r\n  const [updatedThreshold, setUpdatedThreshold] = useState('');\r\n  const [updatedAggregationType, setUpdatedAggregationType] = useState('');\r\n  const [updatedName, setUpdatedName] = useState('');\r\n  const [updatedValue, setUpdatedValue] = useState('');\r\n  const [deviceName, setDeviceName] = useState('');\r\n  const [slaveId, setSlaveId] = useState('');\r\n  const [deviceSuccessMessage, setDeviceSuccessMessage] = useState('');\r\n  const [parameterSuccessMessage, setParameterSuccessMessage] = useState('');\r\n  const [attributeSuccessMessage, setAttributeSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [isAddDeviceFormOpen, setIsAddDeviceFormOpen] = useState(false);\r\n  const [isAddParameterFormOpen, setIsAddParameterFormOpen] = useState(false);\r\n  const [isAddAttributeFormOpen, setIsAddAttributeFormOpen] = useState(false);\r\n  // eslint-disable-next-line\r\n  const [parameterToDelete, setParameterToDelete] = useState(null);\r\n  // eslint-disable-next-line\r\n  const [attributeToDelete, setAttributeToDelete] = useState(null);\r\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\r\n  const [isDeleteAttributeConfirmationOpen, setIsDeleteAttributeConfirmationOpen] = useState(false);\r\n  const [selectedDeviceName, setSelectedDeviceName] = useState('');\r\n  // eslint-disable-next-line\r\n  const [selectedSlaveId, setSelectedSlaveId] = useState('');\r\n  const [updateDeviceFormOpen, setUpdateDeviceFormOpen] = useState(false);\r\n  const [updatedDeviceName, setUpdatedDeviceName] = useState('');\r\n  const [updatedSlaveId, setUpdatedSlaveId] = useState('');\r\n  const [isDeleteDeviceConfirmationOpen, setIsDeleteDeviceConfirmationOpen] = useState(false);\r\n  const [parameterFields, setParameterFields] = useState([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\r\n  const [attributeFields, setAttributeFields] = useState([{ name: '', value: ''}]);\r\n  const [selectedAttribute, setSelectedAttribute] = useState(null);\r\n  const [openUpdateAttributeDialog, setOpenUpdateAttributeDialog] = useState(false);\r\n  // const [open, setOpen] = useState(false);\r\n  const [parameterTableData, setParameterTableData] = useState([]);\r\n  const [expandedDeviceId, setExpandedDeviceId] = useState(null);\r\n  const [type, setType] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [modelNumber, setModelNumber] = useState('');\r\n\r\n  const clearMessagesAfterDelay = () => {\r\n    setTimeout(() => {\r\n      setDeviceSuccessMessage('');\r\n      setParameterSuccessMessage('');\r\n      setAttributeSuccessMessage('');\r\n      setErrorMessage('');\r\n      setSuccessMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n  }, [deviceSuccessMessage, parameterSuccessMessage, attributeSuccessMessage, errorMessage, successMessage]);\r\n\r\n  useEffect(() => {\r\n    const fetchDevices = async () => {\r\n      try {\r\n        const response = await fetch(`/devices/`);\r\n        const data = await response.json();\r\n\r\n        if (Array.isArray(data.devices)) {\r\n          setDevices(data.devices);\r\n        } else {\r\n          setErrorMessage(`No Devices Available.!`);\r\n        }\r\n      } catch (error) {\r\n        setErrorMessage(`Error fetching devices: ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchDevices();\r\n  }, []);\r\n\r\n  const handleDeviceChange = async (deviceId, isUpdate = false) => {\r\n    try {\r\n      console.log('Fetching device details for deviceId:', deviceId);\r\n    \r\n      const response = await fetch(`/devices/${encodeURIComponent(deviceId)}`);\r\n      const data = await response.json();\r\n  \r\n      // Check if the clicked device is the same as the expanded one\r\n      if (!isUpdate && expandedDeviceId === deviceId) {\r\n        setExpandedDeviceId(null); // Collapse the table\r\n      } else {\r\n        setExpandedDeviceId(deviceId);\r\n      }\r\n  \r\n      if (data.device && Array.isArray(data.device.parameters)) {\r\n        if (data.device.parameters.length > 0) {\r\n          setParameters(data.device.parameters);\r\n          setSuccessMessage('');\r\n          setErrorMessage('');\r\n        } else {\r\n          setParameters([]);\r\n          setAttributes([]);\r\n        }\r\n      } else {\r\n        setParameters([]);\r\n        setErrorMessage(\r\n          'Error fetching Parameters and Attributes or no Parameters and Attributes connected to the selected device'\r\n        );\r\n      }\r\n  \r\n      if (!isUpdate) {\r\n        setSelectedDevice(deviceId);\r\n      }\r\n  \r\n      if (data.device) {\r\n        setSelectedDeviceName(data.device.name);\r\n        setSelectedSlaveId(data.device.slave_id);\r\n        setAttributes(data.device.attributes);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching Device details:', error);\r\n      setErrorMessage('Error fetching Device details. Please try again.');\r\n    }\r\n  };\r\n  \r\n\r\n  const handleChange = (event, isUpdate) => {\r\n    const deviceId = event.target.value;\r\n    handleDeviceChange(deviceId, isUpdate);\r\n  };\r\n  \r\n  \r\n  const handleUpdateClick = (parameter, index) => {\r\n    setSelectedParameter({ ...parameter, index });\r\n    setUpdatedFunctionCode(parameter.function_code);\r\n    setUpdatedAddress(parameter.address);\r\n    setUpdatedParameterName(parameter.parameter_name);\r\n    setUpdatedDataType(parameter.data_type);\r\n    setUpdatedThreshold(parameter.threshold);\r\n    setUpdatedAggregationType(parameter.aggregation_type);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n  \r\n  const handleUpdateDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedFunctionCode('');\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n    setUpdatedThreshold('');\r\n    setUpdatedAggregationType('');\r\n  };\r\n\r\n  const handleUpdateSubmit = async () => {\r\n    if (!selectedParameter || !selectedParameter.id) {\r\n      setErrorMessage('No Parameter selected for update');\r\n      return;\r\n    }\r\n    // Validate that address contains only integer values\r\n    const isAddressInteger = /^\\d+$/.test(updatedAddress);\r\n    if (!isAddressInteger) {\r\n      setErrorMessage('Address should contain only integer values');\r\n      return;\r\n    }\r\n    // Validate that threshold contains only float or integer values\r\n    const isThresholdValid = /^-?\\d+(\\.\\d+)?$/.test(updatedThreshold);\r\n    if (!isThresholdValid) {\r\n      setErrorMessage('Threshold should contain only float or integer values');\r\n      return;\r\n    }\r\n\r\n    const updatedValues = {\r\n      function_code: updatedFunctionCode,\r\n      address: updatedAddress,\r\n      // parameter_name: updatedParameterName,\r\n      parameter_name: selectedParameter.index >= 11 ? updatedParameterName : selectedParameter.parameter_name,\r\n      data_type: updatedDataType,\r\n      threshold: updatedThreshold,\r\n      aggregation_type: updatedAggregationType,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`/parameter/devices/${selectedDevice}/parameter/${selectedParameter.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Parameter: ${response.statusText}`);\r\n      }\r\n  \r\n      handleChange({ target: { value: selectedDevice } },true);\r\n      clearParameterForm();\r\n      handleUpdateDialogClose();\r\n      setParameterSuccessMessage('Parameter updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Parameter:', error);\r\n      clearParameterForm();\r\n      handleUpdateDialogClose();\r\n      setErrorMessage(`Error updating Parameter. ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  const handleDeleteSubmit = async (parameter) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && parameter && parameter.id) {\r\n        const response = await fetch(`/parameter/devices/${selectedDevice}/parameter/${parameter.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete parameter: ${response.statusText}`);\r\n        }\r\n\r\n        setParameterSuccessMessage('Parameter deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.parameters)) {\r\n          setParameters(deviceData.device.parameters);\r\n        } else {\r\n          setParameters([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch(`/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Parameter:', error);\r\n      setErrorMessage(`Error deleting Parameter. ${error.message}`);\r\n    } finally {\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const handleDeleteClick = (parameter) => {  // Define handleDeleteClick explicitly\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  };\r\n\r\n  const createDevice = async () => {\r\n    if (deviceName && slaveId) {\r\n      const newDevice = { name: deviceName, slave_id: slaveId };\r\n  \r\n      try {\r\n        // Create the device\r\n        const response = await fetch(`/devices/`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(newDevice),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n  \r\n        // Extract the newly created device from the response\r\n        const createdDevice = await response.json();\r\n        const deviceId = createdDevice.device_id; // Ensure that 'id' is the correct property name\r\n  \r\n        // Create default attributes for the newly created device\r\n        const defaultAttributes = [\r\n          { name: 'Device Name', value: newDevice.name },\r\n          { name: 'Slave ID', value: newDevice.slave_id },\r\n          { name: 'Type', value: type },\r\n          { name: 'Company', value: company },\r\n          { name: 'Model Number', value: modelNumber },\r\n        ];\r\n  \r\n        // Create the connected attributes\r\n        const attributePayload = {\r\n          attributes: defaultAttributes.map((attribute) => ({\r\n            name: attribute.name,\r\n            value: attribute.value,\r\n          })),\r\n        };\r\n  \r\n        // Use the correct endpoint with the obtained deviceId\r\n        await fetch(`/attribute/devices/${deviceId}/attribute`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(attributePayload),\r\n        });\r\n  \r\n        // Create parameters for the newly created device\r\n        const parameterPayload = {\r\n          parameters: [\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'kwh', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'kvah', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'kvarh', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'avg_vln', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'avg_vll', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'avg_current', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'avg_pf', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'frequency', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'total_kw', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'total_kva', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n            { active: true,function_code: 'Holding Register', address: '', parameter_name: 'total_kvar', data_type: 'Float', threshold: null, aggregation_type: '' },\r\n          ],\r\n        };\r\n  \r\n        // Use the correct endpoint with the obtained deviceId\r\n        await fetch(`/parameter/devices/${deviceId}/parameter`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(parameterPayload),\r\n        });\r\n  \r\n        setDeviceSuccessMessage('Device created successfully!');\r\n        clearDeviceForm();\r\n        setIsAddDeviceFormOpen(false);\r\n  \r\n        // Fetch the updated list of devices\r\n        const devicesResponse = await fetch(`/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n  \r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          setErrorMessage(`Invalid response format for devices: ${devicesData}`);\r\n          clearDeviceForm();\r\n          setIsAddDeviceFormOpen(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating device:', error);\r\n        setErrorMessage('Error creating device. Please try again.');\r\n        clearDeviceForm();\r\n        setIsAddDeviceFormOpen(false);\r\n      }\r\n    } else {\r\n      setErrorMessage('Both device name and slave ID are required');\r\n      clearDeviceForm();\r\n      setIsAddDeviceFormOpen(false);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleUpdateDevice = async () => {\r\n    try {\r\n      const updatedDevice = { name: updatedDeviceName, slave_id: updatedSlaveId };\r\n  \r\n      await fetch(`/devices/${selectedDevice.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedDevice),\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch(`/devices/`);\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        // Update selected device details first\r\n        setSelectedDeviceName(updatedDeviceName);\r\n        setSelectedSlaveId(updatedSlaveId);\r\n  \r\n        // Then update the state of devices\r\n        setDevices(devicesData.devices);\r\n        setDeviceSuccessMessage('Device updated successfully!');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating device:', error);\r\n      setErrorMessage('Error updating device. Please try again.');\r\n    } finally {\r\n      setUpdateDeviceFormOpen(false);\r\n    }\r\n  };\r\n \r\n  const handleDeleteDevice = async (deviceId) => {\r\n    try {  \r\n      // Send DELETE request to the server\r\n      await fetch(`/devices/${deviceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n  \r\n      // Fetch the updated list of devices\r\n      const devicesResponse = await fetch(`/devices/`);\r\n      const devicesData = await devicesResponse.json();\r\n  \r\n      if (Array.isArray(devicesData.devices)) {\r\n        setDevices(devicesData.devices);\r\n        setParameters([]);\r\n        setAttributes([]);\r\n  \r\n        // Reset selected device details\r\n        setSelectedDevice(null);\r\n        setSelectedDeviceName('');\r\n        setSelectedSlaveId('');\r\n      } else {\r\n        console.error('Invalid response format for devices:', devicesData);\r\n      }\r\n  \r\n      setDeviceSuccessMessage('Device deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting device:', error);\r\n      setErrorMessage('Error deleting device. Please try again.');\r\n    } finally {\r\n      // Close the confirmation dialog and any other necessary actions\r\n      setIsDeleteDeviceConfirmationOpen(false);\r\n      setOpenUpdateDialog(false);\r\n      setSelectedParameter(null);\r\n      setSelectedAttribute(null);\r\n    }\r\n  };\r\n  \r\n  const handleOpenUpdateDeviceForm = (deviceId) => {\r\n    const selectedDevice = devices.find((device) => device.id === deviceId);\r\n\r\n    setUpdatedDeviceName(selectedDevice.name);\r\n    setUpdatedSlaveId(selectedDevice.slave_id);\r\n    setSelectedDevice(selectedDevice);\r\n    setUpdateDeviceFormOpen(true);\r\n  };\r\n\r\n  const handleCloseUpdateDeviceForm = () => {\r\n    setUpdateDeviceFormOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceClick = (deviceId, deviceName) => {\r\n    setSelectedDevice(deviceId);\r\n    setSelectedDeviceName(deviceName);\r\n    setIsDeleteDeviceConfirmationOpen(true);\r\n  };\r\n\r\n  const handleDeleteDeviceConfirmationClose = () => {\r\n    setIsDeleteDeviceConfirmationOpen(false);\r\n  };\r\n\r\n  const handleDeleteDeviceDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n  };\r\n\r\n  const clearDeviceForm = () => {\r\n    setDeviceName('');\r\n    setSlaveId('');\r\n    setType('');\r\n    setCompany('');\r\n    setModelNumber('');\r\n  };\r\n  \r\n  const handleAddDeviceClick = () => {\r\n    setIsAddDeviceFormOpen(true);\r\n  };\r\n  \r\n  const handleAddParameterClick = () => {\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n  \r\n  const handleAddDeviceFormClose = () => {\r\n    setIsAddDeviceFormOpen(false);\r\n    clearDeviceForm();\r\n  };\r\n  \r\n  const handleAddParameterFormClose = () => {\r\n    setIsAddParameterFormOpen(false);\r\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]); // Reset fields\r\n    clearParameterForm();\r\n  };\r\n\r\n  const handleDeleteParameterDialogClose = () => {\r\n    setIsDeleteConfirmationOpen(false);\r\n    setParameterToDelete(null);\r\n  };\r\n\r\n  const handleDeleteParameterClick = (parameter) => {\r\n    setSelectedParameter(parameter);\r\n    setIsDeleteConfirmationOpen(true);\r\n  }; \r\n\r\n  const clearParameterForm = () => {\r\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\r\n  };\r\n  \r\n  const handleAddParameterButtonClick = () => {\r\n    console.log('Add Parameter button clicked');\r\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\r\n    setIsAddParameterFormOpen(true);\r\n  };\r\n\r\n\r\n  const handleUpdateParameterDialogClose = () => {\r\n    setOpenUpdateDialog(false);\r\n    setUpdatedFunctionCode('');\r\n    setUpdatedAddress('');\r\n    setUpdatedParameterName('');\r\n    setUpdatedDataType('');\r\n    setUpdatedThreshold('');\r\n    setUpdatedAggregationType('');\r\n  };\r\n  \r\n  const handleNumericFieldChange = (index, fieldName, value) => {\r\n    // Check if the value is numeric (allowing decimals) or an empty string\r\n    if (/^\\d*\\.?\\d*$/.test(value) || value === '') {\r\n      // Update the field if it's numeric or an empty string\r\n      handleFieldChange(index, fieldName, value);\r\n    }\r\n    // You can optionally show an error message or handle the invalid input in another way\r\n  };\r\n \r\n  \r\n  const parameterDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      setIsAddParameterFormOpen(false);\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = parameterFields.some(\r\n      (field) => !field.function_code || !field.address || !field.ParameterName || !field.data_type || !field.aggregation_type\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each parameter!');\r\n      setIsAddParameterFormOpen(true);\r\n      // clearParameterForm();\r\n      return;\r\n    }\r\n  \r\n    // Validate that the address field contains only integer values\r\n    const invalidAddressFields = parameterFields.some(\r\n      (field) => !Number.isInteger(parseInt(field.address, 10))\r\n    );\r\n  \r\n    if (invalidAddressFields) {\r\n      setErrorMessage('Please Enter Only Integer Values in the Address Field!');\r\n      // clearParameterForm();\r\n      // setIsAddParameterFormOpen(false);\r\n      return;\r\n    }\r\n  \r\n    const parameterPayload = {\r\n      parameters: parameterFields.map((field) => ({\r\n        active: true,\r\n        function_code: field.function_code,\r\n        address: field.address,\r\n        parameter_name: field.ParameterName,\r\n        data_type: field.data_type,\r\n        threshold: field.threshold !== '' ? parseFloat(field.threshold) : 0.0,\r\n        aggregation_type: field.aggregation_type\r\n      })),\r\n    };\r\n    \r\n  \r\n    fetch(`/parameter/devices/${selectedDevice}/parameter`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(parameterPayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more parameters failed to create.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((responseData) => {\r\n        console.log('API Response Data:', responseData);\r\n  \r\n        // Check if responseData has the expected structure\r\n        if (responseData.created_parameters) {\r\n          // Update the table data with the new parameters\r\n          setParameterTableData([...parameterTableData, ...responseData.created_parameters]);\r\n  \r\n          setParameterSuccessMessage('Parameters created successfully!');\r\n          clearParameterForm();\r\n          setIsAddParameterFormOpen(false);\r\n          handleChange({ target: { value: selectedDevice } },true);\r\n        } else {\r\n          console.error('Unexpected response format:', responseData);\r\n          setErrorMessage('Error creating Parameters. Please try again.');\r\n          clearParameterForm();\r\n          setIsAddParameterFormOpen(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Parameters:', error);\r\n        setErrorMessage('Error creating Parameters. Please try again.');\r\n        clearParameterForm();\r\n        setIsAddParameterFormOpen(false);\r\n      });\r\n  };\r\n  \r\n  const handleFieldChange = (index, field, value) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields[index][field] = value;\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const addEmptyRow = () => {\r\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    const updatedFields = [...parameterFields];\r\n    updatedFields.splice(index, 1);\r\n    setParameterFields(updatedFields);\r\n  };\r\n\r\n  const clearAttributeForm = () => {\r\n    setAttributeFields([{ name: '', value: '' }]);\r\n  };\r\n\r\n  const handleAddAttributeFormClose = () => {\r\n    setIsAddAttributeFormOpen(false);\r\n    setAttributeFields([{ name: '', value: '' }]); // Reset fields\r\n    clearAttributeForm();\r\n  };\r\n\r\n  const handleAddAttributeButtonClick = () => {\r\n    console.log('Add Attribute button clicked');\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const handleAddAttributeClick = () => {\r\n    setIsAddAttributeFormOpen(true);\r\n  };\r\n\r\n  const attributeDevice = () => {\r\n    if (!selectedDevice) {\r\n      setErrorMessage('Please select a device!');\r\n      return;\r\n    }\r\n  \r\n    // Validate the fields for each row\r\n    const invalidFields = attributeFields.some(\r\n      (field) => !field.name || !field.value\r\n    );\r\n  \r\n    if (invalidFields) {\r\n      setErrorMessage('Please fill in all the required fields for each attribute!');\r\n      clearAttributeForm();\r\n      return;\r\n    }\r\n  \r\n    const attributePayload = {\r\n      attributes: attributeFields.map((field) => ({\r\n        name: field.name,\r\n        value: field.value,\r\n      })),\r\n    };\r\n  \r\n    fetch(`/attribute/devices/${selectedDevice}/attribute`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(attributePayload),\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('One or more attributes failed to create.');\r\n        }\r\n      })\r\n      .then(() => {\r\n        setAttributeSuccessMessage('Attributes created successfully!');\r\n        clearAttributeForm();\r\n        setIsAddAttributeFormOpen(false);\r\n        handleChange({ target: { value: selectedDevice } },true);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating Attributes:', error);\r\n        setErrorMessage('Error creating Attributes. Please try again.');\r\n        clearAttributeForm();\r\n        setIsAddAttributeFormOpen(false);\r\n      });\r\n  };\r\n  \r\n  const handleAttributeFieldChange = (index, field, value) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields[index][field] = value;\r\n    setAttributeFields(updatedFields);\r\n  };\r\n  \r\n  // eslint-disable-next-line\r\n  const addAttributeEmptyRow = () => {\r\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\r\n  };\r\n  \r\n  const removeAttributeRow = (index) => {\r\n    const updatedFields = [...attributeFields];\r\n    updatedFields.splice(index, 1);\r\n    setAttributeFields(updatedFields);\r\n  };\r\n\r\n  const handleUpdateAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setUpdatedName(attribute.name);\r\n    setUpdatedValue(attribute.value);\r\n    setOpenUpdateAttributeDialog(true);\r\n  };\r\n  \r\n\r\n  const handleUpdateAttributeDialogClose = () => {\r\n    setOpenUpdateAttributeDialog(false);\r\n    setUpdatedName('');\r\n    setUpdatedValue('');\r\n  };\r\n\r\n  const handleUpdateAttributeSubmit = async () => {\r\n    if (!selectedAttribute || !selectedAttribute.id || !selectedDevice) {\r\n      console.error('No Attribute or Device selected for update');\r\n      return;\r\n    }\r\n\r\n    // Check if the name is \"Device Name\" or \"Slave ID\"\r\n    if (selectedAttribute.name === \"Device Name\" || selectedAttribute.name === \"Slave ID\") {\r\n      // Handle the restriction (e.g., show an error message)\r\n      console.log(\"Cannot update attributes with names 'Device Name' or 'Slave ID'\");\r\n      return;\r\n    }\r\n  \r\n    const updatedValues = {\r\n      name: updatedName,\r\n      value: updatedValue,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`/attribute/devices/${selectedDevice}/attribute/${selectedAttribute.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedValues),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to update Attribute: ${response.statusText}`);\r\n      }\r\n  \r\n      handleChange({ target: { value: selectedDevice } },true);\r\n      handleUpdateAttributeDialogClose();\r\n      clearAttributeForm();\r\n      setAttributeSuccessMessage('Attribute updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating Attribute:', error);\r\n      setErrorMessage(`Error updating Attribute. ${error.message}`);\r\n      clearAttributeForm();\r\n      handleUpdateAttributeDialogClose();\r\n    }\r\n  };  \r\n  \r\n\r\n  const handleDeleteAttributeSubmit = async (attribute) => {\r\n    setIsDeleteConfirmationOpen(false);\r\n\r\n    try {\r\n      if (selectedDevice && attribute && attribute.id) {\r\n        const response = await fetch(`/attribute/devices/${selectedDevice}/attribute/${attribute.id}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to delete Attribute: ${response.statusText}`);\r\n        }\r\n\r\n        setAttributeSuccessMessage('Attribute deleted successfully!');\r\n        setErrorMessage('');\r\n\r\n        // Update the device list\r\n        const deviceResponse = await fetch(`/devices/${selectedDevice}`);\r\n        const deviceData = await deviceResponse.json();\r\n\r\n        if (deviceData.device && Array.isArray(deviceData.device.attributes)) {\r\n          setAttributes(deviceData.device.attributes);\r\n        } else {\r\n          setAttributes([]);\r\n        }\r\n\r\n        // Fetch devices to update the list\r\n        const devicesResponse = await fetch(`/devices/`);\r\n        const devicesData = await devicesResponse.json();\r\n\r\n        if (Array.isArray(devicesData.devices)) {\r\n          setDevices(devicesData.devices);\r\n        } else {\r\n          console.error('Invalid response format for devices:', devicesData);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting Attribute:', error);\r\n      setErrorMessage(`Error deleting Attribute. ${error.message}`);\r\n    } finally {\r\n      setIsDeleteAttributeConfirmationOpen(false);\r\n      setOpenUpdateAttributeDialog(false);\r\n      setSelectedAttribute(null);\r\n    }\r\n  };\r\n\r\n  \r\n  const handleDeleteAttributeDialogClose = () => {\r\n    setIsDeleteAttributeConfirmationOpen(false);\r\n    setAttributeToDelete(null);\r\n  };\r\n\r\n  const handleDeleteAttributeClick = (attribute) => {\r\n    setSelectedAttribute(attribute);\r\n    setIsDeleteAttributeConfirmationOpen(true);\r\n  }; \r\n \r\n\r\n  // const handleClose = () => {\r\n  //   setOpen(false);\r\n  // };\r\n\r\n  // // Define SuccessMessage and ErrorMessage components\r\n  // const SuccessMessage = ({ message, onClose }) => (\r\n  //   <Alert severity=\"success\" onClose={onClose}>\r\n  //     {message}\r\n  //   </Alert>\r\n  // );\r\n\r\n  // const ErrorMessage = ({ message, onClose }) => (\r\n  //   <Alert severity=\"error\" onClose={onClose}>\r\n  //     {message}\r\n  //   </Alert>\r\n  // );\r\n\r\n  // Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message }) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message }) => (\r\n    <Alert severity=\"error\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.header}>\r\n      <Grid container spacing={1} alignItems=\"center\">\r\n        <Grid item xs={10}>\r\n          {deviceSuccessMessage && (\r\n            <SuccessMessage message={deviceSuccessMessage} onClose={() => setDeviceSuccessMessage('')}/>\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={2} container justifyContent=\"flex-end\">\r\n          <Button\r\n            onClick={handleAddDeviceClick}\r\n            variant=\"contained\"\r\n            style={{ backgroundColor: 'rgb(125, 60, 152)', color: 'rgb(253, 254, 254)' }}\r\n          >\r\n            Add Device\r\n          </Button>\r\n        </Grid>\r\n    \r\n        <Grid item xs={12}>\r\n          {/* <TableContainer component={Paper} style={{ backgroundColor: 'rgb(253, 242, 233)' }}> */}\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              {/* Table Header */}\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Device Name</TableCell>\r\n                  <TableCell>Slave ID</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              {/* Table Body */}\r\n              <TableBody>\r\n                {devices.map((device) => (\r\n                  <React.Fragment key={device.id}>\r\n                  <TableRow style={{ backgroundColor: expandedDeviceId === device.id ? '#DB94D4' : 'inherit' }}>\r\n                  {/* <TableRow style={{ backgroundColor: expandedDeviceId === device.id ? 'rgb(199, 183, 163)' : 'inherit' }}> */}\r\n                    <TableCell style={{ color: 'rgb(23, 32, 42)' }}>{device.name}</TableCell>\r\n                    <TableCell style={{ color: 'rgb(23, 32, 42)' }}>{device.slave_id}</TableCell>\r\n                    <TableCell>\r\n                      {/* Show button */}\r\n                      <IconButton\r\n                        onClick={() => handleOpenUpdateDeviceForm(device.id)}\r\n                        variant=\"contained\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <EditIcon style={{ color: 'rgb(23, 32, 42)', fontSize : \"medium\" }}/>\r\n                      </IconButton>\r\n                      <IconButton \r\n                        onClick={() => handleDeleteDeviceClick(device.id, device.name)}\r\n                        variant=\"outlined\"\r\n                        style={{ marginRight: '10px' }}\r\n                      >\r\n                        <DeleteIcon style={{ color: 'rgb(23, 32, 42)', fontSize : \"medium\" }} />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        onClick={() => handleDeviceChange(device.id)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ float: 'right' }}\r\n                      >\r\n                        {expandedDeviceId === device.id ? (\r\n                          <KeyboardArrowUpIcon style={{ color: 'rgb(23, 32, 42)', fontSize: 'large' }} />\r\n                        ) : (\r\n                          <KeyboardArrowDownIcon style={{ color: 'rgb(23, 32, 42)', fontSize: 'large' }} />\r\n                        )} \r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                  <TableCell colSpan={3}>\r\n                        {/* Parameter and Attribute Tables */}\r\n                        <Collapse in={expandedDeviceId === device.id} timeout=\"auto\" unmountOnExit>\r\n                          <div>\r\n                            {/* Parameters Table */}\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                              <DialogTitle>\r\n                                Parameter\r\n                              </DialogTitle>\r\n                              <Button\r\n                                onClick={handleAddParameterClick}\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ backgroundColor: 'rgb(125, 60, 152)', color: 'rgb(253, 254, 254)', marginBottom: '10px' }}\r\n                              >\r\n                                Add\r\n                              </Button>\r\n                            </div>\r\n                            {/* Display Parameter Success and Error Messages */}\r\n                            {parameterSuccessMessage && (\r\n                              <SuccessMessage message={parameterSuccessMessage} onClose={() => setParameterSuccessMessage('')} />\r\n                            )}\r\n                            {errorMessage && (\r\n                              <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\r\n                            )}\r\n                            <TableContainer component={Paper} style={{ marginTop: '10px' }}>\r\n                              <Table>\r\n                                <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell>Function Code</TableCell>\r\n                                  <TableCell>Address</TableCell>\r\n                                  <TableCell>Parameter</TableCell>\r\n                                  <TableCell>Data Type</TableCell>\r\n                                  <TableCell>Threshold</TableCell>\r\n                                  <TableCell>Aggregation</TableCell>\r\n                                  <TableCell>Actions</TableCell>\r\n                                </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                  {parameters.map((parameter, index) => (\r\n                                    <TableRow key={parameter.id}>\r\n                                      <TableCell>{parameter.function_code}</TableCell>\r\n                                      <TableCell>{parameter.address}</TableCell>\r\n                                      <TableCell>{parameter.parameter_name}</TableCell>\r\n                                      <TableCell>{parameter.data_type}</TableCell>\r\n                                      <TableCell>{parameter.threshold}</TableCell>\r\n                                      <TableCell>{parameter.aggregation_type}</TableCell>\r\n                                      <TableCell>\r\n                                        <IconButton\r\n                                          onClick={() => handleUpdateClick(parameter, index)}\r\n                                          variant=\"contained\"\r\n                                          style={{ marginRight: '10px' }}\r\n                                        >\r\n                                          <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\r\n                                        </IconButton>\r\n                                        {index >= 11 ? (\r\n                                          <IconButton\r\n                                            onClick={() => handleDeleteParameterClick(parameter)}\r\n                                            variant=\"contained\"\r\n                                          >\r\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\r\n                                          </IconButton>\r\n                                        ) : (\r\n                                          // Disabled or hidden delete button for the first 5 attributes\r\n                                          <IconButton disabled variant=\"contained\" style={{ display: 'none' }}>\r\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\r\n                                          </IconButton>\r\n                                        )}\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n                                  ))}\r\n                                </TableBody>\r\n                              </Table>\r\n                            </TableContainer>\r\n\r\n                            {/* Attributes Table */}\r\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                              <DialogTitle style={{  marginTop: '30px' }} >\r\n                                Attribute\r\n                              </DialogTitle>\r\n                              <Button\r\n                                onClick={handleAddAttributeClick}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'rgb(125, 60, 152)', color: 'rgb(253, 254, 254)', marginTop: '30px' }}\r\n                              >\r\n                                Add\r\n                              </Button>\r\n                            </div>\r\n                            {/* Display Attribute Success and Error Messages */}\r\n                            {attributeSuccessMessage && (\r\n                              <SuccessMessage message={attributeSuccessMessage} onClose={() => setAttributeSuccessMessage('')} />\r\n                            )}\r\n                            <TableContainer component={Paper} style={{ marginTop: '10px' }}>\r\n                              <Table>\r\n                                <TableHead>\r\n                                  <TableRow>\r\n                                    <TableCell>Attribute Name</TableCell>\r\n                                    <TableCell>Attribute Value</TableCell>\r\n                                    <TableCell>Actions</TableCell>\r\n                                  </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                  {attributes.map((attribute, index) => (\r\n                                    <TableRow key={attribute.id}>\r\n                                      <TableCell>{attribute.name}</TableCell>\r\n                                      <TableCell>{attribute.value}</TableCell>\r\n                                      <TableCell>\r\n                                        <IconButton\r\n                                          onClick={() => handleUpdateAttributeClick(attribute)}\r\n                                          variant=\"contained\"\r\n                                          style={{ marginRight: '10px' }}\r\n                                        >\r\n                                          <EditIcon style={{ color: 'gray', fontSize: 'medium' }} />\r\n                                        </IconButton>\r\n                                        {index >= 5 ? (\r\n                                          <IconButton\r\n                                            onClick={() => handleDeleteAttributeClick(attribute)}\r\n                                            variant=\"contained\"\r\n                                          >\r\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\r\n                                          </IconButton>\r\n                                        ) : (\r\n                                          // Disabled or hidden delete button for the first 5 attributes\r\n                                          <IconButton disabled variant=\"contained\" style={{ display: 'none' }}>\r\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\r\n                                          </IconButton>\r\n                                        )}\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n                                  ))}\r\n                                </TableBody>\r\n                              </Table>\r\n                            </TableContainer>\r\n                          </div>\r\n                        </Collapse>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </React.Fragment>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n      </div> \r\n\r\n      <Dialog open={openUpdateDialog} onClose={handleUpdateParameterDialogClose}>\r\n      <DialogTitle style={{ color: '#008080' }}>Update Parameter</DialogTitle>\r\n      {errorMessage && (\r\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\r\n      )}\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n              <InputLabel style={{ marginTop: '10px' }}>Function Code</InputLabel>\r\n                <Select\r\n                  value={updatedFunctionCode}\r\n                  style={{ marginTop: '10px' }}\r\n                  onChange={(e) => setUpdatedFunctionCode(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\r\n                  <MenuItem value=\"Input Status\">Input Status</MenuItem>\r\n                  <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\r\n                  <MenuItem value=\"Input Register\">Input Register</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Address\"\r\n                value={updatedAddress}\r\n                style={{ marginTop: '10px' }}\r\n                onChange={(e) => setUpdatedAddress(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Parameter\"\r\n                value={updatedParameterName}\r\n                onChange={(e) => setUpdatedParameterName(e.target.value)}\r\n                fullWidth\r\n                disabled={selectedParameter && selectedParameter.index < 11}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Data Type</InputLabel>\r\n                <Select\r\n                  value={updatedDataType}\r\n                  onChange={(e) => setUpdatedDataType(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                  <MenuItem value=\"Float\">Float</MenuItem>\r\n                  <MenuItem value=\"Double\">Double</MenuItem>\r\n                  <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Threshold\"\r\n                value={updatedThreshold}\r\n                // style={{ marginTop: '10px' }}\r\n                onChange={(e) => setUpdatedThreshold(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Aggregation</InputLabel>\r\n                <Select\r\n                  value={updatedAggregationType}\r\n                  // style={{ marginTop: '10px' }}\r\n                  onChange={(e) => setUpdatedAggregationType(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"current_val\">Current Value</MenuItem>\r\n                  <MenuItem value=\"min\">Minimum</MenuItem>\r\n                  <MenuItem value=\"max\">Maximum</MenuItem>\r\n                  <MenuItem value=\"avg\">Average</MenuItem>\r\n                  <MenuItem value=\"median\">Median</MenuItem>\r\n                  <MenuItem value=\"rms\">Root Mean Square</MenuItem>\r\n                  <MenuItem value=\"mode\">Mode</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      \r\n      <Dialog open={isDeleteConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Parameter</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Parameter?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteSubmit(selectedParameter)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={openUpdateAttributeDialog} onClose={handleUpdateAttributeDialogClose}>\r\n        <DialogTitle style={{ color: '#008080' }}>Update Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Name\"\r\n                value={updatedName}\r\n                style={{ marginTop: '10px' }}\r\n                onChange={(e) => setUpdatedName(e.target.value)}\r\n                fullWidth\r\n                disabled={selectedAttribute && (selectedAttribute.name === \"Device Name\" || selectedAttribute.name === \"Slave ID\")}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Value\"\r\n                value={updatedValue}\r\n                style={{ marginTop: '10px' }}\r\n                onChange={(e) => setUpdatedValue(e.target.value)}\r\n                fullWidth\r\n                disabled={selectedAttribute && (selectedAttribute.name === \"Device Name\" || selectedAttribute.name === \"Slave ID\")}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleUpdateAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={handleUpdateAttributeSubmit} variant=\"contained\" color=\"primary\">Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isDeleteAttributeConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\r\n        <DialogTitle>Delete Attribute</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete this Attribute?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={() => handleDeleteAttributeSubmit(selectedAttribute)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        \r\n      <Dialog open={updateDeviceFormOpen} onClose={handleCloseUpdateDeviceForm}>\r\n        <DialogTitle>Update Device</DialogTitle>\r\n        <DialogContent>\r\n          {selectedDevice && (\r\n            <>\r\n              <TextField\r\n                label=\"Device Name\"\r\n                value={updatedDeviceName}\r\n                style={{ marginTop: '5px', marginRight: '5px' }}\r\n                onChange={(e) => setUpdatedDeviceName(e.target.value)}\r\n              />\r\n              <TextField\r\n                label=\"Slave ID\"\r\n                value={updatedSlaveId}\r\n                style={{ marginTop: '5px' }}\r\n                onChange={(e) => setUpdatedSlaveId(e.target.value)}\r\n              />\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseUpdateDeviceForm} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleUpdateDevice} variant=\"contained\" color=\"primary\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      <Dialog open={isDeleteDeviceConfirmationOpen} onClose={handleDeleteDeviceConfirmationClose}>\r\n        <DialogTitle>Delete Device</DialogTitle>\r\n        <DialogContent>\r\n          <p>Are you sure you want to delete \"{selectedDeviceName}\"?</p>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDeleteDeviceConfirmationClose} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => handleDeleteDevice(selectedDevice)} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  \r\n      {/* <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\r\n        <DialogTitle>Add Device</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Device Name\"\r\n            value={deviceName}\r\n            onChange={(e) => setDeviceName(e.target.value)}\r\n            style={{ marginRight: '5px', marginTop: '5px' }}\r\n          />\r\n          <TextField\r\n            label=\"Slave ID\"\r\n            value={slaveId}\r\n            style={{ marginTop: '5px' }}\r\n            onChange={(e) => setSlaveId(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createDevice} variant=\"contained\">\r\n            Create Device\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog> */}\r\n\r\n      <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\r\n        <DialogTitle>Add Device</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Device Name\"\r\n            value={deviceName}\r\n            onChange={(e) => setDeviceName(e.target.value)}\r\n            style={{ marginRight: '5px', marginTop: '5px' }}\r\n          />\r\n          <TextField\r\n            label=\"Slave ID\"\r\n            value={slaveId}\r\n            style={{ marginTop: '5px' }}\r\n            onChange={(e) => setSlaveId(e.target.value)}\r\n          />\r\n          <TextField\r\n            label=\"Type\"\r\n            value={type}\r\n            style={{ marginRight: '5px', marginTop: '5px' }}\r\n            onChange={(e) => setType(e.target.value)}\r\n          />\r\n          <TextField\r\n            label=\"Company\"\r\n            value={company}\r\n            style={{ marginTop: '5px' }}\r\n            onChange={(e) => setCompany(e.target.value)}\r\n          />\r\n          <TextField\r\n            label=\"Model Number\"\r\n            value={modelNumber}\r\n            style={{ marginTop: '5px' }}\r\n            onChange={(e) => setModelNumber(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createDevice} variant=\"contained\">\r\n            Create Device\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      <Dialog open={isAddParameterFormOpen} onClose={handleAddParameterFormClose} fullWidth maxWidth=\"lg\" keepMounted disableEscapeKeyDown onClick={(e) => e.stopPropagation()}>\r\n        <DialogTitle>Add Parameter</DialogTitle>\r\n        {errorMessage && (\r\n          <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\r\n        )}\r\n        <DialogContent>\r\n          {parameterFields.map((field, index) => (\r\n            <Grid container spacing={1} key={index} alignItems=\"center\" style={{ height: '70px' }}>\r\n              <Grid item xs={2}>\r\n                <FormControl fullWidth style={{ width: '180px' }}>\r\n                  <InputLabel style={{ marginTop: '4px' }}>Function Code</InputLabel>\r\n                  <Select\r\n                    value={field.function_code || ''}\r\n                    style={{ marginTop: '8px' }}\r\n                    onChange={(e) => handleFieldChange(index, 'function_code', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\r\n                    <MenuItem value=\"Input Status\">Input Status</MenuItem>\r\n                    <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\r\n                    <MenuItem value=\"Input Register\">Input Register</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <TextField\r\n                  label=\"Address\"\r\n                  value={field.address}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleNumericFieldChange(index, 'address', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1.70}>\r\n                <TextField\r\n                  label=\"Parameter\"\r\n                  value={field.ParameterName}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleFieldChange(index, 'ParameterName', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1.35}>\r\n                <FormControl fullWidth style={{ width: '120px' }}>\r\n                  <InputLabel style={{ marginTop: '4px' }}>Data Type</InputLabel>\r\n                  <Select\r\n                    value={field.data_type}\r\n                    style={{ marginTop: '6px' }}\r\n                    onChange={(e) => handleFieldChange(index, 'data_type', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"Integer\">Integer</MenuItem>\r\n                    <MenuItem value=\"Float\">Float</MenuItem>\r\n                    <MenuItem value=\"Double\">Double</MenuItem>\r\n                    <MenuItem value=\"Boolean\">Boolean</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={1.1}>\r\n                <TextField\r\n                  label=\"Threshold\"\r\n                  value={field.threshold}\r\n                  style={{ marginTop: '5px' }}\r\n                  onChange={(e) => handleNumericFieldChange(index, 'threshold', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <FormControl fullWidth style={{ width: '172x', marginRight:'200px' }}>\r\n                  <InputLabel style={{ marginTop: '4px' }}>Aggregation</InputLabel>\r\n                  <Select\r\n                    value={field.aggregation_type}\r\n                    style={{ marginTop: '8px' }}\r\n                    onChange={(e) => handleFieldChange(index, 'aggregation_type', e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"current_val\">Current Value</MenuItem>\r\n                    <MenuItem value=\"min\">Minimum</MenuItem>\r\n                    <MenuItem value=\"max\">Maximum</MenuItem>\r\n                    <MenuItem value=\"avg\">Average</MenuItem>\r\n                    <MenuItem value=\"median\">Median</MenuItem>\r\n                    <MenuItem value=\"rms\">Root Mean Square</MenuItem>\r\n                    <MenuItem value=\"mode\">Mode</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Grid item xs={9.155} align=\"right\">\r\n              <IconButton onClick={handleAddParameterButtonClick}>\r\n                <AddIcon style={{ color: 'green' }} />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions style={{marginRight: '200px'}}>\r\n          <Button onClick={handleAddParameterFormClose} variant=\"outlined\" color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={parameterDevice} variant=\"contained\" color=\"primary\">\r\n            Create Parameter\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isAddAttributeFormOpen} onClose={handleAddAttributeFormClose}>\r\n        <DialogTitle>\r\n          Add Attribute\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {attributeFields.map((field, index) => (\r\n            <Grid container spacing={2} key={index} alignItems=\"center\">\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={field.name}\r\n                  style={{ marginTop: '7px' }}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'name', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3}>\r\n                <TextField\r\n                  label=\"Value\"\r\n                  value={field.value}\r\n                  style={{ marginTop: '7px' }}\r\n                  onChange={(e) => handleAttributeFieldChange(index, 'value', e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index !== 0 && (\r\n                  <IconButton onClick={() => removeAttributeRow(index)}>\r\n                    <RemoveIcon style={{ color: 'red' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                {index === attributeFields.length - 1 && (\r\n                  <IconButton onClick={handleAddAttributeButtonClick}>\r\n                    <AddIcon style={{ color: 'green' }} />\r\n                  </IconButton>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddAttributeFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\r\n          <Button onClick={attributeDevice} variant=\"contained\">Create Attribute</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeviceParameterTable;"],"names":["useStyles","makeStyles","theme","root","padding","spacing","header","display","alignItems","marginBottom","headerText","fontFamily","fontSize","fontWeight","color","marginRight","buttonGroup","marginLeft","addButton","backgroundColor","palette","success","main","dark","deleteButton","error","DeviceParameterTable","classes","devices","setDevices","useState","selectedDevice","setSelectedDevice","parameters","setParameters","attributes","setAttributes","selectedParameter","setSelectedParameter","openUpdateDialog","setOpenUpdateDialog","updatedFunctionCode","setUpdatedFunctionCode","updatedAddress","setUpdatedAddress","updatedParameterName","setUpdatedParameterName","updatedDataType","setUpdatedDataType","updatedThreshold","setUpdatedThreshold","updatedAggregationType","setUpdatedAggregationType","updatedName","setUpdatedName","updatedValue","setUpdatedValue","deviceName","setDeviceName","slaveId","setSlaveId","deviceSuccessMessage","setDeviceSuccessMessage","parameterSuccessMessage","setParameterSuccessMessage","attributeSuccessMessage","setAttributeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isAddDeviceFormOpen","setIsAddDeviceFormOpen","isAddParameterFormOpen","setIsAddParameterFormOpen","isAddAttributeFormOpen","setIsAddAttributeFormOpen","parameterToDelete","setParameterToDelete","attributeToDelete","setAttributeToDelete","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","isDeleteAttributeConfirmationOpen","setIsDeleteAttributeConfirmationOpen","selectedDeviceName","setSelectedDeviceName","selectedSlaveId","setSelectedSlaveId","updateDeviceFormOpen","setUpdateDeviceFormOpen","updatedDeviceName","setUpdatedDeviceName","updatedSlaveId","setUpdatedSlaveId","isDeleteDeviceConfirmationOpen","setIsDeleteDeviceConfirmationOpen","parameterFields","setParameterFields","function_code","address","ParameterName","data_type","threshold","aggregation_type","attributeFields","setAttributeFields","name","value","selectedAttribute","setSelectedAttribute","openUpdateAttributeDialog","setOpenUpdateAttributeDialog","parameterTableData","setParameterTableData","expandedDeviceId","setExpandedDeviceId","type","setType","company","setCompany","modelNumber","setModelNumber","useEffect","setTimeout","async","response","fetch","data","json","Array","isArray","concat","fetchDevices","handleDeviceChange","deviceId","isUpdate","arguments","length","undefined","console","log","encodeURIComponent","device","slave_id","handleChange","event","target","handleUpdateDialogClose","handleCloseUpdateDeviceForm","handleDeleteDeviceConfirmationClose","handleDeleteDeviceDialogClose","clearDeviceForm","handleAddParameterClick","handleAddDeviceFormClose","handleAddParameterFormClose","clearParameterForm","handleUpdateParameterDialogClose","handleNumericFieldChange","index","fieldName","test","handleFieldChange","field","updatedFields","clearAttributeForm","handleAddAttributeFormClose","handleAddAttributeButtonClick","handleAddAttributeClick","handleAttributeFieldChange","handleUpdateAttributeDialogClose","SuccessMessage","_ref","message","_jsx","Alert","severity","children","ErrorMessage","_ref2","_jsxs","className","Grid","container","item","xs","onClose","justifyContent","Button","onClick","handleAddDeviceClick","variant","style","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","React","id","IconButton","find","handleOpenUpdateDeviceForm","EditIcon","handleDeleteDeviceClick","DeleteIcon","float","KeyboardArrowUpIcon","KeyboardArrowDownIcon","colSpan","Collapse","in","timeout","unmountOnExit","DialogTitle","marginTop","parameter","parameter_name","handleUpdateClick","handleDeleteParameterClick","disabled","attribute","handleUpdateAttributeClick","handleDeleteAttributeClick","Dialog","open","DialogContent","FormControl","fullWidth","InputLabel","Select","onChange","e","MenuItem","TextField","label","DialogActions","updatedValues","method","headers","body","JSON","stringify","ok","Error","statusText","handleDeleteParameterDialogClose","deviceResponse","deviceData","devicesResponse","devicesData","handleDeleteSubmit","handleDeleteAttributeDialogClose","handleDeleteAttributeSubmit","_Fragment","updatedDevice","handleDeleteDevice","newDevice","device_id","attributePayload","parameterPayload","active","maxWidth","keepMounted","disableEscapeKeyDown","stopPropagation","height","width","splice","removeRow","RemoveIcon","align","handleAddParameterButtonClick","AddIcon","parameterDevice","some","Number","isInteger","parseInt","parseFloat","then","responseData","created_parameters","catch","removeAttributeRow","attributeDevice"],"sourceRoot":""}