{"version":3,"file":"static/js/505.f32c2ba3.chunk.js","mappings":"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","sources":["components/dashboard/GetWifi.js","components/dashboard/Retention.js","views/Home.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import {\n//   Container,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogActions,\n//   Button,\n//   IconButton,\n//   TextField,\n//   MenuItem,\n//   FormControl,\n//   InputLabel,\n//   Select,\n// } from '@mui/material';\n// import WifiIcon from '@mui/icons-material/Wifi';\n\n// const WifiList = () => {\n//   const [wifiList, setWifiList] = useState([]);\n//   const [selectedNetwork, setSelectedNetwork] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [isDialogOpen, setDialogOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetch('/service/get-wifi-lists')\n//       .then(response => response.json())\n//       .then(data => {\n//         if (Array.isArray(data.ssids)) {\n//           setWifiList(data.ssids);\n//         } else {\n//           console.error('Invalid data format:', data);\n//         }\n//       })\n//       .catch(error => console.error('Error fetching data:', error));\n//   }, []);\n\n//   const handleDialogOpen = () => {\n//     setDialogOpen(true);\n//   };\n\n//   const handleDialogClose = () => {\n//     setDialogOpen(false);\n//   };\n\n//   const handleNetworkChange = (event) => {\n//     setSelectedNetwork(event.target.value);\n//   };\n\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n\n//   const handleSubmit = () => {\n//     // Implement the logic to handle form submission (e.g., connect to the selected Wi-Fi network)\n//     console.log('Selected Network:', selectedNetwork);\n//     console.log('Password:', password);\n//     // Add your logic here to connect to the selected Wi-Fi network\n//     // You can use the values of selectedNetwork and password for further processing\n//     // For simplicity, this example just logs the values to the console\n//     handleDialogClose(); // Close the dialog after submission\n//   };\n\n//   return (\n//     <Container>\n//       <div style={{ position: 'absolute', top: 0, right: 0, padding: '10px', marginRight: '225px'}}>\n//         <IconButton onClick={handleDialogOpen} color=\"primary\">\n//           <WifiIcon />\n//         </IconButton>\n//       </div>\n\n//       <Dialog open={isDialogOpen} onClose={handleDialogClose}>\n//         <DialogTitle>Wi-Fi</DialogTitle>\n//         <DialogContent>\n//           <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//             <FormControl>\n//               <InputLabel id=\"network-select-label\" style={{ marginTop: '10px' }}>Available-Network</InputLabel>\n//               <Select\n//                 labelId=\"network-select-label\"\n//                 id=\"network-select\"\n//                 value={selectedNetwork}\n//                 onChange={handleNetworkChange}\n//                 label=\"Available-Network\"\n//                 style={{ marginTop: '10px', width: '200px' }}\n//               >\n//                 {wifiList.map((ssid, index) => (\n//                   <MenuItem key={index} value={ssid}>\n//                     {ssid}\n//                   </MenuItem>\n//                 ))}\n//               </Select>\n//             </FormControl>\n//             <TextField\n//               margin=\"normal\"\n//               label=\"Password\"\n//               type=\"password\"\n//               value={password}\n//               onChange={handlePasswordChange}\n//               style={{ marginTop: '10px', width: '200px' }}\n//             />\n//           </div>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={handleDialogClose} color=\"primary\">\n//             Cancel\n//           </Button>\n//           <Button onClick={handleSubmit} color=\"primary\">\n//             Connect\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </Container>\n//   );\n// };\n\n// export default WifiList;\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  IconButton,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n} from '@mui/material';\nimport WifiIcon from '@mui/icons-material/Wifi';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\n\n\nconst WifiList = () => {\n  const [wifiList, setWifiList] = useState([]);\n  const [selectedNetwork, setSelectedNetwork] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false); // New state for password visibility\n  const [isDialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    fetch('/service/get-wifi-lists')\n      .then(response => response.json())\n      .then(data => {\n        if (Array.isArray(data.ssids)) {\n          setWifiList(data.ssids);\n        } else {\n          console.error('Invalid data format:', data);\n        }\n      })\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleDialogOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setSelectedNetwork('');\n    setPassword('');\n    setDialogOpen(false);\n  };\n\n  const handleNetworkChange = (event) => {\n    setSelectedNetwork(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const handleTogglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = () => {\n    // Check if both ssid and password are provided before making the request\n    if (!selectedNetwork || !password) {\n      console.error('SSID and password are required.');\n      return;\n    }\n  \n    // Create JSON object\n    const jsonData = {\n      ssid: selectedNetwork,\n      password: password,\n    };\n  \n    // Make a POST request to your Flask API endpoint\n    fetch('/service/connect_network', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(jsonData),\n    })\n      .then(response => response.text())\n      .then(data => {\n        console.log('Server response:', data);\n        // Add any additional logic based on the server response\n      })\n      .catch(error => {\n        console.error('Error connecting to the network:', error);\n      });\n  \n    handleDialogClose(); // Close the dialog after submission\n  };\n  \n\n  return (\n    <Container>\n      <div style={{ position: 'absolute', top: 0, right: 0, padding: '10px', marginRight: '225px'}}>\n        <IconButton onClick={handleDialogOpen} color=\"primary\">\n          <WifiIcon />\n        </IconButton>\n      </div>\n\n      <Dialog open={isDialogOpen} onClose={handleDialogClose}>\n        <DialogTitle>Wi-Fi</DialogTitle>\n        <DialogContent>\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <FormControl>\n              <InputLabel id=\"network-select-label\" style={{ marginTop: '10px' }}>Available-Network</InputLabel>\n              <Select\n                labelId=\"network-select-label\"\n                id=\"network-select\"\n                value={selectedNetwork}\n                onChange={handleNetworkChange}\n                label=\"Available-Network\"\n                style={{ marginTop: '10px', width: '200px' }}\n              >\n                {wifiList.map((ssid, index) => (\n                  <MenuItem key={index} value={ssid}>\n                    {ssid}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <TextField\n              margin=\"normal\"\n              label=\"Password\"\n              type={showPassword ? 'text' : 'password'}\n              value={password}\n              onChange={handlePasswordChange}\n              style={{ marginTop: '10px', width: '200px' }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={handleTogglePasswordVisibility}>\n                      {showPassword ? <VisibilityOffIcon fontSize=\"small\"/> : <VisibilityIcon fontSize=\"small\"/>}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Connect\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default WifiList;\n\n","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n} from '@mui/material';\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst RetentionParameterForm= () => {\n    const [data, setData] = useState(null);\n    const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\n    const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\n    const [PublishTimeSuccessMessage, setPublishTimeSuccessMessage] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n    const [retentionParameters, setRetentionParameters] = useState({\n        checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\n        successRetention: { days: '', hours: '', minutes: '', seconds: '' },\n        failureRetention: { days: '', hours: '', minutes: '', seconds: '' }\n    });\n    const [valuesChanged, setValuesChanged] = useState(false);\n    const [timeDelayParameters, setTimeDelayParameters] = useState({\n        minutes: '',\n        seconds: ''\n    });\n    const [publishTimeParameters, setPublishTimeParameters] = useState({\n      days: '',\n      hours: '',\n      minutes: '',\n      seconds: ''\n    });\n    // const [isFormValid, setIsFormValid] = useState(false);\n    // Separate state for form validity and submit button for Time Delay\n    const [isTimeDelayFormValid, setIsTimeDelayFormValid] = useState(false);\n\n    // Separate state for form validity and submit button for Publish Time\n    const [isPublishTimeFormValid, setIsPublishTimeFormValid] = useState(false);\n\n    const clearMessagesAfterDelay = () => {\n        setTimeout(() => {\n        setRetentionParameterSuccessMessage('');\n        setTimeDelaySuccessMessage('');\n        setPublishTimeSuccessMessage('');\n        setErrorMessage('');\n        setSuccessMessage('');\n    }, 5000);\n    };\n\n    useEffect(() => {\n    clearMessagesAfterDelay();\n    }, [RetentionParameterSuccessMessage, TimeDelaySuccessMessage, PublishTimeSuccessMessage, errorMessage, successMessage]);\n\n    useEffect(() => {\n    const fetchData = async () => {\n        try {\n        const response = await fetch(`/node-parameter/`);\n        const responseData = await response.json();\n        setData(responseData);\n        // console.log('responseData: ', responseData);\n    \n        // Initialize selectedModbus state with modbus values\n        if (responseData.node_parameters) {\n    \n            // Initialize retention parameters\n            const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\n            if (retentionValues) {\n            setRetentionParameters(retentionValues);\n            }\n\n            const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\n            if (timeDelayValues) {\n            setTimeDelayParameters(timeDelayValues);\n            }\n\n            const publishTImeValues = responseData.node_parameters.find(param => param.name === 'publish_time')?.value;\n            if (publishTImeValues) {\n            setPublishTimeParameters(publishTImeValues);\n            }\n        }\n        } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    \n    fetchData();\n    }, []);\n    \n    \n\n    if (!data) {\n    return <p>Loading...</p>;\n    }\n\n\n\n// Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n  \n  const handleRetentionParameterChange = (param, unit, value) => {\n    // Parse the input value as an integer\n    const integerValue = parseInt(value, 10);\n  \n    // Check if the parsed value is a valid integer\n    if (!isNaN(integerValue)) {\n      setRetentionParameters((prevParameters) => ({\n        ...prevParameters,\n        [param]: { ...prevParameters[param], [unit]: integerValue },\n      }));\n    }\n    // Set valuesChanged to true when any value changes\n    setValuesChanged(true);\n  };\n  \n  \n  const handleRetentionParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/5`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          retention_parameter: retentionParameters,\n        }),\n      });\n      // After successful submission, reset valuesChanged to false\n      setValuesChanged(false);\n\n      if (response.ok) {\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\n    }\n  };\n\n  const handleReset = () => {\n    // Replace the initialValues with your actual initial values\n    const initialValues = {\n      check_frequency: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n      success_retention: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n      failure_retention: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  \n    setRetentionParameters(initialValues);\n    setValuesChanged(false);\n  };\n  \n\n  const handleTimeDelayParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/6`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          time_delay: timeDelayParameters,\n        }),\n      });\n      // Assuming the submission is successful, disable the submit button\n      setIsTimeDelayFormValid(false);\n\n      if (response.ok) {\n        // Display success message or handle as needed\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\n      } else {\n        // Display error message or handle as needed\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\n      }\n    } catch (error) {\n      // Display error message or handle as needed\n      setErrorMessage(`Error updating Time Delay: ${error}`);\n    }\n  };\n\n  const handlePublishTimeParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/7`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          publish_time: publishTimeParameters,\n        }),\n      });\n      // Assuming the submission is successful, disable the submit button\n      setIsPublishTimeFormValid(false);\n\n      if (response.ok) {\n        // Display success message or handle as needed\n        setPublishTimeSuccessMessage('Publish Time updated successfully.');\n      } else {\n        // Display error message or handle as needed\n        setErrorMessage(`Failed to update Publish Time: ${response.statusText}`);\n      }\n    } catch (error) {\n      // Display error message or handle as needed\n      setErrorMessage(`Error updating Publish Time: ${error}`);\n    }\n  };\n\n\n    return (\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n          {RetentionParameterSuccessMessage && (\n            <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\n          )}\n          {TimeDelaySuccessMessage && (\n            <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\n          )}\n          {PublishTimeSuccessMessage && (\n            <SuccessMessage message={PublishTimeSuccessMessage} onClose={() => setPublishTimeSuccessMessage('')}/>\n          )}\n          {errorMessage && (\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n          )}\n          </Grid>\n    \n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\">Retention Parameters</Typography>\n              <form>\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\n                  <div key={index} style={{ marginBottom: '20px' }}>\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                      {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\n                        <TextField\n                          key={unitIndex}\n                          label={unit.charAt(0).toUpperCase() + unit.slice(1)}\n                          type=\"number\"\n                          value={retentionParameters[param][unit]}\n                          onChange={(e) => handleRetentionParameterChange(param, unit, e.target.value)}\n                          fullWidth\n                          style={{ marginRight: '10px' }}\n                          inputProps={{\n                            min: 0,\n                            max: unit === 'days' ? 31 : unit === 'hours' ? 24 : 60,\n                          }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                ))}\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                  <Button\n                    onClick={handleReset}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    style={{ marginRight: '10px' }}\n                  >\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={handleRetentionParameterSubmit}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={!valuesChanged} // Disable if values have not changed\n                  >\n                    Submit\n                  </Button>\n                </div>\n              </form>\n            </Paper>\n          </Grid>\n    \n    \n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\">Time Delay Parameters</Typography>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\n                <TextField\n                  label=\"Minutes\"\n                  type=\"number\"\n                  value={timeDelayParameters.minutes}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setTimeDelayParameters((prev) => ({\n                      ...prev,\n                      minutes: newValue,\n                    }));\n                    setIsTimeDelayFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                <TextField\n                  label=\"Seconds\"\n                  type=\"number\"\n                  value={timeDelayParameters.seconds}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setTimeDelayParameters((prev) => ({\n                      ...prev,\n                      seconds: newValue,\n                    }));\n                    setIsTimeDelayFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                </div>\n                <Button\n                  onClick={handleTimeDelayParameterSubmit}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  style={{ marginBottom: '15px' }}\n                  disabled={!isTimeDelayFormValid} // Disable the button when the form is not valid\n                >\n                  Submit\n                </Button>\n              </div>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\"> Publish Time</Typography>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\n                <TextField\n                  label=\"Days\"\n                  type=\"number\"\n                  value={publishTimeParameters.days}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 31);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      days: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 31,\n                  }}\n                />\n                <TextField\n                  label=\"Hours\"\n                  type=\"number\"\n                  value={publishTimeParameters.hours}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 24);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      hours: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 24,\n                  }}\n                />\n                <TextField\n                  label=\"Minutes\"\n                  type=\"number\"\n                  value={publishTimeParameters.minutes}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      minutes: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                <TextField\n                  label=\"Seconds\"\n                  type=\"number\"\n                  value={publishTimeParameters.seconds}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      seconds: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                </div>\n                <Button\n                  onClick={handlePublishTimeParameterSubmit}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  style={{ marginBottom: '15px' }}\n                  disabled={!isPublishTimeFormValid} // Disable the button when the form is not valid\n                >\n                  Submit\n                </Button>\n              </div>\n            </Paper>\n          </Grid>\n        </Grid>  \n    );\n}\n    \nexport default RetentionParameterForm;","import { Col, Row } from \"reactstrap\";\r\n// import SalesChart from \"../components/dashboard/SalesChart\";\r\n// import Feeds from \"../components/dashboard/Feeds\";\r\n// import TopCards from \"../components/dashboard/TopCards\";\r\n// import Blog from \"../components/dashboard/Blog\";\r\nimport DeviceRegisterTable from \"../components/dashboard/GetDevice\";\r\nimport NodeParameterTable from \"../components/dashboard/NodeParameter\"\r\nimport bg1 from \"../assets/images/bg/bg1.jpg\";\r\nimport bg2 from \"../assets/images/bg/bg2.jpg\";\r\nimport bg3 from \"../assets/images/bg/bg3.jpg\";\r\nimport bg4 from \"../assets/images/bg/bg4.jpg\";\r\nimport RetentionParameterForm from \"../components/dashboard/Retention\";\r\nimport WifiList from \"../components/dashboard/GetWifi\"\r\n\r\n// eslint-disable-next-line\r\nconst BlogData = [\r\n  {\r\n    image: bg1,\r\n    title: \"This is simple blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg2,\r\n    title: \"Lets be simple blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg3,\r\n    title: \"Don't Lamp blog\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n  {\r\n    image: bg4,\r\n    title: \"Simple is beautiful\",\r\n    subtitle: \"2 comments, 1 Like\",\r\n    description:\r\n      \"This is a wider card with supporting text below as a natural lead-in to additional content.\",\r\n    btnbg: \"primary\",\r\n  },\r\n];\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      {/* <p>{config}</p> */}\r\n      {/***Top Cards***/}\r\n      {/* <Row>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-success text-success\"\r\n            title=\"Profit\"\r\n            subtitle=\"Yearly Earning\"\r\n            earning=\"$21k\"\r\n            icon=\"bi bi-wallet\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-danger text-danger\"\r\n            title=\"Refunds\"\r\n            subtitle=\"Refund given\"\r\n            earning=\"$1k\"\r\n            icon=\"bi bi-coin\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-warning text-warning\"\r\n            title=\"New Project\"\r\n            subtitle=\"Yearly Project\"\r\n            earning=\"456\"\r\n            icon=\"bi bi-basket3\"\r\n          />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"3\">\r\n          <TopCards\r\n            bg=\"bg-light-info text-into\"\r\n            title=\"Sales\"\r\n            subtitle=\"Weekly Sales\"\r\n            earning=\"210\"\r\n            icon=\"bi bi-bag\"\r\n          />\r\n        </Col>\r\n      </Row> */}\r\n      {/***Sales & Feed***/}\r\n      <Row>\r\n        <Col xxl=\"12\">\r\n          <NodeParameterTable />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <DeviceRegisterTable />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <RetentionParameterForm />\r\n        </Col>\r\n        <Col xxl=\"12\">\r\n          <WifiList />\r\n        </Col>\r\n      </Row>\r\n      {/***Table ***/}\r\n      {/* <Row>\r\n        <Col lg=\"7\" xxl=\"8\" md=\"12\">\r\n          <DeviceRegisterTable />\r\n        </Col>\r\n        <Col md=\"12\" lg=\"5\" xxl=\"4\">\r\n          <Feeds />\r\n        </Col>\r\n      </Row> */}\r\n      \r\n      {/***Blog Cards***/}\r\n      {/* <Row>\r\n        {BlogData.map((blg, index) => (\r\n          <Col sm=\"6\" lg=\"6\" xl=\"3\" key={index}>\r\n            <Blog\r\n              image={blg.image}\r\n              title={blg.title}\r\n              subtitle={blg.subtitle}\r\n              text={blg.description}\r\n              color={blg.btnbg}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["WifiList","wifiList","setWifiList","useState","selectedNetwork","setSelectedNetwork","password","setPassword","showPassword","setShowPassword","isDialogOpen","setDialogOpen","useEffect","fetch","then","response","json","data","Array","isArray","ssids","console","error","catch","handleDialogClose","_jsxs","Container","children","_jsx","style","position","top","right","padding","marginRight","IconButton","onClick","handleDialogOpen","color","WifiIcon","Dialog","open","onClose","DialogTitle","DialogContent","display","flexDirection","alignItems","FormControl","InputLabel","id","marginTop","Select","labelId","value","onChange","event","target","label","width","map","ssid","index","MenuItem","TextField","margin","type","InputProps","endAdornment","InputAdornment","handleTogglePasswordVisibility","VisibilityOffIcon","fontSize","VisibilityIcon","DialogActions","Button","handleSubmit","jsonData","method","headers","body","JSON","stringify","text","log","RetentionParameterForm","setData","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","PublishTimeSuccessMessage","setPublishTimeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","valuesChanged","setValuesChanged","timeDelayParameters","setTimeDelayParameters","publishTimeParameters","setPublishTimeParameters","isTimeDelayFormValid","setIsTimeDelayFormValid","isPublishTimeFormValid","setIsPublishTimeFormValid","setTimeout","async","responseData","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","retentionValues","find","param","name","timeDelayValues","publishTImeValues","fetchData","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","Grid","container","spacing","item","xs","Paper","marginBottom","Typography","variant","replace","unit","unitIndex","charAt","toUpperCase","slice","e","handleRetentionParameterChange","integerValue","parseInt","isNaN","prevParameters","fullWidth","inputProps","min","max","justifyContent","handleReset","check_frequency","success_retention","failure_retention","retention_parameter","ok","concat","statusText","disabled","newValue","Math","prev","step","time_delay","publish_time","Home","Row","Col","xxl","NodeParameterTable","DeviceRegisterTable"],"sourceRoot":""}