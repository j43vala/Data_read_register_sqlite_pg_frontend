{"version":3,"file":"static/js/359.06409e5d.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Remove.js","components/dashboard/NodeParameter.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport { Add as AddIcon, Remove as RemoveIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst NodeParameterTable = () => {\n  const [data, setData] = useState(null);\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\n  const [updatedAttributes, setUpdatedAttributes] = useState([]);\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\n  const [formDataList, setFormDataList] = useState([]);\n  const [selectedModbus, setSelectedModbus] = useState({\n    port: '',\n    method: '',\n    parity: '',\n    baudrate: '',\n    stopbits: '',\n    wordLength: '',\n  });\n\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\n  const [updatedClientId, setUpdatedClientId] = useState('');\n  const [updatedClientPassword, setUpdatedClientPassword] = useState('');\n  const [updatedQos, setUpdatedQos] = useState('');\n  const [qosOptions, setQosOptions] = useState([]);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isStopping, setIsStopping] = useState(false);\n  const [restartButtonClicked] = useState(false);\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setModbusSuccessMessage('');\n      setSPBSuccessMessage('');\n      setNodeAttributeSuccessMessage('');\n      setMqttSuccessMessage('');\n      setServiceStartSuccessMessage('');\n      setServiceStopSuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`/node-parameter/`);\n        const responseData = await response.json();\n        setData(responseData);\n\n        if (responseData.node_parameters) {\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\n          if (modbusValues) {\n            setSelectedModbus(modbusValues);\n          }\n          const mqttValues = responseData.node_parameters.find(param => param.name === 'mqtt')?.value;\n          if (mqttValues) {\n            setQosOptions(mqttValues.qos_options || []);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\n\n  const uniqueBaudrateList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options)];\n  const uniqueWordLengthList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options)];\n  const uniqueParityList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options)];\n  const uniqueStopbitsList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options)];\n  const uniquePortList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.port_options)];\n  const uniqueMethodList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.method_options)];\n\n  const handleUpdateSpbParameterFormOpen = () => {\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\n    setUpdatedGroupId(spbParameter?.group_id || '');\n    setUpdateSpbParameterFormOpen(true);\n  };\n\n  const handleAddNodeAttributeFormOpen = () => {\n    setFormDataList([{ name: '', value: '' }]);\n    setAddNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateNodeAttributeFormOpen = () => {\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\n    setUpdatedAttributes(initialUpdatedAttributes);\n    setUpdateNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateMqttFormOpen = () => {\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\n    setUpdatedQos(mqtt?.qos || '');\n    setUpdatedClientId(mqtt?.user || '');\n    setUpdatedClientPassword(mqtt?.password || '');\n    setUpdateMqttFormOpen(true);\n    setQosOptions(mqtt?.qos_options || []); // Set the QoS options here\n  };\n  \n\n  const handleUpdateFormClose = () => {\n    setUpdateSpbParameterFormOpen(false);\n    setAddNodeAttributeFormOpen(false);\n    setUpdateNodeAttributeFormOpen(false);\n    setUpdateMqttFormOpen(false);\n  };\n\n  const handleUpdateSpbParameterSubmit = async () => {\n    const updatedData = {\n      spb_parameter: {\n        edge_node_id: updatedEdgeNodeId,\n        group_id: updatedGroupId,\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/3`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setSPBSuccessMessage('SPB Parameter updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'spb_parameter' ?\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleFormDataChange = (index, key, value) => {\n    const updatedFormDataList = [...formDataList];\n    updatedFormDataList[index][key] = value;\n    setFormDataList(updatedFormDataList);\n  };\n\n  const handleAddFormData = () => {\n    setFormDataList([...formDataList, { name: '', value: '' }]);\n  };\n\n  const handleRemoveFormData = (indexToRemove) => {\n    setFormDataList((prevFormDataList) => {\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\n    });\n  };\n\n\n  const handleUpdateInputChange = (index, updatedAttribute) => {\n    setUpdatedAttributes(prevAttributes => {\n      const updatedAttributesCopy = [...prevAttributes];\n      updatedAttributesCopy[index] = updatedAttribute;\n      return updatedAttributesCopy;\n    });\n  };\n\n  const handleRemoveAttribute = (index) => {\n    const updatedAttributesCopy = [...updatedAttributes];\n    updatedAttributesCopy.splice(index, 1);\n    setUpdatedAttributes(updatedAttributesCopy);\n  };\n\n  const handleAddNodeAttributeSubmit = async () => {\n    try {\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\n      const response = await fetch(`/node-parameter/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'node_attributes',\n          value: newAttributes,\n        }),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'node_attributes' ?\n              { ...param, value: [...(param.value || []), ...newAttributes] }\n              : param\n          )),\n        }));\n        setFormDataList([]);\n      } else {\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateNodeAttributeSubmit = async () => {\n    setData((prevData) => {\n      const updatedNodeParameters = prevData.node_parameters.map((param) => {\n        if (param.name === 'node_attributes') {\n          return {\n            ...param,\n            value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n          };\n        }\n        return param;\n      });\n\n      return {\n        ...prevData,\n        node_parameters: updatedNodeParameters,\n      };\n    });\n\n    const updatedData = {\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/4`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Node Attribute:  ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateMqttSubmit = async () => {\n    const updatedData = {\n      mqtt: {\n        broker_host: updatedBrokerHost,\n        broker_port: updatedBrokerPort,\n        user: updatedClientId,\n        password: updatedClientPassword,\n        qos: updatedQos,\n        qos_options: qosOptions, // Preserve the existing qos_options\n      },\n    };\n  \n    try {\n      const response = await fetch(`/node-parameter/2`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n  \n      if (response.ok) {\n        const responseData = await response.json();\n  \n        console.log('Response Data:', responseData);\n  \n        setMqttSuccessMessage('Mqtt updated successfully');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'mqtt'\n              ? { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort, user: updatedClientId, password: updatedClientPassword, qos: updatedQos, qos_options: responseData.qos_options || [] } }\n              : param\n          )),\n        }));\n  \n        // Update qosOptions with the new options received from the server\n        setQosOptions(responseData.qos_options || []); // <-- Update qosOptions here\n      } else {\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Mqtt: ${error}`);\n    }\n  \n    handleUpdateFormClose();\n  };\n  \n  \n  \n\n  const handleModbusChange = async (paramName, value) => {\n    try {\n      const response = await fetch(`/node-parameter/1`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          modbus: { ...selectedModbus, [paramName]: value },\n        }),\n      });\n\n      if (response.ok) {\n        setModbusSuccessMessage('Modbus updated successfully.');\n        setSelectedModbus((prevState) => ({\n          ...prevState,\n          [paramName]: value,\n        }));\n      } else {\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Modbus: ${error}`);\n    }\n  };\n\n  const handleRestart = () => {\n    setIsRestarting(true);\n\n    fetch(`/service/restart-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStartSuccessMessage('Service is restarting.');\n        } else {\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error restarting service: ${error}`);\n      })\n      .finally(() => {\n        setIsRestarting(false);\n      });\n  };\n\n  const handleStop = () => {\n    setIsStopping(true);\n\n    fetch(`/service/stop-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStopSuccessMessage('Service is stopped.');\n        } else {\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error stopping service: ${error}`);\n      })\n      .finally(() => {\n        setIsStopping(false);\n      });\n  };\n\n  // Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n      {ServiceStartSuccessMessage && (\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\n      )}\n      {ServiceStopSuccessMessage && (\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\n      )}\n      {NodeAttributeSuccessMessage && (\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\n      )}\n      {SPBSuccessMessage && (\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \n      )}\n      {MqttSuccessMessage && (\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\n      )}\n      {ModbusSuccessMessage && (\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\n      )}\n      {errorMessage && (\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n      )}\n      </Grid>\n      <Grid item xs={6}>\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" color=\"primary\">\n            Restart\n          </Button>\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\n            Stop\n          </Button>\n        </div>\n      </Grid>\n        \n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\" >Node Attributes</Typography>\n            <div style={{ display: 'flex', gap: '0px' }}>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginRight: '0px' }}\n                onClick={handleUpdateNodeAttributeFormOpen}\n              >\n                <EditIcon style={{ fontSize : \"medium\" }}/>\n              </IconButton>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginLeft: '5px' }}\n                onClick={handleAddNodeAttributeFormOpen}\n              >\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          </div>\n          <div style={{ marginTop: '3px' }}>\n            {nodeAttributes && nodeAttributes.map(attr => (\n              <div key={attr.name}>\n                <Typography variant=\"body1\">\n                  <strong>{attr.name}:</strong> {attr.value}\n                </Typography>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">SPB Parameter</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateSpbParameterFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Edge Node Id:</strong> {spbParameter?.edge_node_id}\n          </div>\n          <div>\n            <strong>Group Id:</strong> {spbParameter?.group_id}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">MQTT</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateMqttFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div style={{ marginRight: '60px' }}>\n              <strong>Broker Port:</strong> {mqtt?.broker_port}\n            </div>\n            {/* <div>\n              <strong>QoS:</strong> {mqtt?.qos}\n            </div> */}\n          </div>\n          <div>\n            <strong>Client ID:</strong> {mqtt?.user}\n          </div>\n          <div>\n            <strong>Client Password:</strong> {mqtt?.password}\n          </div>\n        </Paper>\n      </Grid>\n\n\n      <Grid item xs={12}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\n                <FormControl fullWidth>\n                  <InputLabel>{label}</InputLabel>\n                  <Select\n                    value={selectedModbus[label.toLowerCase()]}\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\n                  >\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\n                      <MenuItem key={baudrate} value={baudrate}>\n                        {baudrate}\n                      </MenuItem>\n                    ))}\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\n                      <MenuItem key={wordLength} value={wordLength}>\n                        {wordLength}\n                      </MenuItem>\n                    ))}\n                    {label === 'Parity' && uniqueParityList.map(parity => (\n                      <MenuItem key={parity} value={parity}>\n                        {parity}\n                      </MenuItem>\n                    ))}\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\n                      <MenuItem key={stopbits} value={stopbits}>\n                        {stopbits}\n                      </MenuItem>\n                    ))}\n                    {label === 'Port' && uniquePortList.map(port => (\n                      <MenuItem key={port} value={port}>\n                        {port}\n                      </MenuItem>\n                    ))}\n                    {label === 'Method' && uniqueMethodList.map(method => (\n                      <MenuItem key={method} value={method}>\n                        {method}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      {/* Update form for SPB Parameter */}\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update SPB Parameter</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Edge Node ID\"\n            value={updatedEdgeNodeId}\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\n          />\n          <TextField\n            label=\"Group ID\"\n            value={updatedGroupId}\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit form for Node Attribute */}\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Edit Node Attribute</DialogTitle>\n        <DialogContent>\n          {updatedAttributes.map((attr, index) => (\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n              <TextField\n                label=\"Attribute Name\"\n                value={attr.name}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\n                style={{ marginRight: '10px', marginTop: '5px' }}\n              />\n              <TextField\n                label=\"Attribute Value\"\n                value={attr.value}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\n                style={{ marginTop: '5px' }}\n              />\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      {/* Create form for Add Node Attribute */}\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Add Node Attribute</DialogTitle>\n        <DialogContent>\n          {formDataList.map((formData, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Name\"\n                  value={formData.name}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Value\"\n                  value={formData.value}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                {index > 0 && (\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={2}>\n                {index === formDataList.length - 1 && (\n                  <IconButton onClick={handleAddFormData}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      {/* Update form for Mqtt */}\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update Mqtt</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Broker Host\"\n            value={updatedBrokerHost}\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Broker Port\"\n            value={updatedBrokerPort}\n            style={{ marginBottom: '16px' }}\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\n            fullWidth\n          />\n          {/* <TextField\n            label=\"Qos\"\n            select\n            value={updatedQos}\n            style={{ marginBottom: '16px' }}\n            onChange={(e) => setUpdatedQos(e.target.value)}\n            fullWidth\n          >\n            {qosOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField> */}\n          <TextField\n            label=\"Client ID\"\n            value={updatedClientId}\n            onChange={(e) => setUpdatedClientId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px' }}\n          />\n          <TextField\n            label=\"Client Password\"\n            value={updatedClientPassword}\n            onChange={(e) => setUpdatedClientPassword(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n\nexport default NodeParameterTable;"],"names":["createSvgIcon","_jsx","d","NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","updatedClientId","setUpdatedClientId","updatedClientPassword","setUpdatedClientPassword","updatedQos","setUpdatedQos","qosOptions","setQosOptions","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","modbusValues","find","param","name","value","mqttValues","qos_options","error","console","fetchData","children","spbParameter","nodeAttributes","mqtt","uniqueBaudrateList","Set","baudrate_options","uniqueWordLengthList","wordlength_options","uniqueParityList","parity_options","uniqueStopbitsList","stopbits_options","uniquePortList","port_options","uniqueMethodList","method_options","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","handleUpdateInputChange","updatedAttribute","prevAttributes","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","concat","statusText","catch","finally","disabled","variant","color","handleStop","marginLeft","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","EditIcon","fontSize","handleAddNodeAttributeFormOpen","AddIcon","marginTop","handleUpdateSpbParameterFormOpen","edge_node_id","group_id","handleUpdateMqttFormOpen","broker_host","broker_port","qos","user","password","flexDirection","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","Dialog","open","DialogTitle","DialogContent","TextField","DialogActions","updatedData","spb_parameter","prevData","splice","handleRemoveAttribute","DeleteIcon","updatedNodeParameters","node_attributes","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes","log"],"sourceRoot":""}