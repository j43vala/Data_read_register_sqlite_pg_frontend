{"version":3,"file":"static/js/229.6cd9f944.chunk.js","mappings":"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","sources":["components/dashboard/Retention.js","views/Retention.js","../node_modules/@mui/material/Typography/typographyClasses.js","../node_modules/@mui/material/Typography/Typography.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Alert,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n} from '@mui/material';\r\n\r\n// const baseUrl = process.env.REACT_APP_BASEURL;\r\n\r\nconst RetentionParameterForm= () => {\r\n    const [data, setData] = useState(null);\r\n    const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\r\n    const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\r\n    const [PublishTimeSuccessMessage, setPublishTimeSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [retentionParameters, setRetentionParameters] = useState({\r\n        checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\r\n        successRetention: { days: '', hours: '', minutes: '', seconds: '' },\r\n        failureRetention: { days: '', hours: '', minutes: '', seconds: '' }\r\n    });\r\n    const [valuesChanged, setValuesChanged] = useState(false);\r\n    const [timeDelayParameters, setTimeDelayParameters] = useState({\r\n        minutes: '',\r\n        seconds: ''\r\n    });\r\n    const [publishTimeParameters, setPublishTimeParameters] = useState({\r\n      days: '',\r\n      hours: '',\r\n      minutes: '',\r\n      seconds: ''\r\n    });\r\n    // const [isFormValid, setIsFormValid] = useState(false);\r\n    // Separate state for form validity and submit button for Time Delay\r\n    const [isTimeDelayFormValid, setIsTimeDelayFormValid] = useState(false);\r\n\r\n    // Separate state for form validity and submit button for Publish Time\r\n    const [isPublishTimeFormValid, setIsPublishTimeFormValid] = useState(false);\r\n\r\n    const clearMessagesAfterDelay = () => {\r\n        setTimeout(() => {\r\n        setRetentionParameterSuccessMessage('');\r\n        setTimeDelaySuccessMessage('');\r\n        setPublishTimeSuccessMessage('');\r\n        setErrorMessage('');\r\n        setSuccessMessage('');\r\n    }, 5000);\r\n    };\r\n\r\n    useEffect(() => {\r\n    clearMessagesAfterDelay();\r\n    }, [RetentionParameterSuccessMessage, TimeDelaySuccessMessage, PublishTimeSuccessMessage, errorMessage, successMessage]);\r\n\r\n    useEffect(() => {\r\n    const fetchData = async () => {\r\n        try {\r\n        const response = await fetch(`/node-parameter/`);\r\n        const responseData = await response.json();\r\n        setData(responseData);\r\n        // console.log('responseData: ', responseData);\r\n    \r\n        // Initialize selectedModbus state with modbus values\r\n        if (responseData.node_parameters) {\r\n    \r\n            // Initialize retention parameters\r\n            const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\r\n            if (retentionValues) {\r\n            setRetentionParameters(retentionValues);\r\n            }\r\n\r\n            const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\r\n            if (timeDelayValues) {\r\n            setTimeDelayParameters(timeDelayValues);\r\n            }\r\n\r\n            const publishTImeValues = responseData.node_parameters.find(param => param.name === 'publish_time')?.value;\r\n            if (publishTImeValues) {\r\n            setPublishTimeParameters(publishTImeValues);\r\n            }\r\n        }\r\n        } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n    }, []);\r\n    \r\n    \r\n\r\n    if (!data) {\r\n    return <p>Loading...</p>;\r\n    }\r\n\r\n\r\n\r\n// Define SuccessMessage and ErrorMessage components\r\n  const SuccessMessage = ({ message}) => (\r\n    <Alert severity=\"success\" >\r\n      {message}\r\n    </Alert>\r\n  );\r\n\r\n  const ErrorMessage = ({ message}) => (\r\n    <Alert severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  );\r\n  \r\n  const handleRetentionParameterChange = (param, unit, value) => {\r\n    // Parse the input value as an integer\r\n    const integerValue = parseInt(value, 10);\r\n  \r\n    // Check if the parsed value is a valid integer\r\n    if (!isNaN(integerValue)) {\r\n      setRetentionParameters((prevParameters) => ({\r\n        ...prevParameters,\r\n        [param]: { ...prevParameters[param], [unit]: integerValue },\r\n      }));\r\n    }\r\n    // Set valuesChanged to true when any value changes\r\n    setValuesChanged(true);\r\n  };\r\n  \r\n  \r\n  const handleRetentionParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/5`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          retention_parameter: retentionParameters,\r\n        }),\r\n      });\r\n      // After successful submission, reset valuesChanged to false\r\n      setValuesChanged(false);\r\n\r\n      if (response.ok) {\r\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\r\n      } else {\r\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    // Replace the initialValues with your actual initial values\r\n    const initialValues = {\r\n      check_frequency: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n      success_retention: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n      failure_retention: {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n      },\r\n    };\r\n  \r\n    setRetentionParameters(initialValues);\r\n    setValuesChanged(false);\r\n  };\r\n  \r\n\r\n  const handleTimeDelayParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/6`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          time_delay: timeDelayParameters,\r\n        }),\r\n      });\r\n      // Assuming the submission is successful, disable the submit button\r\n      setIsTimeDelayFormValid(false);\r\n\r\n      if (response.ok) {\r\n        // Display success message or handle as needed\r\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\r\n      } else {\r\n        // Display error message or handle as needed\r\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      // Display error message or handle as needed\r\n      setErrorMessage(`Error updating Time Delay: ${error}`);\r\n    }\r\n  };\r\n\r\n  const handlePublishTimeParameterSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`/node-parameter/7`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          publish_time: publishTimeParameters,\r\n        }),\r\n      });\r\n      // Assuming the submission is successful, disable the submit button\r\n      setIsPublishTimeFormValid(false);\r\n\r\n      if (response.ok) {\r\n        // Display success message or handle as needed\r\n        setPublishTimeSuccessMessage('Publish Time updated successfully.');\r\n      } else {\r\n        // Display error message or handle as needed\r\n        setErrorMessage(`Failed to update Publish Time: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      // Display error message or handle as needed\r\n      setErrorMessage(`Error updating Publish Time: ${error}`);\r\n    }\r\n  };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12}>\r\n          {RetentionParameterSuccessMessage && (\r\n            <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\r\n          )}\r\n          {TimeDelaySuccessMessage && (\r\n            <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\r\n          )}\r\n          {PublishTimeSuccessMessage && (\r\n            <SuccessMessage message={PublishTimeSuccessMessage} onClose={() => setPublishTimeSuccessMessage('')}/>\r\n          )}\r\n          {errorMessage && (\r\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\r\n          )}\r\n          </Grid>\r\n    \r\n          {/* <Grid item xs={4}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">Retention Parameters</Typography>\r\n              <form>\r\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n                  <div key={index} style={{ marginBottom: '20px' }}>\r\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                      <TextField\r\n                        key={unitIndex}\r\n                        label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                        type=\"number\"\r\n                        value={retentionParameters[param][unit]}\r\n                        onChange={(e) => {\r\n                          let enteredValue = parseInt(e.target.value, 10);\r\n                          const maxValue = unit === 'days' ? 31 : unit === 'hours' ? 24 : 60;\r\n\r\n                          // If the entered value is greater than the maximum, set it to the maximum\r\n                          if (enteredValue > maxValue) {\r\n                            enteredValue = maxValue;\r\n                          }\r\n\r\n                          handleRetentionParameterChange(param, unit, enteredValue);\r\n                        }}\r\n                        fullWidth\r\n                        style={{ marginRight: '10px' }}\r\n                        inputProps={{\r\n                          min: 0,\r\n                          max: unit === 'days' ? 31 : unit === 'hours' ? 24 : 60,\r\n                        }}\r\n                      />\r\n                    ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    onClick={handleReset}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginRight: '10px' }}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleRetentionParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    disabled={!valuesChanged} // Disable if values have not changed\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </Paper>\r\n          </Grid> */}\r\n\r\n          <Grid item xs={4}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n              <Typography variant=\"h6\">Retention Parameters</Typography>\r\n              <form>\r\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\r\n                  <div key={index} style={{ marginBottom: '20px' }}>\r\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                      {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\r\n                        <TextField\r\n                          key={unitIndex}\r\n                          label={unit.charAt(0).toUpperCase() + unit.slice(1)}\r\n                          type=\"number\"\r\n                          value={retentionParameters[param][unit]}\r\n                          onChange={(e) => {\r\n                            let enteredValue = parseInt(e.target.value, 10);\r\n                            const maxValue = unit === 'hours' ? 24 : unit === 'minutes' || unit === 'seconds' ? 60 : undefined;\r\n\r\n                            // If the entered value is greater than the maximum, set it to the maximum\r\n                            if (maxValue !== undefined && enteredValue > maxValue) {\r\n                              enteredValue = maxValue;\r\n                            }\r\n\r\n                            handleRetentionParameterChange(param, unit, enteredValue);\r\n                          }}\r\n                          fullWidth\r\n                          style={{ marginRight: '10px' }}\r\n                          inputProps={{\r\n                            min: 0,\r\n                            max: unit === 'minutes' || unit === 'seconds' ? 60 : undefined,\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    onClick={handleReset}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    style={{ marginRight: '10px' }}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleRetentionParameterSubmit}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    disabled={!valuesChanged} // Disable if values have not changed\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          <Grid item xs={3}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            {/* <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}> */}\r\n              <Typography variant=\"h6\">Time Delay Parameters</Typography>\r\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                <TextField\r\n                  label=\"Minutes\"\r\n                  type=\"number\"\r\n                  value={timeDelayParameters.minutes}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setTimeDelayParameters((prev) => ({\r\n                      ...prev,\r\n                      minutes: newValue,\r\n                    }));\r\n                    setIsTimeDelayFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Seconds\"\r\n                  type=\"number\"\r\n                  value={timeDelayParameters.seconds}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setTimeDelayParameters((prev) => ({\r\n                      ...prev,\r\n                      seconds: newValue,\r\n                    }));\r\n                    setIsTimeDelayFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                </div>\r\n                <Button\r\n                  onClick={handleTimeDelayParameterSubmit}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ marginBottom: '15px' }}\r\n                  disabled={!isTimeDelayFormValid} // Disable the button when the form is not valid\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          <Grid item xs={5}>\r\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            {/* <Paper style={{ padding: '20px', marginBottom: '20px', backgroundColor: 'rgb(253, 242, 233)' }}> */}\r\n              <Typography variant=\"h6\"> Publish Time</Typography>\r\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\r\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\r\n                <TextField\r\n                  label=\"Days\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.days}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 31);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      days: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 31,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Hours\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.hours}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 24);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      hours: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 24,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Minutes\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.minutes}\r\n                  style={{ marginRight: '5px' }}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      minutes: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  label=\"Seconds\"\r\n                  type=\"number\"\r\n                  value={publishTimeParameters.seconds}\r\n                  onChange={(e) => {\r\n                    let newValue = parseInt(e.target.value) || 0;\r\n                    // Set upper limit to 60\r\n                    newValue = Math.min(newValue, 60);\r\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\r\n    \r\n                    setPublishTimeParameters((prev) => ({\r\n                      ...prev,\r\n                      seconds: newValue,\r\n                    }));\r\n                    setIsPublishTimeFormValid(true);\r\n                  }}\r\n                  inputProps={{\r\n                    step: 1,\r\n                    min: 0,\r\n                    max: 60,\r\n                  }}\r\n                />\r\n                </div>\r\n                <Button\r\n                  onClick={handlePublishTimeParameterSubmit}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                  style={{ marginBottom: '15px' }}\r\n                  disabled={!isPublishTimeFormValid} // Disable the button when the form is not valid\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>  \r\n    );\r\n}\r\n    \r\nexport default RetentionParameterForm;","import React from 'react'\r\nimport RetentionParameterForm from '../components/dashboard/Retention'\r\n\r\nconst Retention = () => {\r\n  return (\r\n    <div>\r\n      <h1>Retention</h1>\r\n        <RetentionParameterForm />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Retention","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"align\", \"className\", \"component\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0\n}, ownerState.variant === 'inherit' && {\n  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.\n  font: 'inherit'\n}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {\n  textAlign: ownerState.align\n}, ownerState.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, ownerState.gutterBottom && {\n  marginBottom: '0.35em'\n}, ownerState.paragraph && {\n  marginBottom: 16\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\n\n// TODO v6: deprecate these color values in v5.x and remove the transformation in v6\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const color = transformDeprecatedColors(themeProps.color);\n  const props = extendSxProp(_extends({}, themeProps, {\n    color\n  }));\n  const {\n      align = 'inherit',\n      className,\n      component,\n      gutterBottom = false,\n      noWrap = false,\n      paragraph = false,\n      variant = 'body1',\n      variantMapping = defaultVariantMapping\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object\n} : void 0;\nexport default Typography;"],"names":["RetentionParameterForm","data","setData","useState","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","PublishTimeSuccessMessage","setPublishTimeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","valuesChanged","setValuesChanged","timeDelayParameters","setTimeDelayParameters","publishTimeParameters","setPublishTimeParameters","isTimeDelayFormValid","setIsTimeDelayFormValid","isPublishTimeFormValid","setIsPublishTimeFormValid","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","retentionValues","find","param","name","value","timeDelayValues","publishTImeValues","error","console","fetchData","_jsx","children","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","Paper","style","padding","marginBottom","Typography","variant","map","index","replace","display","flexDirection","unit","unitIndex","TextField","label","charAt","toUpperCase","slice","type","onChange","e","enteredValue","parseInt","target","maxValue","undefined","handleRetentionParameterChange","integerValue","isNaN","prevParameters","fullWidth","marginRight","inputProps","min","max","justifyContent","Button","onClick","handleReset","check_frequency","success_retention","failure_retention","color","method","headers","body","JSON","stringify","retention_parameter","ok","concat","statusText","disabled","marginTop","newValue","Math","prev","step","time_delay","publish_time","Retention","getTypographyUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TypographyRoot","styled","overridesResolver","props","styles","ownerState","root","align","capitalize","noWrap","gutterBottom","paragraph","theme","_extends","margin","font","typography","textAlign","overflow","textOverflow","whiteSpace","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","colorTransformations","primary","textPrimary","secondary","textSecondary","React","inProps","ref","themeProps","useThemeProps","transformDeprecatedColors","extendSxProp","className","component","variantMapping","other","_objectWithoutPropertiesLoose","Component","classes","slots","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}