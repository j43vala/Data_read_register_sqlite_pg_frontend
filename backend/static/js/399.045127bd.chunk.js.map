{"version":3,"file":"static/js/399.045127bd.chunk.js","mappings":"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","sources":["components/dashboard/GetDevice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n  TextField,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  Collapse,\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n// import CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport EditIcon from '@mui/icons-material/Edit';\nimport { makeStyles } from '@material-ui/core/styles';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(2),\n  },\n  headerText: {\n    fontFamily: 'Arial, sans-serif',\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#333',\n    marginRight: theme.spacing(2),\n  },\n  buttonGroup: {\n    marginLeft: 'auto',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  addButton: {\n    marginRight: theme.spacing(2),\n    backgroundColor: theme.palette.success.main,\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n    },\n  },\n  deleteButton: {\n    color: theme.palette.error.main,\n  },\n}));\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst DeviceParameterTable = () => {\n  const classes = useStyles();\n  const [devices, setDevices] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState('');\n  const [parameters, setParameters] = useState([]);\n  const [attributes, setAttributes] = useState([]);\n  const [selectedParameter, setSelectedParameter] = useState(null);\n  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);\n  const [updatedFunctionCode, setUpdatedFunctionCode] = useState('');\n  const [updatedAddress, setUpdatedAddress] = useState('');\n  const [updatedParameterName, setUpdatedParameterName] = useState('');\n  const [updatedDataType, setUpdatedDataType] = useState('');\n  const [updatedThreshold, setUpdatedThreshold] = useState('');\n  const [updatedAggregationType, setUpdatedAggregationType] = useState('');\n  const [updatedName, setUpdatedName] = useState('');\n  const [updatedValue, setUpdatedValue] = useState('');\n  const [deviceName, setDeviceName] = useState('');\n  const [slaveId, setSlaveId] = useState('');\n  const [deviceSuccessMessage, setDeviceSuccessMessage] = useState('');\n  const [parameterSuccessMessage, setParameterSuccessMessage] = useState('');\n  const [attributeSuccessMessage, setAttributeSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [isAddDeviceFormOpen, setIsAddDeviceFormOpen] = useState(false);\n  const [isAddParameterFormOpen, setIsAddParameterFormOpen] = useState(false);\n  const [isAddAttributeFormOpen, setIsAddAttributeFormOpen] = useState(false);\n  // eslint-disable-next-line\n  const [parameterToDelete, setParameterToDelete] = useState(null);\n  // eslint-disable-next-line\n  const [attributeToDelete, setAttributeToDelete] = useState(null);\n  const [isDeleteConfirmationOpen, setIsDeleteConfirmationOpen] = useState(false);\n  const [isDeleteAttributeConfirmationOpen, setIsDeleteAttributeConfirmationOpen] = useState(false);\n  const [selectedDeviceName, setSelectedDeviceName] = useState('');\n  // eslint-disable-next-line\n  const [selectedSlaveId, setSelectedSlaveId] = useState('');\n  const [updateDeviceFormOpen, setUpdateDeviceFormOpen] = useState(false);\n  const [updatedDeviceName, setUpdatedDeviceName] = useState('');\n  const [updatedSlaveId, setUpdatedSlaveId] = useState('');\n  const [isDeleteDeviceConfirmationOpen, setIsDeleteDeviceConfirmationOpen] = useState(false);\n  const [parameterFields, setParameterFields] = useState([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\n  const [attributeFields, setAttributeFields] = useState([{ name: '', value: ''}]);\n  const [selectedAttribute, setSelectedAttribute] = useState(null);\n  const [openUpdateAttributeDialog, setOpenUpdateAttributeDialog] = useState(false);\n  // const [open, setOpen] = useState(false);\n  const [parameterTableData, setParameterTableData] = useState([]);\n  const [expandedDeviceId, setExpandedDeviceId] = useState(null);\n  const [type, setType] = useState('');\n  const [company, setCompany] = useState('');\n  const [modelNumber, setModelNumber] = useState('');\n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setDeviceSuccessMessage('');\n      setParameterSuccessMessage('');\n      setAttributeSuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [deviceSuccessMessage, parameterSuccessMessage, attributeSuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        const response = await fetch(`/devices/`);\n        const data = await response.json();\n\n        if (Array.isArray(data.devices)) {\n          setDevices(data.devices);\n        } else {\n          setErrorMessage(`No Devices Available.!`);\n        }\n      } catch (error) {\n        setErrorMessage(`Error fetching devices: ${error}`);\n      }\n    };\n\n    fetchDevices();\n  }, []);\n\n  const handleDeviceChange = async (deviceId) => {\n    try {\n      console.log('Fetching device details for deviceId:', deviceId);\n  \n      const response = await fetch(`/devices/${encodeURIComponent(deviceId)}`);\n      const data = await response.json();\n      setExpandedDeviceId((prevId) => (prevId === deviceId ? null : deviceId));\n      // setOpen(true);\n  \n      if (data.device && Array.isArray(data.device.parameters)) {\n        if (data.device.parameters.length > 0) {\n          setParameters(data.device.parameters);\n          setSuccessMessage('');\n          setErrorMessage('');\n        } else {\n          setParameters([]);\n          setAttributes([]);\n        }\n      } else {\n        setParameters([]);\n        setErrorMessage('Error fetching Parameters and Attributes or no Parameters and Attributes connected to the selected device');\n      }\n\n      setSelectedDevice(deviceId);\n      if (data.device) {\n        setSelectedDeviceName(data.device.name);\n        setSelectedSlaveId(data.device.slave_id);\n        setAttributes(data.device.attributes); // Set connected attributes\n      }\n    } catch (error) {\n      console.error('Error fetching Device details:', error);\n      setErrorMessage('Error fetching Device details. Please try again.');\n    }\n  };\n  \n  const handleChange = (event) => {\n    const deviceId = event.target.value;\n    handleDeviceChange(deviceId);\n  }; \n  \n  const handleUpdateClick = (parameter) => {\n    setSelectedParameter(parameter);\n    setUpdatedFunctionCode(parameter.function_code);\n    setUpdatedAddress(parameter.address);\n    setUpdatedParameterName(parameter.parameter_name);\n    setUpdatedDataType(parameter.data_type);\n    setUpdatedThreshold(parameter.threshold);\n    setUpdatedAggregationType(parameter.aggregation_type);\n    setOpenUpdateDialog(true);\n  };\n  \n  const handleUpdateDialogClose = () => {\n    setOpenUpdateDialog(false);\n    setUpdatedFunctionCode('');\n    setUpdatedAddress('');\n    setUpdatedParameterName('');\n    setUpdatedDataType('');\n    setUpdatedThreshold('');\n    setUpdatedAggregationType('');\n  };\n\n  const handleUpdateSubmit = async () => {\n    if (!selectedParameter || !selectedParameter.id) {\n      setErrorMessage('No Parameter selected for update');\n      return;\n    }\n  \n    // Validate that the updated address field contains only integer values\n    if (!Number.isInteger(parseInt(updatedAddress, 10))) {\n      setErrorMessage('Please Insert Only Integer Values in the Address field!');\n      handleUpdateDialogClose();\n      return;\n    }\n  \n    const updatedValues = {\n      function_code: updatedFunctionCode,\n      address: updatedAddress,\n      parameter_name: updatedParameterName,\n      data_type: updatedDataType,\n      threshold: updatedThreshold,\n      aggregation_type: updatedAggregationType,\n    };\n  \n    try {\n      const response = await fetch(`/parameter/devices/${selectedDevice}/parameter/${selectedParameter.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedValues),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Failed to update Parameter: ${response.statusText}`);\n      }\n  \n      handleChange({ target: { value: selectedDevice } });\n      clearParameterForm();\n      handleUpdateDialogClose();\n      setParameterSuccessMessage('Parameter updated successfully!');\n    } catch (error) {\n      console.error('Error updating Parameter:', error);\n      clearParameterForm();\n      handleUpdateDialogClose();\n      setErrorMessage(`Error updating Parameter. ${error.message}`);\n    }\n  };\n  \n  const handleDeleteSubmit = async (parameter) => {\n    setIsDeleteConfirmationOpen(false);\n\n    try {\n      if (selectedDevice && parameter && parameter.id) {\n        const response = await fetch(`/parameter/devices/${selectedDevice}/parameter/${parameter.id}`, {\n          method: 'DELETE',\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete parameter: ${response.statusText}`);\n        }\n\n        setParameterSuccessMessage('Parameter deleted successfully!');\n        setErrorMessage('');\n\n        // Update the device list\n        const deviceResponse = await fetch(`/devices/${selectedDevice}`);\n        const deviceData = await deviceResponse.json();\n\n        if (deviceData.device && Array.isArray(deviceData.device.parameters)) {\n          setParameters(deviceData.device.parameters);\n        } else {\n          setParameters([]);\n        }\n\n        // Fetch devices to update the list\n        const devicesResponse = await fetch(`/devices/`);\n        const devicesData = await devicesResponse.json();\n\n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          console.error('Invalid response format for devices:', devicesData);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting Parameter:', error);\n      setErrorMessage(`Error deleting Parameter. ${error.message}`);\n    } finally {\n      setOpenUpdateDialog(false);\n      setSelectedParameter(null);\n    }\n  };\n\n  // eslint-disable-next-line\n  const handleDeleteClick = (parameter) => {  // Define handleDeleteClick explicitly\n    setSelectedParameter(parameter);\n    setIsDeleteConfirmationOpen(true);\n  };\n\n  // const createDevice = async () => {\n  //   if (deviceName && slaveId) {\n  //     const newDevice = { name: deviceName, slave_id: slaveId };\n\n  //     try {\n  //       const response = await fetch(`/devices/`, {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify(newDevice),\n  //       });\n\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n\n  //       setDeviceSuccessMessage('Device created successfully!');\n  //       clearDeviceForm();\n  //       setIsAddDeviceFormOpen(false);\n\n  //       // Fetch the updated list of devices\n  //       const devicesResponse = await fetch(`/devices/`);\n  //       const devicesData = await devicesResponse.json();\n\n  //       if (Array.isArray(devicesData.devices)) {\n  //         setDevices(devicesData.devices);\n  //       } else {\n  //         setErrorMessage(`Invalid response format for devices: ${devicesData}`);\n  //         clearDeviceForm();\n  //         setIsAddDeviceFormOpen(false);\n  //       }\n  //     } catch (error) {\n  //       console.error('Error creating device:', error);\n  //       setErrorMessage('Error creating device. Please try again.');\n  //       clearDeviceForm();\n  //       setIsAddDeviceFormOpen(false);\n  //     }\n  //   } else {\n  //     setErrorMessage('Both device name and slave ID are required');\n  //     clearDeviceForm();\n  //     setIsAddDeviceFormOpen(false);\n  //   }\n  // };\n  \n  const createDevice = async () => {\n    if (deviceName && slaveId) {\n      const newDevice = { name: deviceName, slave_id: slaveId };\n  \n      try {\n        // Create the device\n        const response = await fetch(`/devices/`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newDevice),\n        });\n  \n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n  \n        // Extract the newly created device from the response\n        const createdDevice = await response.json();\n        const deviceId = createdDevice.device_id; // Ensure that 'id' is the correct property name\n  \n        // Create default attributes for the newly created device\n        const defaultAttributes = [\n          { name: 'Device Name', value: newDevice.name },\n          { name: 'Slave ID', value: newDevice.slave_id },\n          { name: 'Type', value: type },\n          { name: 'Company', value: company },\n          { name: 'Model Number', value: modelNumber },\n        ];\n        console.log('defaultAttributes: ', defaultAttributes);\n        \n        // Create the connected attributes\n        const attributePayload = {\n          attributes: defaultAttributes.map((attribute) => ({\n            name: attribute.name,\n            value: attribute.value,\n          })),\n        };\n        \n        // Use the correct endpoint with the obtained deviceId\n        await fetch(`/attribute/devices/${deviceId}/attribute`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(attributePayload),\n        });\n                       \n        setDeviceSuccessMessage('Device created successfully!');\n        clearDeviceForm();\n        setIsAddDeviceFormOpen(false);\n  \n        // Fetch the updated list of devices\n        const devicesResponse = await fetch(`/devices/`);\n        const devicesData = await devicesResponse.json();\n  \n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          setErrorMessage(`Invalid response format for devices: ${devicesData}`);\n          clearDeviceForm();\n          setIsAddDeviceFormOpen(false);\n        }\n      } catch (error) {\n        console.error('Error creating device:', error);\n        setErrorMessage('Error creating device. Please try again.');\n        clearDeviceForm();\n        setIsAddDeviceFormOpen(false);\n      }\n    } else {\n      setErrorMessage('Both device name and slave ID are required');\n      clearDeviceForm();\n      setIsAddDeviceFormOpen(false);\n    }\n  };\n  \n\n  const handleUpdateDevice = async () => {\n    try {\n      const updatedDevice = { name: updatedDeviceName, slave_id: updatedSlaveId };\n  \n      await fetch(`/devices/${selectedDevice.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedDevice),\n      });\n  \n      // Fetch the updated list of devices\n      const devicesResponse = await fetch(`/devices/`);\n      const devicesData = await devicesResponse.json();\n  \n      if (Array.isArray(devicesData.devices)) {\n        // Update selected device details first\n        setSelectedDeviceName(updatedDeviceName);\n        setSelectedSlaveId(updatedSlaveId);\n  \n        // Then update the state of devices\n        setDevices(devicesData.devices);\n        setDeviceSuccessMessage('Device updated successfully!');\n      } else {\n        console.error('Invalid response format for devices:', devicesData);\n      }\n    } catch (error) {\n      console.error('Error updating device:', error);\n      setErrorMessage('Error updating device. Please try again.');\n    } finally {\n      setUpdateDeviceFormOpen(false);\n    }\n  };\n  \n  const handleDeleteDevice = async (deviceId) => {\n    try {  \n      // Send DELETE request to the server\n      await fetch(`/devices/${deviceId}`, {\n        method: 'DELETE',\n      });\n  \n      // Fetch the updated list of devices\n      const devicesResponse = await fetch(`/devices/`);\n      const devicesData = await devicesResponse.json();\n  \n      if (Array.isArray(devicesData.devices)) {\n        setDevices(devicesData.devices);\n        setParameters([]);\n        setAttributes([]);\n  \n        // Reset selected device details\n        setSelectedDevice(null);\n        setSelectedDeviceName('');\n        setSelectedSlaveId('');\n      } else {\n        console.error('Invalid response format for devices:', devicesData);\n      }\n  \n      setDeviceSuccessMessage('Device deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting device:', error);\n      setErrorMessage('Error deleting device. Please try again.');\n    } finally {\n      // Close the confirmation dialog and any other necessary actions\n      setIsDeleteDeviceConfirmationOpen(false);\n      setOpenUpdateDialog(false);\n      setSelectedParameter(null);\n      setSelectedAttribute(null);\n    }\n  };\n  \n  const handleOpenUpdateDeviceForm = (deviceId) => {\n    const selectedDevice = devices.find((device) => device.id === deviceId);\n\n    setUpdatedDeviceName(selectedDevice.name);\n    setUpdatedSlaveId(selectedDevice.slave_id);\n    setSelectedDevice(selectedDevice);\n    setUpdateDeviceFormOpen(true);\n  };\n\n  const handleCloseUpdateDeviceForm = () => {\n    setUpdateDeviceFormOpen(false);\n  };\n\n  const handleDeleteDeviceClick = (deviceId, deviceName) => {\n    setSelectedDevice(deviceId);\n    setSelectedDeviceName(deviceName);\n    setIsDeleteDeviceConfirmationOpen(true);\n  };\n\n  const handleDeleteDeviceConfirmationClose = () => {\n    setIsDeleteDeviceConfirmationOpen(false);\n  };\n\n  const handleDeleteDeviceDialogClose = () => {\n    setIsDeleteConfirmationOpen(false);\n  };\n\n  const clearDeviceForm = () => {\n    setDeviceName('');\n    setSlaveId('');\n    setType('');\n    setCompany('');\n    setModelNumber('');\n  };\n  \n  const handleAddDeviceClick = () => {\n    setIsAddDeviceFormOpen(true);\n  };\n  \n  const handleAddParameterClick = () => {\n    setIsAddParameterFormOpen(true);\n  };\n  \n  const handleAddDeviceFormClose = () => {\n    setIsAddDeviceFormOpen(false);\n    clearDeviceForm();\n  };\n  \n  const handleAddParameterFormClose = () => {\n    setIsAddParameterFormOpen(false);\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]); // Reset fields\n    clearParameterForm();\n  };\n\n  const handleDeleteParameterDialogClose = () => {\n    setIsDeleteConfirmationOpen(false);\n    setParameterToDelete(null);\n  };\n\n  const handleDeleteParameterClick = (parameter) => {\n    setSelectedParameter(parameter);\n    setIsDeleteConfirmationOpen(true);\n  }; \n\n  const clearParameterForm = () => {\n    setParameterFields([{ function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\n  };\n  \n  const handleAddParameterButtonClick = () => {\n    console.log('Add Parameter button clicked');\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\n    setIsAddParameterFormOpen(true);\n  };\n\n\n  const handleUpdateParameterDialogClose = () => {\n    setOpenUpdateDialog(false);\n    setUpdatedFunctionCode('');\n    setUpdatedAddress('');\n    setUpdatedParameterName('');\n    setUpdatedDataType('');\n    setUpdatedThreshold('');\n    setUpdatedAggregationType('');\n  };\n  \n  const handleNumericFieldChange = (index, fieldName, value) => {\n    // Check if the value is numeric (allowing decimals) or an empty string\n    if (/^\\d*\\.?\\d*$/.test(value) || value === '') {\n      // Update the field if it's numeric or an empty string\n      handleFieldChange(index, fieldName, value);\n    }\n    // You can optionally show an error message or handle the invalid input in another way\n  };\n \n  \n  const parameterDevice = () => {\n    if (!selectedDevice) {\n      setErrorMessage('Please select a device!');\n      setIsAddParameterFormOpen(false);\n      return;\n    }\n  \n    // Validate the fields for each row\n    const invalidFields = parameterFields.some(\n      (field) => !field.function_code || !field.address || !field.ParameterName || !field.data_type || !field.aggregation_type\n    );\n  \n    if (invalidFields) {\n      setErrorMessage('Please fill in all the required fields for each parameter!');\n      setIsAddParameterFormOpen(false);\n      // clearParameterForm();\n      return;\n    }\n  \n    // Validate that the address field contains only integer values\n    const invalidAddressFields = parameterFields.some(\n      (field) => !Number.isInteger(parseInt(field.address, 10))\n    );\n  \n    if (invalidAddressFields) {\n      setErrorMessage('Please Enter Only Integer Values in the Address Field!');\n      // clearParameterForm();\n      // setIsAddParameterFormOpen(false);\n      return;\n    }\n  \n    const parameterPayload = {\n      parameters: parameterFields.map((field) => ({\n        active: true,\n        function_code: field.function_code,\n        address: field.address,\n        parameter_name: field.ParameterName,\n        data_type: field.data_type,\n        threshold: field.threshold !== '' ? parseFloat(field.threshold) : 0.0,\n        aggregation_type: field.aggregation_type\n      })),\n    };\n    \n  \n    fetch(`/parameter/devices/${selectedDevice}/parameter`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(parameterPayload),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('One or more parameters failed to create.');\n        }\n        return response.json();\n      })\n      .then((responseData) => {\n        console.log('API Response Data:', responseData);\n  \n        // Check if responseData has the expected structure\n        if (responseData.created_parameters) {\n          // Update the table data with the new parameters\n          setParameterTableData([...parameterTableData, ...responseData.created_parameters]);\n  \n          setParameterSuccessMessage('Parameters created successfully!');\n          clearParameterForm();\n          setIsAddParameterFormOpen(false);\n          handleChange({ target: { value: selectedDevice } });\n        } else {\n          console.error('Unexpected response format:', responseData);\n          setErrorMessage('Error creating Parameters. Please try again.');\n          clearParameterForm();\n          setIsAddParameterFormOpen(false);\n        }\n      })\n      .catch((error) => {\n        console.error('Error creating Parameters:', error);\n        setErrorMessage('Error creating Parameters. Please try again.');\n        clearParameterForm();\n        setIsAddParameterFormOpen(false);\n      });\n  };\n  \n  const handleFieldChange = (index, field, value) => {\n    const updatedFields = [...parameterFields];\n    updatedFields[index][field] = value;\n    setParameterFields(updatedFields);\n  };\n\n  // eslint-disable-next-line\n  const addEmptyRow = () => {\n    setParameterFields([...parameterFields, { function_code: '', address: '', ParameterName: '', data_type: '', threshold: '', aggregation_type: '' }]);\n  };\n\n  const removeRow = (index) => {\n    const updatedFields = [...parameterFields];\n    updatedFields.splice(index, 1);\n    setParameterFields(updatedFields);\n  };\n\n  const clearAttributeForm = () => {\n    setAttributeFields([{ name: '', value: '' }]);\n  };\n\n  const handleAddAttributeFormClose = () => {\n    setIsAddAttributeFormOpen(false);\n    setAttributeFields([{ name: '', value: '' }]); // Reset fields\n    clearAttributeForm();\n  };\n\n  const handleAddAttributeButtonClick = () => {\n    console.log('Add Attribute button clicked');\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\n    setIsAddAttributeFormOpen(true);\n  };\n\n  const handleAddAttributeClick = () => {\n    setIsAddAttributeFormOpen(true);\n  };\n\n  const attributeDevice = () => {\n    if (!selectedDevice) {\n      setErrorMessage('Please select a device!');\n      return;\n    }\n  \n    // Validate the fields for each row\n    const invalidFields = attributeFields.some(\n      (field) => !field.name || !field.value\n    );\n  \n    if (invalidFields) {\n      setErrorMessage('Please fill in all the required fields for each attribute!');\n      clearAttributeForm();\n      return;\n    }\n  \n    const attributePayload = {\n      attributes: attributeFields.map((field) => ({\n        name: field.name,\n        value: field.value,\n      })),\n    };\n  \n    fetch(`/attribute/devices/${selectedDevice}/attribute`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(attributePayload),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('One or more attributes failed to create.');\n        }\n      })\n      .then(() => {\n        setAttributeSuccessMessage('Attributes created successfully!');\n        clearAttributeForm();\n        setIsAddAttributeFormOpen(false);\n        handleChange({ target: { value: selectedDevice } });\n      })\n      .catch((error) => {\n        console.error('Error creating Attributes:', error);\n        setErrorMessage('Error creating Attributes. Please try again.');\n        clearAttributeForm();\n        setIsAddAttributeFormOpen(false);\n      });\n  };\n  \n  const handleAttributeFieldChange = (index, field, value) => {\n    const updatedFields = [...attributeFields];\n    updatedFields[index][field] = value;\n    setAttributeFields(updatedFields);\n  };\n  \n  // eslint-disable-next-line\n  const addAttributeEmptyRow = () => {\n    setAttributeFields([...attributeFields, { name: '', value: '' }]);\n  };\n  \n  const removeAttributeRow = (index) => {\n    const updatedFields = [...attributeFields];\n    updatedFields.splice(index, 1);\n    setAttributeFields(updatedFields);\n  };\n\n  const handleUpdateAttributeClick = (attribute) => {\n    setSelectedAttribute(attribute);\n    setUpdatedName(attribute.name);\n    setUpdatedValue(attribute.value);\n    setOpenUpdateAttributeDialog(true);\n  };\n  \n\n  const handleUpdateAttributeDialogClose = () => {\n    setOpenUpdateAttributeDialog(false);\n    setUpdatedName('');\n    setUpdatedValue('');\n  };\n\n  const handleUpdateAttributeSubmit = async () => {\n    if (!selectedAttribute || !selectedAttribute.id || !selectedDevice) {\n      console.error('No Attribute or Device selected for update');\n      return;\n    }\n  \n    const updatedValues = {\n      name: updatedName,\n      value: updatedValue,\n    };\n  \n    try {\n      const response = await fetch(`/attribute/devices/${selectedDevice}/attribute/${selectedAttribute.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedValues),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Failed to update Attribute: ${response.statusText}`);\n      }\n  \n      handleChange({ target: { value: selectedDevice } });\n      handleUpdateAttributeDialogClose();\n      clearAttributeForm();\n      setAttributeSuccessMessage('Attribute updated successfully!');\n    } catch (error) {\n      console.error('Error updating Attribute:', error);\n      setErrorMessage(`Error updating Attribute. ${error.message}`);\n      clearAttributeForm();\n      handleUpdateAttributeDialogClose();\n    }\n  };\n  \n  \n\n  const handleDeleteAttributeSubmit = async (attribute) => {\n    setIsDeleteConfirmationOpen(false);\n\n    try {\n      if (selectedDevice && attribute && attribute.id) {\n        const response = await fetch(`/attribute/devices/${selectedDevice}/attribute/${attribute.id}`, {\n          method: 'DELETE',\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete Attribute: ${response.statusText}`);\n        }\n\n        setAttributeSuccessMessage('Attribute deleted successfully!');\n        setErrorMessage('');\n\n        // Update the device list\n        const deviceResponse = await fetch(`/devices/${selectedDevice}`);\n        const deviceData = await deviceResponse.json();\n\n        if (deviceData.device && Array.isArray(deviceData.device.attributes)) {\n          setAttributes(deviceData.device.attributes);\n        } else {\n          setAttributes([]);\n        }\n\n        // Fetch devices to update the list\n        const devicesResponse = await fetch(`/devices/`);\n        const devicesData = await devicesResponse.json();\n\n        if (Array.isArray(devicesData.devices)) {\n          setDevices(devicesData.devices);\n        } else {\n          console.error('Invalid response format for devices:', devicesData);\n        }\n      }\n    } catch (error) {\n      console.error('Error deleting Attribute:', error);\n      setErrorMessage(`Error deleting Attribute. ${error.message}`);\n    } finally {\n      setIsDeleteAttributeConfirmationOpen(false);\n      setOpenUpdateAttributeDialog(false);\n      setSelectedAttribute(null);\n    }\n  };\n\n  \n  const handleDeleteAttributeDialogClose = () => {\n    setIsDeleteAttributeConfirmationOpen(false);\n    setAttributeToDelete(null);\n  };\n\n  const handleDeleteAttributeClick = (attribute) => {\n    setSelectedAttribute(attribute);\n    setIsDeleteAttributeConfirmationOpen(true);\n  }; \n\n  // const handleClose = () => {\n  //   setOpen(false);\n  // };\n\n  // // Define SuccessMessage and ErrorMessage components\n  // const SuccessMessage = ({ message, onClose }) => (\n  //   <Alert severity=\"success\" onClose={onClose}>\n  //     {message}\n  //   </Alert>\n  // );\n\n  // const ErrorMessage = ({ message, onClose }) => (\n  //   <Alert severity=\"error\" onClose={onClose}>\n  //     {message}\n  //   </Alert>\n  // );\n\n  // Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message }) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message }) => (\n    <Alert severity=\"error\" >\n      {message}\n    </Alert>\n  );\n\n  return (\n    <div>\n      <div className={classes.header}>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={10}>\n          {deviceSuccessMessage && (\n            <SuccessMessage message={deviceSuccessMessage} onClose={() => setDeviceSuccessMessage('')}/>\n          )}\n        </Grid>\n        <Grid item xs={2} container justifyContent=\"flex-end\">\n          <Button\n            onClick={handleAddDeviceClick}\n            variant=\"contained\"\n            color=\"secondary\"\n          >\n            Add Device\n          </Button>\n        </Grid>\n    \n        <Grid item xs={12}>\n          <TableContainer component={Paper}>\n            <Table>\n              {/* Table Header */}\n              <TableHead>\n                <TableRow>\n                  <TableCell>Device Name</TableCell>\n                  <TableCell>Slave ID</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n\n              {/* Table Body */}\n              <TableBody>\n                {devices.map((device) => (\n                  <React.Fragment key={device.id}>\n                  <TableRow style={{ backgroundColor: expandedDeviceId === device.id ? 'lightpink' : 'inherit' }}>\n                    <TableCell>{device.name}</TableCell>\n                    <TableCell>{device.slave_id}</TableCell>\n                    <TableCell>\n                      {/* Show button */}\n                      <IconButton\n                        onClick={() => handleOpenUpdateDeviceForm(device.id)}\n                        variant=\"contained\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\n                      </IconButton>\n                      <IconButton \n                        onClick={() => handleDeleteDeviceClick(device.id, device.name)}\n                        variant=\"outlined\"\n                        style={{ marginRight: '10px' }}\n                      >\n                        <DeleteIcon style={{ color: 'gray', fontSize : \"medium\" }} />\n                      </IconButton>\n                      <IconButton\n                        onClick={() => handleDeviceChange(device.id)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ float: 'right' }}\n                      >\n                        {expandedDeviceId === device.id ? (\n                          <KeyboardArrowUpIcon style={{ color: 'gray', fontSize: 'large' }} />\n                        ) : (\n                          <KeyboardArrowDownIcon style={{ color: 'gray', fontSize: 'large' }} />\n                        )}\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                  <TableCell colSpan={3}>\n                        {/* Parameter and Attribute Tables */}\n                        <Collapse in={expandedDeviceId === device.id} timeout=\"auto\" unmountOnExit>\n                          <div>\n                            {/* Parameters Table */}\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                              <DialogTitle>\n                                Parameter\n                              </DialogTitle>\n                              <Button\n                                onClick={handleAddParameterClick}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                style={{ marginBottom: '10px' }}\n                              >\n                                Add\n                              </Button>\n                            </div>\n                            {/* Display Parameter Success and Error Messages */}\n                            {parameterSuccessMessage && (\n                              <SuccessMessage message={parameterSuccessMessage} onClose={() => setParameterSuccessMessage('')} />\n                            )}\n                            {errorMessage && (\n                              <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\n                            )}\n                            <TableContainer component={Paper} style={{ marginTop: '10px' }}>\n                              <Table>\n                                <TableHead>\n                                <TableRow>\n                                  <TableCell>Function Code</TableCell>\n                                  <TableCell>Address</TableCell>\n                                  <TableCell>Parameter Name</TableCell>\n                                  <TableCell>Data Type</TableCell>\n                                  <TableCell>Threshold</TableCell>\n                                  <TableCell>Aggregation Type</TableCell>\n                                  <TableCell>Actions</TableCell>\n                                </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                  {parameters.map((parameter) => (\n                                    <TableRow key={parameter.id}>\n                                      <TableCell>{parameter.function_code}</TableCell>\n                                      <TableCell>{parameter.address}</TableCell>\n                                      <TableCell>{parameter.parameter_name}</TableCell>\n                                      <TableCell>{parameter.data_type}</TableCell>\n                                      <TableCell>{parameter.threshold}</TableCell>\n                                      <TableCell>{parameter.aggregation_type}</TableCell>\n                                      <TableCell>\n                                        <IconButton\n                                          onClick={() => handleUpdateClick(parameter)}\n                                          variant=\"contained\"\n                                          style={{ marginRight: '10px' }}\n                                        >\n                                          <EditIcon style={{ color: 'gray', fontSize : \"medium\" }}/>\n                                        </IconButton>\n                                        <IconButton\n                                          onClick={() => handleDeleteParameterClick(parameter)}\n                                          variant=\"contained\"\n                                        >\n                                          <DeleteIcon style={{ color: 'gray', fontSize : \"medium\" }} />\n                                        </IconButton>\n                                      </TableCell>\n                                    </TableRow>\n                                  ))}\n                                </TableBody>\n                              </Table>\n                            </TableContainer>\n\n                            {/* Attributes Table */}\n                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                              <DialogTitle style={{  marginTop: '30px' }} >\n                                Attribute\n                              </DialogTitle>\n                              <Button\n                                onClick={handleAddAttributeClick}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                style={{  marginTop: '30px' }}\n                              >\n                                Add\n                              </Button>\n                            </div>\n                            {/* Display Attribute Success and Error Messages */}\n                            {attributeSuccessMessage && (\n                              <SuccessMessage message={attributeSuccessMessage} onClose={() => setAttributeSuccessMessage('')} />\n                            )}\n                            <TableContainer component={Paper} style={{ marginTop: '10px' }}>\n                              <Table>\n                                <TableHead>\n                                  <TableRow>\n                                    <TableCell>Attribute Name</TableCell>\n                                    <TableCell>Attribute Value</TableCell>\n                                    <TableCell>Actions</TableCell>\n                                  </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                  {attributes.map((attribute, index) => (\n                                    <TableRow key={attribute.id}>\n                                      <TableCell>{attribute.name}</TableCell>\n                                      <TableCell>{attribute.value}</TableCell>\n                                      <TableCell>\n                                        <IconButton\n                                          onClick={() => handleUpdateAttributeClick(attribute)}\n                                          variant=\"contained\"\n                                          style={{ marginRight: '10px' }}\n                                        >\n                                          <EditIcon style={{ color: 'gray', fontSize: 'medium' }} />\n                                        </IconButton>\n                                        {index >= 5 ? (\n                                          <IconButton\n                                            onClick={() => handleDeleteAttributeClick(attribute)}\n                                            variant=\"contained\"\n                                          >\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\n                                          </IconButton>\n                                        ) : (\n                                          // Disabled or hidden delete button for the first 5 attributes\n                                          <IconButton disabled variant=\"contained\" style={{ display: 'none' }}>\n                                            <DeleteIcon style={{ color: 'gray', fontSize: 'medium' }} />\n                                          </IconButton>\n                                        )}\n                                      </TableCell>\n                                    </TableRow>\n                                  ))}\n                                </TableBody>\n                              </Table>\n                            </TableContainer>\n                          </div>\n                        </Collapse>\n                      </TableCell>\n                    </TableRow>\n                  </React.Fragment>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n      </div> \n\n      <Dialog open={openUpdateDialog} onClose={handleUpdateParameterDialogClose}>\n      <DialogTitle style={{ color: '#008080' }}>Update Parameter</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n              <InputLabel style={{ marginTop: '10px' }}>Function Code</InputLabel>\n                <Select\n                  value={updatedFunctionCode}\n                  style={{ marginTop: '10px' }}\n                  onChange={(e) => setUpdatedFunctionCode(e.target.value)}\n                >\n                  <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\n                  <MenuItem value=\"Input Status\">Input Status</MenuItem>\n                  <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\n                  <MenuItem value=\"Input Register\">Input Register</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Address\"\n                value={updatedAddress}\n                style={{ marginTop: '10px' }}\n                onChange={(e) => setUpdatedAddress(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Parameter Name\"\n                value={updatedParameterName}\n                onChange={(e) => setUpdatedParameterName(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n                <InputLabel>Data Type</InputLabel>\n                <Select\n                  value={updatedDataType}\n                  onChange={(e) => setUpdatedDataType(e.target.value)}\n                >\n                  <MenuItem value=\"Integer\">Integer</MenuItem>\n                  <MenuItem value=\"Float\">Float</MenuItem>\n                  <MenuItem value=\"Double\">Double</MenuItem>\n                  <MenuItem value=\"Boolean\">Boolean</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Threshold\"\n                value={updatedThreshold}\n                // style={{ marginTop: '10px' }}\n                onChange={(e) => setUpdatedThreshold(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n                <InputLabel>Aggregation Type</InputLabel>\n                <Select\n                  value={updatedAggregationType}\n                  // style={{ marginTop: '10px' }}\n                  onChange={(e) => setUpdatedAggregationType(e.target.value)}\n                >\n                  <MenuItem value=\"min\">Min</MenuItem>\n                  <MenuItem value=\"max\">Max</MenuItem>\n                  <MenuItem value=\"avg\">Avg</MenuItem>\n                  <MenuItem value=\"median\">Median</MenuItem>\n                  <MenuItem value=\"rms\">Rms</MenuItem>\n                  <MenuItem value=\"mode\">Mode</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={handleUpdateSubmit} variant=\"contained\" color=\"primary\">Update</Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      <Dialog open={isDeleteConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\n        <DialogTitle>Delete Parameter</DialogTitle>\n        <DialogContent>\n          <p>Are you sure you want to delete this Parameter?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteParameterDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={() => handleDeleteSubmit(selectedParameter)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={openUpdateAttributeDialog} onClose={handleUpdateAttributeDialogClose}>\n      <DialogTitle style={{ color: '#008080' }}>Update Attribute</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Name\"\n                value={updatedName}\n                style={{ marginTop: '10px' }}\n                onChange={(e) => setUpdatedName(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Value\"\n                value={updatedValue}\n                style={{ marginTop: '10px' }}\n                onChange={(e) => setUpdatedValue(e.target.value)}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={handleUpdateAttributeSubmit} variant=\"contained\" color=\"primary\">Update</Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={isDeleteAttributeConfirmationOpen} onClose={handleDeleteDeviceDialogClose}>\n        <DialogTitle>Delete Attribute</DialogTitle>\n        <DialogContent>\n          <p>Are you sure you want to delete this Attribute?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteAttributeDialogClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={() => handleDeleteAttributeSubmit(selectedAttribute)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n        \n      <Dialog open={updateDeviceFormOpen} onClose={handleCloseUpdateDeviceForm}>\n        <DialogTitle>Update Device</DialogTitle>\n        <DialogContent>\n          {selectedDevice && (\n            <>\n              <TextField\n                label=\"Device Name\"\n                value={updatedDeviceName}\n                style={{ marginTop: '5px', marginRight: '5px' }}\n                onChange={(e) => setUpdatedDeviceName(e.target.value)}\n              />\n              <TextField\n                label=\"Slave ID\"\n                value={updatedSlaveId}\n                style={{ marginTop: '5px' }}\n                onChange={(e) => setUpdatedSlaveId(e.target.value)}\n              />\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseUpdateDeviceForm} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          <Button onClick={handleUpdateDevice} variant=\"contained\" color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      <Dialog open={isDeleteDeviceConfirmationOpen} onClose={handleDeleteDeviceConfirmationClose}>\n        <DialogTitle>Delete Device</DialogTitle>\n        <DialogContent>\n          <p>Are you sure you want to delete \"{selectedDeviceName}\"?</p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteDeviceConfirmationClose} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          <Button onClick={() => handleDeleteDevice(selectedDevice)} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n  \n      {/* <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\n        <DialogTitle>Add Device</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Device Name\"\n            value={deviceName}\n            onChange={(e) => setDeviceName(e.target.value)}\n            style={{ marginRight: '5px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Slave ID\"\n            value={slaveId}\n            style={{ marginTop: '5px' }}\n            onChange={(e) => setSlaveId(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          <Button onClick={createDevice} variant=\"contained\">\n            Create Device\n          </Button>\n        </DialogActions>\n      </Dialog> */}\n\n      <Dialog open={isAddDeviceFormOpen} onClose={handleAddDeviceFormClose}>\n        <DialogTitle>Add Device</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Device Name\"\n            value={deviceName}\n            onChange={(e) => setDeviceName(e.target.value)}\n            style={{ marginRight: '5px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Slave ID\"\n            value={slaveId}\n            style={{ marginTop: '5px' }}\n            onChange={(e) => setSlaveId(e.target.value)}\n          />\n          <TextField\n            label=\"Type\"\n            value={type}\n            style={{ marginRight: '5px', marginTop: '5px' }}\n            onChange={(e) => setType(e.target.value)}\n          />\n          <TextField\n            label=\"Company\"\n            value={company}\n            style={{ marginTop: '5px' }}\n            onChange={(e) => setCompany(e.target.value)}\n          />\n          <TextField\n            label=\"Model Number\"\n            value={modelNumber}\n            style={{ marginTop: '5px' }}\n            onChange={(e) => setModelNumber(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddDeviceFormClose} variant=\"outlined\" color=\"error\">\n            Cancel\n          </Button>\n          <Button onClick={createDevice} variant=\"contained\">\n            Create Device\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      <Dialog open={isAddParameterFormOpen} onClose={handleAddParameterFormClose} fullWidth keepMounted disableEscapeKeyDown onClick={(e) => e.stopPropagation()}>\n        <DialogTitle>Add Parameter</DialogTitle>\n        {errorMessage && (\n          <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')} />\n        )}\n        <DialogContent>\n          {parameterFields.map((field, index) => (\n            <Grid container spacing={1} key={index} alignItems=\"center\">\n              <Grid item xs={3}>\n                <FormControl fullWidth>\n                  <InputLabel style={{ marginTop: '5px' }}>Function Code</InputLabel>\n                  <Select\n                    value={field.function_code || ''}\n                    style={{ marginTop: '8px' }}\n                    onChange={(e) => handleFieldChange(index, 'function_code', e.target.value)}\n                  >\n                    <MenuItem value=\"Coil Status\">Coil Status</MenuItem>\n                    <MenuItem value=\"Input Status\">Input Status</MenuItem>\n                    <MenuItem value=\"Holding Register\">Holding Register</MenuItem>\n                    <MenuItem value=\"Input Register\">Input Register</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={2}>\n                <TextField\n                  label=\"Address\"\n                  value={field.address}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleNumericFieldChange(index, 'address', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <TextField\n                  label=\"Parameter Name\"\n                  value={field.ParameterName}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFieldChange(index, 'ParameterName', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <FormControl fullWidth>\n                  <InputLabel style={{ marginTop: '5px' }}>Data Type</InputLabel>\n                  <Select\n                    value={field.data_type}\n                    style={{ marginTop: '8px' }}\n                    onChange={(e) => handleFieldChange(index, 'data_type', e.target.value)}\n                  >\n                    <MenuItem value=\"Integer\">Integer</MenuItem>\n                    <MenuItem value=\"Float\">Float</MenuItem>\n                    <MenuItem value=\"Double\">Double</MenuItem>\n                    <MenuItem value=\"Boolean\">Boolean</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={2}>\n                <TextField\n                  label=\"Threshold\"\n                  value={field.threshold}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleNumericFieldChange(index, 'threshold', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <FormControl fullWidth>\n                  <InputLabel style={{ marginTop: '5px' }}>Aggregation Type</InputLabel>\n                  <Select\n                    value={field.aggregation_type}\n                    style={{ marginTop: '8px' }}\n                    onChange={(e) => handleFieldChange(index, 'aggregation_type', e.target.value)}\n                  >\n                    <MenuItem value=\"min\">Min</MenuItem>\n                    <MenuItem value=\"max\">Max</MenuItem>\n                    <MenuItem value=\"avg\">Avg</MenuItem>\n                    <MenuItem value=\"median\">Median</MenuItem>\n                    <MenuItem value=\"rms\">Rms</MenuItem>\n                    <MenuItem value=\"mode\">Mode</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={1}>\n                {index !== 0 && (\n                  <IconButton onClick={() => removeRow(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} align=\"right\">\n              <IconButton onClick={handleAddParameterButtonClick}>\n                <AddIcon style={{ color: 'green' }} />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddParameterFormClose} variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={parameterDevice} variant=\"contained\" color=\"primary\">\n            Create Parameter\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={isAddAttributeFormOpen} onClose={handleAddAttributeFormClose}>\n        <DialogTitle>\n          Add Attribute\n        </DialogTitle>\n        <DialogContent>\n          {attributeFields.map((field, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\">\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Name\"\n                  value={field.name}\n                  style={{ marginTop: '7px' }}\n                  onChange={(e) => handleAttributeFieldChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  label=\"Value\"\n                  value={field.value}\n                  style={{ marginTop: '7px' }}\n                  onChange={(e) => handleAttributeFieldChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                {index !== 0 && (\n                  <IconButton onClick={() => removeAttributeRow(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={1}>\n                {index === attributeFields.length - 1 && (\n                  <IconButton onClick={handleAddAttributeButtonClick}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleAddAttributeFormClose} variant=\"outlined\" color=\"error\">Cancel</Button>\n          <Button onClick={attributeDevice} variant=\"contained\">Create Attribute</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DeviceParameterTable;"],"names":["useStyles","makeStyles","theme","root","padding","spacing","header","display","alignItems","marginBottom","headerText","fontFamily","fontSize","fontWeight","color","marginRight","buttonGroup","marginLeft","addButton","backgroundColor","palette","success","main","dark","deleteButton","error","DeviceParameterTable","classes","devices","setDevices","useState","selectedDevice","setSelectedDevice","parameters","setParameters","attributes","setAttributes","selectedParameter","setSelectedParameter","openUpdateDialog","setOpenUpdateDialog","updatedFunctionCode","setUpdatedFunctionCode","updatedAddress","setUpdatedAddress","updatedParameterName","setUpdatedParameterName","updatedDataType","setUpdatedDataType","updatedThreshold","setUpdatedThreshold","updatedAggregationType","setUpdatedAggregationType","updatedName","setUpdatedName","updatedValue","setUpdatedValue","deviceName","setDeviceName","slaveId","setSlaveId","deviceSuccessMessage","setDeviceSuccessMessage","parameterSuccessMessage","setParameterSuccessMessage","attributeSuccessMessage","setAttributeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isAddDeviceFormOpen","setIsAddDeviceFormOpen","isAddParameterFormOpen","setIsAddParameterFormOpen","isAddAttributeFormOpen","setIsAddAttributeFormOpen","parameterToDelete","setParameterToDelete","attributeToDelete","setAttributeToDelete","isDeleteConfirmationOpen","setIsDeleteConfirmationOpen","isDeleteAttributeConfirmationOpen","setIsDeleteAttributeConfirmationOpen","selectedDeviceName","setSelectedDeviceName","selectedSlaveId","setSelectedSlaveId","updateDeviceFormOpen","setUpdateDeviceFormOpen","updatedDeviceName","setUpdatedDeviceName","updatedSlaveId","setUpdatedSlaveId","isDeleteDeviceConfirmationOpen","setIsDeleteDeviceConfirmationOpen","parameterFields","setParameterFields","function_code","address","ParameterName","data_type","threshold","aggregation_type","attributeFields","setAttributeFields","name","value","selectedAttribute","setSelectedAttribute","openUpdateAttributeDialog","setOpenUpdateAttributeDialog","parameterTableData","setParameterTableData","expandedDeviceId","setExpandedDeviceId","type","setType","company","setCompany","modelNumber","setModelNumber","useEffect","setTimeout","async","response","fetch","data","json","Array","isArray","concat","fetchDevices","handleDeviceChange","console","log","deviceId","encodeURIComponent","prevId","device","length","slave_id","handleChange","event","target","handleUpdateDialogClose","handleCloseUpdateDeviceForm","handleDeleteDeviceConfirmationClose","handleDeleteDeviceDialogClose","clearDeviceForm","handleAddParameterClick","handleAddDeviceFormClose","handleAddParameterFormClose","clearParameterForm","handleUpdateParameterDialogClose","handleNumericFieldChange","index","fieldName","test","handleFieldChange","field","updatedFields","clearAttributeForm","handleAddAttributeFormClose","handleAddAttributeButtonClick","handleAddAttributeClick","handleAttributeFieldChange","handleUpdateAttributeDialogClose","SuccessMessage","_ref","message","_jsx","Alert","severity","children","ErrorMessage","_ref2","_jsxs","className","Grid","container","item","xs","onClose","justifyContent","Button","onClick","handleAddDeviceClick","variant","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","React","style","id","IconButton","find","handleOpenUpdateDeviceForm","EditIcon","handleDeleteDeviceClick","DeleteIcon","float","KeyboardArrowUpIcon","KeyboardArrowDownIcon","colSpan","Collapse","in","timeout","unmountOnExit","DialogTitle","marginTop","parameter","parameter_name","handleUpdateClick","handleDeleteParameterClick","attribute","handleUpdateAttributeClick","handleDeleteAttributeClick","disabled","Dialog","open","DialogContent","FormControl","fullWidth","InputLabel","Select","onChange","e","MenuItem","TextField","label","DialogActions","Number","isInteger","parseInt","updatedValues","method","headers","body","JSON","stringify","ok","Error","statusText","handleDeleteParameterDialogClose","deviceResponse","deviceData","devicesResponse","devicesData","handleDeleteSubmit","handleDeleteAttributeDialogClose","handleDeleteAttributeSubmit","_Fragment","updatedDevice","handleDeleteDevice","newDevice","device_id","defaultAttributes","attributePayload","keepMounted","disableEscapeKeyDown","stopPropagation","splice","removeRow","RemoveIcon","align","handleAddParameterButtonClick","AddIcon","parameterDevice","some","parameterPayload","active","parseFloat","then","responseData","created_parameters","catch","removeAttributeRow","attributeDevice"],"sourceRoot":""}