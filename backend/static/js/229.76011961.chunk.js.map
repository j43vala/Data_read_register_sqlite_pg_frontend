{"version":3,"file":"static/js/229.76011961.chunk.js","mappings":"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","sources":["components/dashboard/Retention.js","views/Retention.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n} from '@mui/material';\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst RetentionParameterForm= () => {\n    const [data, setData] = useState(null);\n    const [RetentionParameterSuccessMessage, setRetentionParameterSuccessMessage] = useState('');\n    const [TimeDelaySuccessMessage, setTimeDelaySuccessMessage] = useState('');\n    const [PublishTimeSuccessMessage, setPublishTimeSuccessMessage] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n    const [retentionParameters, setRetentionParameters] = useState({\n        checkFrequency: { days: '', hours: '', minutes: '', seconds: '' },\n        successRetention: { days: '', hours: '', minutes: '', seconds: '' },\n        failureRetention: { days: '', hours: '', minutes: '', seconds: '' }\n    });\n    const [valuesChanged, setValuesChanged] = useState(false);\n    const [timeDelayParameters, setTimeDelayParameters] = useState({\n        minutes: '',\n        seconds: ''\n    });\n    const [publishTimeParameters, setPublishTimeParameters] = useState({\n      days: '',\n      hours: '',\n      minutes: '',\n      seconds: ''\n    });\n    // const [isFormValid, setIsFormValid] = useState(false);\n    // Separate state for form validity and submit button for Time Delay\n    const [isTimeDelayFormValid, setIsTimeDelayFormValid] = useState(false);\n\n    // Separate state for form validity and submit button for Publish Time\n    const [isPublishTimeFormValid, setIsPublishTimeFormValid] = useState(false);\n\n    const clearMessagesAfterDelay = () => {\n        setTimeout(() => {\n        setRetentionParameterSuccessMessage('');\n        setTimeDelaySuccessMessage('');\n        setPublishTimeSuccessMessage('');\n        setErrorMessage('');\n        setSuccessMessage('');\n    }, 5000);\n    };\n\n    useEffect(() => {\n    clearMessagesAfterDelay();\n    }, [RetentionParameterSuccessMessage, TimeDelaySuccessMessage, PublishTimeSuccessMessage, errorMessage, successMessage]);\n\n    useEffect(() => {\n    const fetchData = async () => {\n        try {\n        const response = await fetch(`/node-parameter/`);\n        const responseData = await response.json();\n        setData(responseData);\n        // console.log('responseData: ', responseData);\n    \n        // Initialize selectedModbus state with modbus values\n        if (responseData.node_parameters) {\n    \n            // Initialize retention parameters\n            const retentionValues = responseData.node_parameters.find(param => param.name === 'retention_parameter')?.value;\n            if (retentionValues) {\n            setRetentionParameters(retentionValues);\n            }\n\n            const timeDelayValues = responseData.node_parameters.find(param => param.name === 'time_delay')?.value;\n            if (timeDelayValues) {\n            setTimeDelayParameters(timeDelayValues);\n            }\n\n            const publishTImeValues = responseData.node_parameters.find(param => param.name === 'publish_time')?.value;\n            if (publishTImeValues) {\n            setPublishTimeParameters(publishTImeValues);\n            }\n        }\n        } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    \n    fetchData();\n    }, []);\n    \n    \n\n    if (!data) {\n    return <p>Loading...</p>;\n    }\n\n\n\n// Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n  \n  const handleRetentionParameterChange = (param, unit, value) => {\n    // Parse the input value as an integer\n    const integerValue = parseInt(value, 10);\n  \n    // Check if the parsed value is a valid integer\n    if (!isNaN(integerValue)) {\n      setRetentionParameters((prevParameters) => ({\n        ...prevParameters,\n        [param]: { ...prevParameters[param], [unit]: integerValue },\n      }));\n    }\n    // Set valuesChanged to true when any value changes\n    setValuesChanged(true);\n  };\n  \n  \n  const handleRetentionParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/5`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          retention_parameter: retentionParameters,\n        }),\n      });\n      // After successful submission, reset valuesChanged to false\n      setValuesChanged(false);\n\n      if (response.ok) {\n        setRetentionParameterSuccessMessage('Retention Parameters updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Retention Parameters: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Retention Parameters: ${error}`);\n    }\n  };\n\n  const handleReset = () => {\n    // Replace the initialValues with your actual initial values\n    const initialValues = {\n      check_frequency: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n      success_retention: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n      failure_retention: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  \n    setRetentionParameters(initialValues);\n    setValuesChanged(false);\n  };\n  \n\n  const handleTimeDelayParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/6`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          time_delay: timeDelayParameters,\n        }),\n      });\n      // Assuming the submission is successful, disable the submit button\n      setIsTimeDelayFormValid(false);\n\n      if (response.ok) {\n        // Display success message or handle as needed\n        setTimeDelaySuccessMessage('Time Delay updated successfully.');\n      } else {\n        // Display error message or handle as needed\n        setErrorMessage(`Failed to update Time Delay: ${response.statusText}`);\n      }\n    } catch (error) {\n      // Display error message or handle as needed\n      setErrorMessage(`Error updating Time Delay: ${error}`);\n    }\n  };\n\n  const handlePublishTimeParameterSubmit = async () => {\n    try {\n      const response = await fetch(`/node-parameter/7`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          publish_time: publishTimeParameters,\n        }),\n      });\n      // Assuming the submission is successful, disable the submit button\n      setIsPublishTimeFormValid(false);\n\n      if (response.ok) {\n        // Display success message or handle as needed\n        setPublishTimeSuccessMessage('Publish Time updated successfully.');\n      } else {\n        // Display error message or handle as needed\n        setErrorMessage(`Failed to update Publish Time: ${response.statusText}`);\n      }\n    } catch (error) {\n      // Display error message or handle as needed\n      setErrorMessage(`Error updating Publish Time: ${error}`);\n    }\n  };\n\n\n    return (\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n          {RetentionParameterSuccessMessage && (\n            <SuccessMessage message={RetentionParameterSuccessMessage} onClose={() => setRetentionParameterSuccessMessage('')}/>\n          )}\n          {TimeDelaySuccessMessage && (\n            <SuccessMessage message={TimeDelaySuccessMessage} onClose={() => setTimeDelaySuccessMessage('')}/>\n          )}\n          {PublishTimeSuccessMessage && (\n            <SuccessMessage message={PublishTimeSuccessMessage} onClose={() => setPublishTimeSuccessMessage('')}/>\n          )}\n          {errorMessage && (\n            <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n          )}\n          </Grid>\n    \n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\">Retention Parameters</Typography>\n              <form>\n                {['check_frequency', 'success_retention', 'failure_retention'].map((param, index) => (\n                  <div key={index} style={{ marginBottom: '20px' }}>\n                    <Typography variant=\"subtitle1\">{param.replace('_', ' ')}</Typography>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                      {['days', 'hours', 'minutes', 'seconds'].map((unit, unitIndex) => (\n                        <TextField\n                          key={unitIndex}\n                          label={unit.charAt(0).toUpperCase() + unit.slice(1)}\n                          type=\"number\"\n                          value={retentionParameters[param][unit]}\n                          onChange={(e) => handleRetentionParameterChange(param, unit, e.target.value)}\n                          fullWidth\n                          style={{ marginRight: '10px' }}\n                          inputProps={{\n                            min: 0,\n                            max: unit === 'days' ? 31 : unit === 'hours' ? 24 : 60,\n                          }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                ))}\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                  <Button\n                    onClick={handleReset}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    style={{ marginRight: '10px' }}\n                  >\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={handleRetentionParameterSubmit}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    disabled={!valuesChanged} // Disable if values have not changed\n                  >\n                    Submit\n                  </Button>\n                </div>\n              </form>\n            </Paper>\n          </Grid>\n    \n    \n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\">Time Delay Parameters</Typography>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\n                <TextField\n                  label=\"Minutes\"\n                  type=\"number\"\n                  value={timeDelayParameters.minutes}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setTimeDelayParameters((prev) => ({\n                      ...prev,\n                      minutes: newValue,\n                    }));\n                    setIsTimeDelayFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                <TextField\n                  label=\"Seconds\"\n                  type=\"number\"\n                  value={timeDelayParameters.seconds}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setTimeDelayParameters((prev) => ({\n                      ...prev,\n                      seconds: newValue,\n                    }));\n                    setIsTimeDelayFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                </div>\n                <Button\n                  onClick={handleTimeDelayParameterSubmit}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  style={{ marginBottom: '15px' }}\n                  disabled={!isTimeDelayFormValid} // Disable the button when the form is not valid\n                >\n                  Submit\n                </Button>\n              </div>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={4}>\n            <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n              <Typography variant=\"h6\"> Publish Time</Typography>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n                <div style={{ display: 'flex', flexDirection: 'row', marginRight: '20px' }}>\n                <TextField\n                  label=\"Days\"\n                  type=\"number\"\n                  value={publishTimeParameters.days}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 31);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      days: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 31,\n                  }}\n                />\n                <TextField\n                  label=\"Hours\"\n                  type=\"number\"\n                  value={publishTimeParameters.hours}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 24);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      hours: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 24,\n                  }}\n                />\n                <TextField\n                  label=\"Minutes\"\n                  type=\"number\"\n                  value={publishTimeParameters.minutes}\n                  style={{ marginRight: '5px' }}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      minutes: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                <TextField\n                  label=\"Seconds\"\n                  type=\"number\"\n                  value={publishTimeParameters.seconds}\n                  onChange={(e) => {\n                    let newValue = parseInt(e.target.value) || 0;\n                    // Set upper limit to 60\n                    newValue = Math.min(newValue, 60);\n                    newValue = Math.max(newValue, 0); // Set lower limit to 0\n    \n                    setPublishTimeParameters((prev) => ({\n                      ...prev,\n                      seconds: newValue,\n                    }));\n                    setIsPublishTimeFormValid(true);\n                  }}\n                  inputProps={{\n                    step: 1,\n                    min: 0,\n                    max: 60,\n                  }}\n                />\n                </div>\n                <Button\n                  onClick={handlePublishTimeParameterSubmit}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  style={{ marginBottom: '15px' }}\n                  disabled={!isPublishTimeFormValid} // Disable the button when the form is not valid\n                >\n                  Submit\n                </Button>\n              </div>\n            </Paper>\n          </Grid>\n        </Grid>  \n    );\n}\n    \nexport default RetentionParameterForm;","import React from 'react'\nimport RetentionParameterForm from '../components/dashboard/Retention'\n\nconst Retention = () => {\n  return (\n    <div>\n      <h1>Retention</h1>\n        <RetentionParameterForm />\n    </div>\n  )\n}\n\nexport default Retention"],"names":["RetentionParameterForm","data","setData","useState","RetentionParameterSuccessMessage","setRetentionParameterSuccessMessage","TimeDelaySuccessMessage","setTimeDelaySuccessMessage","PublishTimeSuccessMessage","setPublishTimeSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","retentionParameters","setRetentionParameters","checkFrequency","days","hours","minutes","seconds","successRetention","failureRetention","valuesChanged","setValuesChanged","timeDelayParameters","setTimeDelayParameters","publishTimeParameters","setPublishTimeParameters","isTimeDelayFormValid","setIsTimeDelayFormValid","isPublishTimeFormValid","setIsPublishTimeFormValid","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","_responseData$node_pa3","retentionValues","find","param","name","value","timeDelayValues","publishTImeValues","error","console","fetchData","_jsx","children","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","Paper","style","padding","marginBottom","Typography","variant","map","index","replace","display","flexDirection","unit","unitIndex","TextField","label","charAt","toUpperCase","slice","type","onChange","e","handleRetentionParameterChange","integerValue","parseInt","isNaN","prevParameters","target","fullWidth","marginRight","inputProps","min","max","justifyContent","Button","onClick","handleReset","check_frequency","success_retention","failure_retention","color","method","headers","body","JSON","stringify","retention_parameter","ok","concat","statusText","disabled","marginTop","newValue","Math","prev","step","time_delay","publish_time","Retention"],"sourceRoot":""}