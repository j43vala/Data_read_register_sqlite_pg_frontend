{"version":3,"file":"static/js/359.2ea5dbeb.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Remove.js","components/dashboard/NodeParameter.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Alert,\n  Paper,\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport { Add as AddIcon, Remove as RemoveIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\n\n// const baseUrl = process.env.REACT_APP_BASEURL;\n\nconst NodeParameterTable = () => {\n  const [data, setData] = useState(null);\n  const [updateSpbParameterFormOpen, setUpdateSpbParameterFormOpen] = useState(false);\n  const [updateNodeAttributeFormOpen, setUpdateNodeAttributeFormOpen] = useState(false);\n  const [updatedAttributes, setUpdatedAttributes] = useState([]);\n  const [updateMqttFormOpen, setUpdateMqttFormOpen] = useState(false);\n  const [addNodeAttributeFormOpen, setAddNodeAttributeFormOpen] = useState(false);\n  const [formDataList, setFormDataList] = useState([]);\n  const [selectedModbus, setSelectedModbus] = useState({\n    port: '',\n    method: '',\n    parity: '',\n    baudrate: '',\n    stopbits: '',\n    wordLength: '',\n  });\n\n  const [updatedEdgeNodeId, setUpdatedEdgeNodeId] = useState('');\n  const [updatedGroupId, setUpdatedGroupId] = useState('');\n  const [updatedHostName, setUpdatedHostName] = useState('');\n  const [updatedBrokerHost, setUpdatedBrokerHost] = useState('');\n  const [updatedBrokerPort, setUpdatedBrokerPort] = useState('');\n  const [updatedClientId, setUpdatedClientId] = useState('');\n  const [updatedClientPassword, setUpdatedClientPassword] = useState('');\n  const [updatedQos, setUpdatedQos] = useState('');\n  const [qosOptions, setQosOptions] = useState([]);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isStopping, setIsStopping] = useState(false);\n  const [restartButtonClicked] = useState(false);\n  const [ModbusSuccessMessage, setModbusSuccessMessage] = useState('');\n  const [SPBSuccessMessage, setSPBSuccessMessage] = useState('');\n  const [NodeAttributeSuccessMessage, setNodeAttributeSuccessMessage] = useState('');\n  const [MqttSuccessMessage, setMqttSuccessMessage] = useState('');\n  const [ServiceStartSuccessMessage, setServiceStartSuccessMessage] = useState('');\n  const [ServiceStopSuccessMessage, setServiceStopSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const clearMessagesAfterDelay = () => {\n    setTimeout(() => {\n      setModbusSuccessMessage('');\n      setSPBSuccessMessage('');\n      setNodeAttributeSuccessMessage('');\n      setMqttSuccessMessage('');\n      setServiceStartSuccessMessage('');\n      setServiceStopSuccessMessage('');\n      setErrorMessage('');\n      setSuccessMessage('');\n    }, 5000);\n  };\n\n  useEffect(() => {\n    clearMessagesAfterDelay();\n  }, [ModbusSuccessMessage, SPBSuccessMessage, NodeAttributeSuccessMessage, MqttSuccessMessage, ServiceStartSuccessMessage, ServiceStopSuccessMessage, errorMessage, successMessage]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`/node-parameter/`);\n        const responseData = await response.json();\n        setData(responseData);\n\n        if (responseData.node_parameters) {\n          const modbusValues = responseData.node_parameters.find(param => param.name === 'modbus')?.value;\n          if (modbusValues) {\n            setSelectedModbus(modbusValues);\n          }\n          const mqttValues = responseData.node_parameters.find(param => param.name === 'mqtt')?.value;\n          if (mqttValues) {\n            setQosOptions(mqttValues.qos_options || []);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n\n  const spbParameter = data.node_parameters.find(param => param.name === 'spb_parameter')?.value;\n  const nodeAttributes = data.node_parameters.find(param => param.name === 'node_attributes')?.value;\n  const mqtt = data.node_parameters.find(param => param.name === 'mqtt')?.value;\n\n  const uniqueBaudrateList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.baudrate_options)];\n  const uniqueWordLengthList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.wordlength_options)];\n  const uniqueParityList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.parity_options)];\n  const uniqueStopbitsList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.stopbits_options)];\n  const uniquePortList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.port_options)];\n  const uniqueMethodList = [...new Set(data.node_parameters.find(param => param.name === 'modbus')?.value.method_options)];\n\n  const handleUpdateSpbParameterFormOpen = () => {\n    setUpdatedEdgeNodeId(spbParameter?.edge_node_id || '');\n    setUpdatedGroupId(spbParameter?.group_id || '');\n    setUpdatedHostName(spbParameter?.hostname || '');\n    setUpdateSpbParameterFormOpen(true);\n  };\n\n  const handleAddNodeAttributeFormOpen = () => {\n    setFormDataList([{ name: '', value: '' }]);\n    setAddNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateNodeAttributeFormOpen = () => {\n    const initialUpdatedAttributes = nodeAttributes?.map(attr => ({ name: attr.name, value: attr.value })) || [];\n    setUpdatedAttributes(initialUpdatedAttributes);\n    setUpdateNodeAttributeFormOpen(true);\n  };\n\n  const handleUpdateMqttFormOpen = () => {\n    setUpdatedBrokerHost(mqtt?.broker_host || '');\n    setUpdatedBrokerPort(mqtt?.broker_port || '');\n    setUpdatedQos(mqtt?.qos || '');\n    setUpdatedClientId(mqtt?.user || '');\n    setUpdatedClientPassword(mqtt?.password || '');\n    setUpdateMqttFormOpen(true);\n    setQosOptions(mqtt?.qos_options || []); // Set the QoS options here\n  };\n  \n\n  const handleUpdateFormClose = () => {\n    setUpdateSpbParameterFormOpen(false);\n    setAddNodeAttributeFormOpen(false);\n    setUpdateNodeAttributeFormOpen(false);\n    setUpdateMqttFormOpen(false);\n  };\n\n  const handleUpdateSpbParameterSubmit = async () => {\n    const updatedData = {\n      spb_parameter: {\n        edge_node_id: updatedEdgeNodeId,\n        group_id: updatedGroupId,\n        hostname: updatedHostName\n      },\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/3`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setSPBSuccessMessage('SPB Parameter updated successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'spb_parameter' ?\n              { ...param, value: { edge_node_id: updatedEdgeNodeId, group_id: updatedGroupId, hostname:updatedHostName } }\n              : param\n          )),\n        }));\n      } else {\n        setErrorMessage(`Failed to update SPB Parameter: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating SPB Parameter: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleFormDataChange = (index, key, value) => {\n    const updatedFormDataList = [...formDataList];\n    updatedFormDataList[index][key] = value;\n    setFormDataList(updatedFormDataList);\n  };\n\n  const handleAddFormData = () => {\n    setFormDataList([...formDataList, { name: '', value: '' }]);\n  };\n\n  const handleRemoveFormData = (indexToRemove) => {\n    setFormDataList((prevFormDataList) => {\n      return prevFormDataList.filter((_, index) => index !== indexToRemove);\n    });\n  };\n\n\n  const handleUpdateInputChange = (index, updatedAttribute) => {\n    setUpdatedAttributes(prevAttributes => {\n      const updatedAttributesCopy = [...prevAttributes];\n      updatedAttributesCopy[index] = updatedAttribute;\n      return updatedAttributesCopy;\n    });\n  };\n\n  const handleRemoveAttribute = (index) => {\n    const updatedAttributesCopy = [...updatedAttributes];\n    updatedAttributesCopy.splice(index, 1);\n    setUpdatedAttributes(updatedAttributesCopy);\n  };\n\n  const handleAddNodeAttributeSubmit = async () => {\n    try {\n      const newAttributes = formDataList.map(formData => ({ name: formData.name, value: formData.value }));\n      const response = await fetch(`/node-parameter/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'node_attributes',\n          value: newAttributes,\n        }),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attributes added successfully.');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'node_attributes' ?\n              { ...param, value: [...(param.value || []), ...newAttributes] }\n              : param\n          )),\n        }));\n        setFormDataList([]);\n      } else {\n        setErrorMessage(`Failed to add Node Attributes: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error adding Node Attributes: ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateNodeAttributeSubmit = async () => {\n    setData((prevData) => {\n      const updatedNodeParameters = prevData.node_parameters.map((param) => {\n        if (param.name === 'node_attributes') {\n          return {\n            ...param,\n            value: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n          };\n        }\n        return param;\n      });\n\n      return {\n        ...prevData,\n        node_parameters: updatedNodeParameters,\n      };\n    });\n\n    const updatedData = {\n      node_attributes: updatedAttributes.map(attr => ({ name: attr.name, value: attr.value })),\n    };\n\n    try {\n      const response = await fetch(`/node-parameter/4`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n\n      if (response.ok) {\n        setNodeAttributeSuccessMessage('Node Attribute updated successfully.');\n      } else {\n        setErrorMessage(`Failed to update Node Attribute: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Node Attribute:  ${error}`);\n    }\n\n    handleUpdateFormClose();\n  };\n\n  const handleUpdateMqttSubmit = async () => {\n    const updatedData = {\n      mqtt: {\n        broker_host: updatedBrokerHost,\n        broker_port: updatedBrokerPort,\n        user: updatedClientId,\n        password: updatedClientPassword,\n        qos: updatedQos,\n        qos_options: qosOptions, // Preserve the existing qos_options\n      },\n    };\n  \n    try {\n      const response = await fetch(`/node-parameter/2`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedData),\n      });\n  \n      if (response.ok) {\n        const responseData = await response.json();\n  \n        console.log('Response Data:', responseData);\n  \n        setMqttSuccessMessage('Mqtt updated successfully');\n        setData((prevData) => ({\n          ...prevData,\n          node_parameters: prevData.node_parameters.map((param) => (\n            param.name === 'mqtt'\n              ? { ...param, value: { broker_host: updatedBrokerHost, broker_port: updatedBrokerPort, user: updatedClientId, password: updatedClientPassword, qos: updatedQos, qos_options: responseData.qos_options || [] } }\n              : param\n          )),\n        }));\n  \n        // Update qosOptions with the new options received from the server\n        setQosOptions(responseData.qos_options || []); // <-- Update qosOptions here\n      } else {\n        setErrorMessage(`Failed to update Mqtt: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Mqtt: ${error}`);\n    }\n  \n    handleUpdateFormClose();\n  };\n  \n  \n  \n\n  const handleModbusChange = async (paramName, value) => {\n    try {\n      const response = await fetch(`/node-parameter/1`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          modbus: { ...selectedModbus, [paramName]: value },\n        }),\n      });\n\n      if (response.ok) {\n        setModbusSuccessMessage('Modbus updated successfully.');\n        setSelectedModbus((prevState) => ({\n          ...prevState,\n          [paramName]: value,\n        }));\n      } else {\n        setErrorMessage(`Failed to update Modbus: ${response.statusText}`);\n      }\n    } catch (error) {\n      setErrorMessage(`Error updating Modbus: ${error}`);\n    }\n  };\n\n  const handleRestart = () => {\n    setIsRestarting(true);\n\n    fetch(`/service/restart-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStartSuccessMessage('Service is restarting.');\n        } else {\n          setErrorMessage(`Failed to restart service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error restarting service: ${error}`);\n      })\n      .finally(() => {\n        setIsRestarting(false);\n      });\n  };\n\n  const handleStop = () => {\n    setIsStopping(true);\n\n    fetch(`/service/stop-services`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          setServiceStopSuccessMessage('Service is stopped.');\n        } else {\n          setErrorMessage(`Failed to stop service: ${response.statusText}`);\n        }\n      })\n      .catch((error) => {\n        setErrorMessage(`Error stopping service: ${error}`);\n      })\n      .finally(() => {\n        setIsStopping(false);\n      });\n  };\n\n  // Define SuccessMessage and ErrorMessage components\n  const SuccessMessage = ({ message}) => (\n    <Alert severity=\"success\" >\n      {message}\n    </Alert>\n  );\n\n  const ErrorMessage = ({ message}) => (\n    <Alert severity=\"error\">\n      {message}\n    </Alert>\n  );\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n      {ServiceStartSuccessMessage && (\n        <SuccessMessage message={ServiceStartSuccessMessage} onClose={() => setServiceStartSuccessMessage('')}/>\n      )}\n      {ServiceStopSuccessMessage && (\n        <SuccessMessage message={ServiceStopSuccessMessage} onClose={() => setServiceStopSuccessMessage('')}/>\n      )}\n      {NodeAttributeSuccessMessage && (\n        <SuccessMessage message={NodeAttributeSuccessMessage} onClose={() => setNodeAttributeSuccessMessage('')}/>\n      )}\n      {SPBSuccessMessage && (\n        <SuccessMessage message={SPBSuccessMessage} onClose={() => setSPBSuccessMessage('')}/>  \n      )}\n      {MqttSuccessMessage && (\n        <SuccessMessage message={MqttSuccessMessage} onClose={() => setMqttSuccessMessage('')}/>\n      )}\n      {ModbusSuccessMessage && (\n        <SuccessMessage message={ModbusSuccessMessage} onClose={() => setModbusSuccessMessage('')}/>\n      )}\n      {errorMessage && (\n        <ErrorMessage message={errorMessage} onClose={() => setErrorMessage('')}/>\n      )}\n      </Grid>\n      <Grid item xs={6}>\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>\n          <Button onClick={handleRestart} disabled={isRestarting || restartButtonClicked} variant=\"contained\" color=\"primary\">\n            Restart\n          </Button>\n          <Button onClick={handleStop} disabled={isStopping} style={{ marginLeft: '10px'}} variant=\"contained\" color=\"error\">\n            Stop\n          </Button>\n        </div>\n      </Grid>\n        \n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\" >Node Attributes</Typography>\n            <div style={{ display: 'flex', gap: '0px' }}>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginRight: '0px' }}\n                onClick={handleUpdateNodeAttributeFormOpen}\n              >\n                <EditIcon style={{ fontSize : \"medium\" }}/>\n              </IconButton>\n              <IconButton\n                variant=\"outlined\"\n                style={{ marginLeft: '5px' }}\n                onClick={handleAddNodeAttributeFormOpen}\n              >\n                <AddIcon style={{ color: 'green', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          </div>\n          <div style={{ marginTop: '3px' }}>\n            {nodeAttributes && nodeAttributes.map(attr => (\n              <div key={attr.name}>\n                <Typography variant=\"body1\">\n                  <strong>{attr.name}:</strong> {attr.value}\n                </Typography>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">SPB Parameter</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateSpbParameterFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Edge Node Id:</strong> {spbParameter?.edge_node_id}\n          </div>\n          <div>\n            <strong>Group Id:</strong> {spbParameter?.group_id}\n          </div>\n          <div>\n            <strong>Host Name:</strong> {spbParameter?.hostname}\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={4}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">MQTT</Typography>\n            <IconButton\n              variant=\"outlined\"\n              style={{ marginLeft: '10px' }}\n              onClick={handleUpdateMqttFormOpen}\n            >\n              <EditIcon style={{ fontSize : \"medium\" }}/>\n            </IconButton>\n          </div>\n          <div>\n            <strong>Broker Host:</strong> {mqtt?.broker_host}\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div style={{ marginRight: '60px' }}>\n              <strong>Broker Port:</strong> {mqtt?.broker_port}\n            </div>\n            {/* <div>\n              <strong>QoS:</strong> {mqtt?.qos}\n            </div> */}\n          </div>\n          <div>\n            <strong>Client ID:</strong> {mqtt?.user}\n          </div>\n          <div>\n            <strong>Client Password:</strong> {mqtt?.password}\n          </div>\n        </Paper>\n      </Grid>\n\n\n      <Grid item xs={12}>\n        <Paper style={{ padding: '20px', marginBottom: '20px' }}>\n          <Typography variant=\"h6\">Modbus Parameters</Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n            {['Port', 'Method', 'Parity', 'Baudrate', 'Stopbits', 'WordLength'].map((label, index) => (\n              <div key={index} style={{ marginRight: '20px', width: label === 'Method' ? '150px' : '120px' }}>\n                <FormControl fullWidth>\n                  <InputLabel>{label}</InputLabel>\n                  <Select\n                    value={selectedModbus[label.toLowerCase()]}\n                    onChange={(e) => handleModbusChange(label.toLowerCase(), e.target.value)}\n                  >\n                    {label === 'Baudrate' && uniqueBaudrateList.map(baudrate => (\n                      <MenuItem key={baudrate} value={baudrate}>\n                        {baudrate}\n                      </MenuItem>\n                    ))}\n                    {label === 'WordLength' && uniqueWordLengthList.map(wordLength => (\n                      <MenuItem key={wordLength} value={wordLength}>\n                        {wordLength}\n                      </MenuItem>\n                    ))}\n                    {label === 'Parity' && uniqueParityList.map(parity => (\n                      <MenuItem key={parity} value={parity}>\n                        {parity}\n                      </MenuItem>\n                    ))}\n                    {label === 'Stopbits' && uniqueStopbitsList.map(stopbits => (\n                      <MenuItem key={stopbits} value={stopbits}>\n                        {stopbits}\n                      </MenuItem>\n                    ))}\n                    {label === 'Port' && uniquePortList.map(port => (\n                      <MenuItem key={port} value={port}>\n                        {port}\n                      </MenuItem>\n                    ))}\n                    {label === 'Method' && uniqueMethodList.map(method => (\n                      <MenuItem key={method} value={method}>\n                        {method}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n\n      {/* Update form for SPB Parameter */}\n      <Dialog open={updateSpbParameterFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update SPB Parameter</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Edge Node ID\"\n            value={updatedEdgeNodeId}\n            onChange={(e) => setUpdatedEdgeNodeId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }} // Adjust values based on your preference\n          />\n          <TextField\n            label=\"Group ID\"\n            value={updatedGroupId}\n            onChange={(e) => setUpdatedGroupId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Host Name\"\n            value={updatedHostName}\n            onChange={(e) => setUpdatedHostName(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateSpbParameterSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit form for Node Attribute */}\n      <Dialog open={updateNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Edit Node Attribute</DialogTitle>\n        <DialogContent>\n          {updatedAttributes.map((attr, index) => (\n            <div key={index} style={{ display: 'flex', flexDirection: 'row', marginBottom: '10px' }}>\n              <TextField\n                label=\"Attribute Name\"\n                value={attr.name}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, name: e.target.value })}\n                style={{ marginRight: '10px', marginTop: '5px' }}\n              />\n              <TextField\n                label=\"Attribute Value\"\n                value={attr.value}\n                onChange={(e) => handleUpdateInputChange(index, { ...attr, value: e.target.value })}\n                style={{ marginTop: '5px' }}\n              />\n              <IconButton onClick={() => handleRemoveAttribute(index)}>\n                <DeleteIcon style={{ color: 'black', fontSize : \"medium\" }} />\n              </IconButton>\n            </div>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateNodeAttributeSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      \n      {/* Create form for Add Node Attribute */}\n      <Dialog open={addNodeAttributeFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Add Node Attribute</DialogTitle>\n        <DialogContent>\n          {formDataList.map((formData, index) => (\n            <Grid container spacing={2} key={index} alignItems=\"center\" style={{ marginBottom: '8px' }}>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Name\"\n                  value={formData.name}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'name', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  label=\"Attribute Value\"\n                  value={formData.value}\n                  style={{ marginTop: '5px' }}\n                  onChange={(e) => handleFormDataChange(index, 'value', e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                {index > 0 && (\n                  <IconButton onClick={() => handleRemoveFormData(index)}>\n                    <RemoveIcon style={{ color: 'red' }} />\n                  </IconButton>\n                )}\n              </Grid>\n              <Grid item xs={2}>\n                {index === formDataList.length - 1 && (\n                  <IconButton onClick={handleAddFormData}>\n                    <AddIcon style={{ color: 'green' }} />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleAddNodeAttributeSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      {/* Update form for Mqtt */}\n      <Dialog open={updateMqttFormOpen} onClose={handleUpdateFormClose}>\n        <DialogTitle>Update Mqtt</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Broker Host\"\n            value={updatedBrokerHost}\n            onChange={(e) => setUpdatedBrokerHost(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px', marginTop: '5px' }}\n          />\n          <TextField\n            label=\"Broker Port\"\n            value={updatedBrokerPort}\n            style={{ marginBottom: '16px' }}\n            onChange={(e) => setUpdatedBrokerPort(e.target.value)}\n            fullWidth\n          />\n          {/* <TextField\n            label=\"Qos\"\n            select\n            value={updatedQos}\n            style={{ marginBottom: '16px' }}\n            onChange={(e) => setUpdatedQos(e.target.value)}\n            fullWidth\n          >\n            {qosOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField> */}\n          <TextField\n            label=\"Client ID\"\n            value={updatedClientId}\n            onChange={(e) => setUpdatedClientId(e.target.value)}\n            fullWidth\n            style={{ marginBottom: '16px' }}\n          />\n          <TextField\n            label=\"Client Password\"\n            value={updatedClientPassword}\n            onChange={(e) => setUpdatedClientPassword(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleUpdateFormClose}>Cancel</Button>\n          <Button onClick={handleUpdateMqttSubmit} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n\nexport default NodeParameterTable;"],"names":["createSvgIcon","_jsx","d","NodeParameterTable","_data$node_parameters","_data$node_parameters2","_data$node_parameters3","_data$node_parameters4","_data$node_parameters5","_data$node_parameters6","_data$node_parameters7","_data$node_parameters8","_data$node_parameters9","data","setData","useState","updateSpbParameterFormOpen","setUpdateSpbParameterFormOpen","updateNodeAttributeFormOpen","setUpdateNodeAttributeFormOpen","updatedAttributes","setUpdatedAttributes","updateMqttFormOpen","setUpdateMqttFormOpen","addNodeAttributeFormOpen","setAddNodeAttributeFormOpen","formDataList","setFormDataList","selectedModbus","setSelectedModbus","port","method","parity","baudrate","stopbits","wordLength","updatedEdgeNodeId","setUpdatedEdgeNodeId","updatedGroupId","setUpdatedGroupId","updatedHostName","setUpdatedHostName","updatedBrokerHost","setUpdatedBrokerHost","updatedBrokerPort","setUpdatedBrokerPort","updatedClientId","setUpdatedClientId","updatedClientPassword","setUpdatedClientPassword","updatedQos","setUpdatedQos","qosOptions","setQosOptions","isRestarting","setIsRestarting","isStopping","setIsStopping","restartButtonClicked","ModbusSuccessMessage","setModbusSuccessMessage","SPBSuccessMessage","setSPBSuccessMessage","NodeAttributeSuccessMessage","setNodeAttributeSuccessMessage","MqttSuccessMessage","setMqttSuccessMessage","ServiceStartSuccessMessage","setServiceStartSuccessMessage","ServiceStopSuccessMessage","setServiceStopSuccessMessage","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","setTimeout","async","response","fetch","responseData","json","node_parameters","_responseData$node_pa","_responseData$node_pa2","modbusValues","find","param","name","value","mqttValues","qos_options","error","console","fetchData","children","spbParameter","nodeAttributes","mqtt","uniqueBaudrateList","Set","baudrate_options","uniqueWordLengthList","wordlength_options","uniqueParityList","parity_options","uniqueStopbitsList","stopbits_options","uniquePortList","port_options","uniqueMethodList","method_options","handleUpdateFormClose","handleFormDataChange","index","key","updatedFormDataList","handleAddFormData","handleUpdateInputChange","updatedAttribute","prevAttributes","updatedAttributesCopy","SuccessMessage","_ref","message","Alert","severity","ErrorMessage","_ref2","_jsxs","Grid","container","spacing","item","xs","onClose","style","display","justifyContent","marginBottom","Button","onClick","handleRestart","headers","then","ok","concat","statusText","catch","finally","disabled","variant","color","handleStop","marginLeft","Paper","padding","alignItems","Typography","gap","IconButton","marginRight","handleUpdateNodeAttributeFormOpen","initialUpdatedAttributes","map","attr","EditIcon","fontSize","handleAddNodeAttributeFormOpen","AddIcon","marginTop","handleUpdateSpbParameterFormOpen","edge_node_id","group_id","hostname","handleUpdateMqttFormOpen","broker_host","broker_port","qos","user","password","flexDirection","label","width","FormControl","fullWidth","InputLabel","Select","toLowerCase","onChange","e","paramName","body","JSON","stringify","modbus","prevState","handleModbusChange","target","MenuItem","Dialog","open","DialogTitle","DialogContent","TextField","DialogActions","updatedData","spb_parameter","prevData","splice","handleRemoveAttribute","DeleteIcon","updatedNodeParameters","node_attributes","formData","handleRemoveFormData","indexToRemove","prevFormDataList","filter","_","RemoveIcon","length","newAttributes","log"],"sourceRoot":""}